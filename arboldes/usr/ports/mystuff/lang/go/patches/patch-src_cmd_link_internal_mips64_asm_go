Index: src/cmd/link/internal/mips64/asm.go
--- src/cmd/link/internal/mips64/asm.go.orig
+++ src/cmd/link/internal/mips64/asm.go
@@ -37,6 +37,7 @@ import (
 	"cmd/link/internal/loader"
 	"cmd/link/internal/sym"
 	"debug/elf"
+	"fmt"
 )
 
 var (
@@ -135,50 +136,65 @@ func elfreloc1(ctxt *ld.Link, out *ld.OutBuf, ldr *loa
 
 	// mips64 ELF relocation (endian neutral)
 	//		offset	uint64
-	//		sym		uint32
+	//		sym	uint32
 	//		ssym	uint8
 	//		type3	uint8
 	//		type2	uint8
-	//		type	uint8
+	//		type1	uint8
 	//		addend	int64
 
 	addend := r.Xadd
 
+	// offset
 	out.Write64(uint64(sectoff))
 
+	// sym and ssym
 	elfsym := ld.ElfSymForReloc(ctxt, r.Xsym)
 	out.Write32(uint32(elfsym))
 	out.Write8(0)
-	out.Write8(0)
-	out.Write8(0)
+
+	// types
+	var type3, type2, type1 elf.R_MIPS
 	switch r.Type {
-	default:
-		return false
 	case objabi.R_ADDR, objabi.R_DWARFSECREF:
 		switch r.Size {
 		case 4:
-			out.Write8(uint8(elf.R_MIPS_32))
+			type1 = elf.R_MIPS_32
 		case 8:
-			out.Write8(uint8(elf.R_MIPS_64))
+			type1 = elf.R_MIPS_64
 		default:
 			return false
 		}
 	case objabi.R_ADDRMIPS:
-		out.Write8(uint8(elf.R_MIPS_LO16))
+		type1 = elf.R_MIPS_LO16
 	case objabi.R_ADDRMIPSU:
-		out.Write8(uint8(elf.R_MIPS_HI16))
+		type1 = elf.R_MIPS_HI16
 	case objabi.R_ADDRMIPSTLS:
-		out.Write8(uint8(elf.R_MIPS_TLS_TPREL_LO16))
+		type1 = elf.R_MIPS_TLS_TPREL_LO16
 		if ctxt.Target.IsOpenbsd() {
 			// OpenBSD mips64 does not currently offset TLS by 0x7000,
 			// as such we need to add this back to get the correct offset
 			// via the external linker.
 			addend += 0x7000
 		}
-	case objabi.R_CALLMIPS,
-		objabi.R_JMPMIPS:
-		out.Write8(uint8(elf.R_MIPS_26))
+	case objabi.R_CALLMIPS, objabi.R_JMPMIPS:
+		type1 = elf.R_MIPS_26
+	case objabi.R_MIPS_GPREL_HI16:
+		type3, type2, type1 = elf.R_MIPS_HI16, elf.R_MIPS_SUB, elf.R_MIPS_GPREL16
+	case objabi.R_MIPS_GPREL_LO16:
+		type3, type2, type1 = elf.R_MIPS_LO16, elf.R_MIPS_SUB, elf.R_MIPS_GPREL16
+	case objabi.R_MIPS_CALL16:
+		type1 = elf.R_MIPS_CALL16
+	case objabi.R_MIPS_JALR:
+		type1 = elf.R_MIPS_JALR
+	default:
+		return false
 	}
+	out.Write8(uint8(type3))
+	out.Write8(uint8(type2))
+	out.Write8(uint8(type1))
+
+	// addend
 	out.Write64(uint64(addend))
 
 	return true
@@ -275,6 +291,88 @@ func machoreloc1(*sys.Arch, *ld.OutBuf, *loader.Loader
 	return false
 }
 
+func trampoline(ctxt *ld.Link, ldr *loader.Loader, ri int, rs, s loader.Sym) {
+	if !ctxt.Target.IsExternal() {
+		return
+	}
+
+	relocs := ldr.Relocs(s)
+	r := relocs.At(ri)
+	switch r.Type() {
+	case objabi.R_CALLIND:
+		if rs != 0 || ldr.SymType(rs) == sym.SDYNIMPORT {
+			ctxt.Errorf(s, "unsupported indirect call to SDYNIMPORT symbol")
+		}
+	case objabi.R_CALLMIPS, objabi.R_JMPMIPS:
+		if rs == 0 || ldr.SymType(rs) != sym.SDYNIMPORT {
+			break
+		}
+		if r.Add() != 0 {
+			ldr.Errorf(s, "PLT call with non-zero addend (%v)", r.Add())
+		}
+
+		// In the case of SDYNIMPORT symbols, add a trampoline that provides
+		// the necessary calling convention and relocations.
+
+		// Look up existing trampolines first. If we found one within the range
+		// of direct call, we can reuse it. otherwise create a new one.
+		var tramp loader.Sym
+		for i := 0; ; i++ {
+			oName := ldr.SymName(rs)
+			name := oName
+			name += fmt.Sprintf("-tramp%d", i)
+			tramp = ldr.LookupOrCreateSym(name, int(ldr.SymVersion(rs)))
+			ldr.SetAttrReachable(tramp, true)
+			if ldr.SymType(tramp) == sym.SDYNIMPORT {
+				// don't reuse trampoline defined in other module
+				continue
+			}
+			if oName == "runtime.deferreturn" {
+				ldr.SetIsDeferReturnTramp(tramp, true)
+			}
+			break
+		}
+		if ldr.SymType(tramp) == 0 {
+			// trampoline does not exist, create one
+			trampb := ldr.MakeSymbolUpdater(tramp)
+			ctxt.AddTramp(trampb)
+			genCallTramp(ctxt.Arch, ctxt.LinkMode, ldr, trampb, rs, int64(r.Add()))
+		}
+		// modify reloc to point to tramp, which will be resolved later
+		sb := ldr.MakeSymbolUpdater(s)
+		relocs := sb.Relocs()
+		r := relocs.At(ri)
+		r.SetSym(tramp)
+		r.SetAdd(0)
+	default:
+		ctxt.Errorf(s, "trampoline called with non-jump reloc: %d (%s)", r.Type(), sym.RelocName(ctxt.Arch, r.Type()))
+	}
+}
+
+func genCallTramp(arch *sys.Arch, linkmode ld.LinkMode, ldr *loader.Loader, tramp *loader.SymbolBuilder, target loader.Sym, offset int64) {
+	// Generate a trampoline that loads register $25 and jumps to that address.
+	// The JALR is needed for the relocation and PIC code requires that $25 contain
+	// the function address when called. The offset is based off the value that gp
+	// was initialised to via the dynamic linker. This is loaded into register $23
+	// via a pair of GP relative relocations. The address of the trampoline is
+	// expected to already be in $25 from the call to the trampoline.
+
+	// Load R23 (aka REGTMP) with gp address.
+	tramp.AddSymRef(arch, tramp.Sym(), 0, objabi.R_MIPS_GPREL_HI16, 4)
+	tramp.SetUint32(arch, tramp.Size()-4, 0x3c170000) // lui    $23, 0
+	tramp.AddUint32(arch, 0x02f9b82d)                 // daddu  $23, $23, $25
+	tramp.AddSymRef(arch, tramp.Sym(), 0, objabi.R_MIPS_GPREL_LO16, 4)
+	tramp.SetUint32(arch, tramp.Size()-4, 0x66f70000) // daddiu $23, $23, 0
+	tramp.AddUint32(arch, 0x02e0e025)                 // move   $gp, $23
+
+	// Load R25 with function address and indirect call.
+	tramp.AddSymRef(arch, target, offset, objabi.R_MIPS_CALL16, 4)
+	tramp.SetUint32(arch, tramp.Size()-4, 0xdef90000) // ld     $25, 0($23)
+	tramp.AddSymRef(arch, target, offset, objabi.R_MIPS_JALR, 4)
+	tramp.SetUint32(arch, tramp.Size()-4, 0x03200009) // jalr   $0, $25
+	tramp.AddUint32(arch, 0x00000000)                 // nop
+}
+
 func archreloc(target *ld.Target, ldr *loader.Loader, syms *ld.ArchSyms, r loader.Reloc, s loader.Sym, val int64) (o int64, nExtReloc int, ok bool) {
 	if target.IsExternal() {
 		switch r.Type() {
@@ -285,7 +383,11 @@ func archreloc(target *ld.Target, ldr *loader.Loader, 
 			objabi.R_ADDRMIPSU,
 			objabi.R_ADDRMIPSTLS,
 			objabi.R_CALLMIPS,
-			objabi.R_JMPMIPS:
+			objabi.R_JMPMIPS,
+			objabi.R_MIPS_GPREL_HI16,
+			objabi.R_MIPS_GPREL_LO16,
+			objabi.R_MIPS_CALL16,
+			objabi.R_MIPS_JALR:
 			return val, 1, true
 		}
 	}
@@ -335,7 +437,11 @@ func extreloc(target *ld.Target, ldr *loader.Loader, r
 
 	case objabi.R_ADDRMIPSTLS,
 		objabi.R_CALLMIPS,
-		objabi.R_JMPMIPS:
+		objabi.R_JMPMIPS,
+		objabi.R_MIPS_GPREL_HI16,
+		objabi.R_MIPS_GPREL_LO16,
+		objabi.R_MIPS_CALL16,
+		objabi.R_MIPS_JALR:
 		return ld.ExtrelocSimple(ldr, r), true
 	}
 	return loader.ExtReloc{}, false
