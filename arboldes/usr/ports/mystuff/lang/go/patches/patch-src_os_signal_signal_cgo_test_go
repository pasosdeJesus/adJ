Index: src/os/signal/signal_cgo_test.go
--- src/os/signal/signal_cgo_test.go.orig
+++ src/os/signal/signal_cgo_test.go
@@ -14,6 +14,7 @@ import (
 	"context"
 	"encoding/binary"
 	"fmt"
+	"internal/syscall/unix"
 	"internal/testenv"
 	"internal/testpty"
 	"os"
@@ -304,9 +305,8 @@ func runSessionLeader(t *testing.T, pause time.Duratio
 
 		// Take TTY.
 		pgrp := int32(syscall.Getpgrp()) // assume that pid_t is int32
-		_, _, errno := syscall.Syscall(syscall.SYS_IOCTL, ptyFD, syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&pgrp)))
-		if errno != 0 {
-			return fmt.Errorf("error setting tty process group: %w", errno)
+		if err := unix.Ioctl(ptyFD, syscall.TIOCSPGRP, unsafe.Pointer(&pgrp)); err != nil {
+			return fmt.Errorf("error setting tty process group: %w", err)
 		}
 
 		// Give the kernel time to potentially wake readers and have
@@ -315,9 +315,8 @@ func runSessionLeader(t *testing.T, pause time.Duratio
 
 		// Give TTY back.
 		pid := int32(cmd.Process.Pid) // assume that pid_t is int32
-		_, _, errno = syscall.Syscall(syscall.SYS_IOCTL, ptyFD, syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&pid)))
-		if errno != 0 {
-			return fmt.Errorf("error setting tty process group back: %w", errno)
+		if err := unix.Ioctl(ptyFD, syscall.TIOCSPGRP, unsafe.Pointer(&pid)); err != nil {
+			return fmt.Errorf("error setting tty process group back: %w", err)
 		}
 
 		// Report that we are done and SIGCONT can be sent. Note that
