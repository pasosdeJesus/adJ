Use static_cast instead of a potentially dangerous reinterpret_cast.
Doesn't matter since this file only supports riscv64 where unsigned long and
unsigned long long are actually the same size.
../deps/v8/src/codegen/riscv64/assembler-riscv64.cc:403:22: error: reinterpret_cast from 'v8::internal::Address' (aka 'unsigned long') to 'uint64_t' (aka 'unsigned long long') is not allowed

Index: deps/v8/src/codegen/riscv64/assembler-riscv64.cc
--- deps/v8/src/codegen/riscv64/assembler-riscv64.cc.orig
+++ deps/v8/src/codegen/riscv64/assembler-riscv64.cc
@@ -406,7 +406,7 @@ int Assembler::target_at(int pos, bool is_internal) {
       Address pc = reinterpret_cast<Address>(buffer_start_ + pos);
       pc = target_address_at(pc);
       uint64_t instr_address = reinterpret_cast<uint64_t>(buffer_start_ + pos);
-      uint64_t imm = reinterpret_cast<uint64_t>(pc);
+      uint64_t imm = static_cast<uint64_t>(pc);
       if (imm == kEndOfJumpChain) {
         return kEndOfChain;
       } else {
