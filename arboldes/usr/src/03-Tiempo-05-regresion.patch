diff -uN src56-orig/regress/lib/libc/locale/Makefile src/regress/lib/libc/locale/Makefile
--- src56-orig/regress/lib/libc/locale/Makefile	Thu Aug  1 16:26:30 2013
+++ src/regress/lib/libc/locale/Makefile	Mon Apr 28 09:35:18 2014
@@ -1,5 +1,5 @@
 # $OpenBSD: Makefile,v 1.7 2020/01/13 15:35:57 bluhm Exp $
 
-SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb
+SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb check_time
 
 .include <bsd.subdir.mk>
diff -ruN -x *~ -x *orig src56-orig/regress/lib/libc/locale/check_time/Makefile src/regress/lib/libc/locale/check_time/Makefile
--- src56-orig/regress/lib/libc/locale/check_time/Makefile	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_time/Makefile	Wed Feb  4 05:17:12 2015
@@ -0,0 +1,29 @@
+
+
+NOMAN=
+PROG=check_time
+
+CFLAGS=-g
+
+
+run-regress-check_time: ${PROG}
+	./${PROG} >/dev/null
+
+
+reg-nolibc: loadtextcat.o _def_time.o check_time.o setlocale.o
+	cc ${LFLAGS} -g -o check_time check_time.o _def_time.o loadtextcat.o setlocale.o
+	./${PROG} 
+
+CFLAGS=-g -I/usr/src/lib/libc/locale -I/usr/src/lib/libc/include 
+CFLAGS+=-DLOCALE_CHARSETS="\"${LOCALECHARSETS}\""
+
+loadtextcat.o:
+	cc ${CFLAGS} -o loadtextcat.o -c /usr/src/lib/libc/locale/loadtextcat.c
+
+_def_time.o:
+	cc ${CFLAGS} -o _def_time.o -c /usr/src/lib/libc/locale/_def_time.c
+
+setlocale.o:
+	cc ${CFLAGS} -o setlocale.o -c /usr/src/lib/libc/locale/setlocale.c
+
+.include <bsd.regress.mk>
diff -ruN -x *~ -x *orig src56-orig/regress/lib/libc/locale/check_time/check_time.c src/regress/lib/libc/locale/check_time/check_time.c
--- src56-orig/regress/lib/libc/locale/check_time/check_time.c	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_time/check_time.c	Sat Mar  7 07:02:13 2015
@@ -0,0 +1,669 @@
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2014. vtamara@pasosdeJesus.org
+ *
+ * $adJ$
+ */
+
+#include <langinfo.h>
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <wchar.h>
+
+
+int bad = 0;
+
+#define p(t) printf("%s:\t ",#t); \
+	if (t) { \
+		printf("\x1b[38;5;2mOK\x1b[0m\n"); \
+	} else { \
+		bad++; \
+		printf("\x1b[38;5;1mERROR\x1b[0m\n"); \
+	}
+
+//extern struct lc_time_T _time_locale;
+extern int __tlocale_changed;
+extern const struct lc_time_T	*_CurrentTimeLocale ;
+
+void
+timedebug(void) {
+	int i;
+	printf("D_T_FMT: %s\n", nl_langinfo(D_T_FMT));
+	printf("D_FMT: %s\n", nl_langinfo(D_FMT));
+	printf("T_FMT: %s\n", nl_langinfo(T_FMT));
+	printf("T_FMT_AMPM: %s\n", nl_langinfo(T_FMT_AMPM));
+	printf("AM_STR: %s\n", nl_langinfo(AM_STR));
+	printf("PM_STR: %s\n", nl_langinfo(PM_STR));
+	printf("DAY_1: %s\n", nl_langinfo(DAY_1));
+	printf("DAY_2: %s\n", nl_langinfo(DAY_2));
+	printf("DAY_3: %s\n", nl_langinfo(DAY_3));
+	printf("DAY_4: %s\n", nl_langinfo(DAY_4));
+	printf("DAY_5: %s\n", nl_langinfo(DAY_5));
+	printf("DAY_6: %s\n", nl_langinfo(DAY_6));
+	printf("DAY_7: %s\n", nl_langinfo(DAY_7));
+	printf("ABDAY_1: %s\n", nl_langinfo(ABDAY_1));
+	printf("ABDAY_2: %s\n", nl_langinfo(ABDAY_2));
+	printf("ABDAY_3: %s\n", nl_langinfo(ABDAY_3));
+	printf("ABDAY_4: %s\n", nl_langinfo(ABDAY_4));
+	printf("ABDAY_5: %s\n", nl_langinfo(ABDAY_5));
+	printf("ABDAY_6: %s\n", nl_langinfo(ABDAY_6));
+	printf("ABDAY_7: %s\n", nl_langinfo(ABDAY_7));
+	printf("MON_1: %s\n", nl_langinfo(MON_1));
+	printf("MON_2: %s\n", nl_langinfo(MON_2));
+	printf("MON_3: %s\n", nl_langinfo(MON_3));
+	printf("MON_4: %s\n", nl_langinfo(MON_4));
+	printf("MON_5: %s\n", nl_langinfo(MON_5));
+	printf("MON_6: %s\n", nl_langinfo(MON_6));
+	printf("MON_7: %s\n", nl_langinfo(MON_7));
+	printf("MON_8: %s\n", nl_langinfo(MON_8));
+	printf("MON_9: %s\n", nl_langinfo(MON_9));
+	printf("MON_10: %s\n", nl_langinfo(MON_10));
+	printf("MON_11: %s\n", nl_langinfo(MON_11));
+	printf("MON_12: %s\n", nl_langinfo(MON_12));
+	printf("ABMON_1: %s\n", nl_langinfo(ABMON_1));
+	printf("ABMON_2: %s\n", nl_langinfo(ABMON_2));
+	printf("ABMON_3: %s\n", nl_langinfo(ABMON_3));
+	printf("ABMON_4: %s\n", nl_langinfo(ABMON_4));
+	printf("ABMON_5: %s\n", nl_langinfo(ABMON_5));
+	printf("ABMON_6: %s\n", nl_langinfo(ABMON_6));
+	printf("ABMON_7: %s\n", nl_langinfo(ABMON_7));
+	printf("ABMON_8: %s\n", nl_langinfo(ABMON_8));
+	printf("ABMON_9: %s\n", nl_langinfo(ABMON_9));
+	printf("ABMON_10: %s\n", nl_langinfo(ABMON_10));
+	printf("ABMON_11: %s\n", nl_langinfo(ABMON_11));
+	printf("ABMON_12: %s\n", nl_langinfo(ABMON_12));
+}
+
+void test_ltime_switch()
+{
+	char nom[256];
+	char col[512];
+	wchar_t wcol[512];
+	char *nl;
+	char *enc[]= { "UTF-8" };
+	char *es[]= { "es", "es_AR", "es_BO", "es_CL", "es_CO", "es_CR", 
+		"es_CU", "es_DO", "es_EC", "es_ES", "es_GT", "es_GQ", 
+		"es_HN", "es_MX", "es_NI", "es_PA",
+		"es_PE", "es_PR", "es_PY", "es_SV", "es_US", "es_UY",
+		"es_VE"
+       	};
+
+	struct tm tl;
+	struct tm *ptl;
+	int i, j;
+	time_t ti;
+	long ts;
+
+	nl = setlocale(LC_ALL, "POSIX");
+	printf("locale: %s\n", nl);
+	p(strcmp(nl_langinfo(D_T_FMT), "%a %b %e %H:%M:%S %Y") == 0);
+	p(strcmp(nl_langinfo(D_FMT), "%m/%d/%y") == 0);
+	p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+	p(strcmp(nl_langinfo(T_FMT_AMPM), "%I:%M:%S %p") == 0);
+	p(strcmp(nl_langinfo(AM_STR), "AM") == 0);
+	p(strcmp(nl_langinfo(PM_STR), "PM") == 0);
+	p(strcmp(nl_langinfo(DAY_1), "Sunday") == 0);
+	p(strcmp(nl_langinfo(DAY_2), "Monday") == 0);
+	p(strcmp(nl_langinfo(DAY_3), "Tuesday") == 0);
+	p(strcmp(nl_langinfo(DAY_4), "Wednesday") == 0);
+	p(strcmp(nl_langinfo(DAY_5), "Thursday") == 0);
+	p(strcmp(nl_langinfo(DAY_6), "Friday") == 0);
+	p(strcmp(nl_langinfo(DAY_7), "Saturday") == 0);
+	p(strcmp(nl_langinfo(ABDAY_1), "Sun") == 0);
+	p(strcmp(nl_langinfo(ABDAY_2), "Mon") == 0);
+	p(strcmp(nl_langinfo(ABDAY_3), "Tue") == 0);
+	p(strcmp(nl_langinfo(ABDAY_4), "Wed") == 0);
+	p(strcmp(nl_langinfo(ABDAY_5), "Thu") == 0);
+	p(strcmp(nl_langinfo(ABDAY_6), "Fri") == 0);
+	p(strcmp(nl_langinfo(ABDAY_7), "Sat") == 0);
+	p(strcmp(nl_langinfo(MON_1), "January") == 0);
+	p(strcmp(nl_langinfo(MON_2), "February") == 0);
+	p(strcmp(nl_langinfo(MON_3), "March") == 0);
+	p(strcmp(nl_langinfo(MON_4), "April") == 0);
+	p(strcmp(nl_langinfo(MON_5), "May") == 0);
+	p(strcmp(nl_langinfo(MON_6), "June") == 0);
+	p(strcmp(nl_langinfo(MON_7), "July") == 0);
+	p(strcmp(nl_langinfo(MON_8), "August") == 0);
+	p(strcmp(nl_langinfo(MON_9), "September") == 0);
+	p(strcmp(nl_langinfo(MON_10), "October") == 0);
+	p(strcmp(nl_langinfo(MON_11), "November") == 0);
+	p(strcmp(nl_langinfo(MON_12), "December") == 0);
+	p(strcmp(nl_langinfo(ABMON_1), "Jan") == 0);
+	p(strcmp(nl_langinfo(ABMON_2), "Feb") == 0);
+	p(strcmp(nl_langinfo(ABMON_3), "Mar") == 0);
+	p(strcmp(nl_langinfo(ABMON_4), "Apr") == 0);
+	p(strcmp(nl_langinfo(ABMON_5), "May") == 0);
+	p(strcmp(nl_langinfo(ABMON_6), "Jun") == 0);
+	p(strcmp(nl_langinfo(ABMON_7), "Jul") == 0);
+	p(strcmp(nl_langinfo(ABMON_8), "Aug") == 0);
+	p(strcmp(nl_langinfo(ABMON_9), "Sep") == 0);
+	p(strcmp(nl_langinfo(ABMON_10), "Oct") == 0);
+	p(strcmp(nl_langinfo(ABMON_11), "Nov") == 0);
+	p(strcmp(nl_langinfo(ABMON_12), "Dec") == 0);
+
+	// algo_loco.UTF-8 should default to UTF-8 that is POSIX
+	nl = setlocale(LC_ALL, "algo_loco.UTF-8"); 
+	printf("locale: %s\n", nl);
+	p(strcmp(nl_langinfo(D_T_FMT), "%a %b %e %H:%M:%S %Y") == 0);
+	p(strcmp(nl_langinfo(D_FMT), "%m/%d/%y") == 0);
+	p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+	p(strcmp(nl_langinfo(T_FMT_AMPM), "%I:%M:%S %p") == 0);
+	p(strcmp(nl_langinfo(AM_STR), "AM") == 0);
+	p(strcmp(nl_langinfo(PM_STR), "PM") == 0);
+	p(strcmp(nl_langinfo(DAY_1), "Sunday") == 0);
+	p(strcmp(nl_langinfo(DAY_2), "Monday") == 0);
+	p(strcmp(nl_langinfo(DAY_3), "Tuesday") == 0);
+	p(strcmp(nl_langinfo(DAY_4), "Wednesday") == 0);
+	p(strcmp(nl_langinfo(DAY_5), "Thursday") == 0);
+	p(strcmp(nl_langinfo(DAY_6), "Friday") == 0);
+	p(strcmp(nl_langinfo(DAY_7), "Saturday") == 0);
+	p(strcmp(nl_langinfo(ABDAY_1), "Sun") == 0);
+	p(strcmp(nl_langinfo(ABDAY_2), "Mon") == 0);
+	p(strcmp(nl_langinfo(ABDAY_3), "Tue") == 0);
+	p(strcmp(nl_langinfo(ABDAY_4), "Wed") == 0);
+	p(strcmp(nl_langinfo(ABDAY_5), "Thu") == 0);
+	p(strcmp(nl_langinfo(ABDAY_6), "Fri") == 0);
+	p(strcmp(nl_langinfo(ABDAY_7), "Sat") == 0);
+	p(strcmp(nl_langinfo(MON_1), "January") == 0);
+	p(strcmp(nl_langinfo(MON_2), "February") == 0);
+	p(strcmp(nl_langinfo(MON_3), "March") == 0);
+	p(strcmp(nl_langinfo(MON_4), "April") == 0);
+	p(strcmp(nl_langinfo(MON_5), "May") == 0);
+	p(strcmp(nl_langinfo(MON_6), "June") == 0);
+	p(strcmp(nl_langinfo(MON_7), "July") == 0);
+	p(strcmp(nl_langinfo(MON_8), "August") == 0);
+	p(strcmp(nl_langinfo(MON_9), "September") == 0);
+	p(strcmp(nl_langinfo(MON_10), "October") == 0);
+	p(strcmp(nl_langinfo(MON_11), "November") == 0);
+	p(strcmp(nl_langinfo(MON_12), "December") == 0);
+	p(strcmp(nl_langinfo(ABMON_1), "Jan") == 0);
+	p(strcmp(nl_langinfo(ABMON_2), "Feb") == 0);
+	p(strcmp(nl_langinfo(ABMON_3), "Mar") == 0);
+	p(strcmp(nl_langinfo(ABMON_4), "Apr") == 0);
+	p(strcmp(nl_langinfo(ABMON_5), "May") == 0);
+	p(strcmp(nl_langinfo(ABMON_6), "Jun") == 0);
+	p(strcmp(nl_langinfo(ABMON_7), "Jul") == 0);
+	p(strcmp(nl_langinfo(ABMON_8), "Aug") == 0);
+	p(strcmp(nl_langinfo(ABMON_9), "Sep") == 0);
+	p(strcmp(nl_langinfo(ABMON_10), "Oct") == 0);
+	p(strcmp(nl_langinfo(ABMON_11), "Nov") == 0);
+	p(strcmp(nl_langinfo(ABMON_12), "Dec") == 0);
+
+
+	for(i = 0; i < sizeof(enc) / sizeof(char *) ; i++) {
+		for(j = 0; j < sizeof(es) / sizeof(char *) ; j++) {
+			snprintf(nom, sizeof(nom), "%s.%s", es[j], enc[i]);
+			printf("nom=%s\n", nom);
+			nl = setlocale(LC_ALL, nom);
+			printf("locale: %s\n", nl);
+			timedebug();
+			printf("es[j]=%s\n", es[j]);
+
+			if (strcmp(es[j], "es_CL") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%d-%m-%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_CO") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%e/%m/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%I:%M:%S %p") == 0);
+			} else if (strcmp(es[j], "es_GT") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%e/%m/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_HN") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%d de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%d/%m/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_PA") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%m/%d/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_PE") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%e/%m/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_PR") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%m/%d/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			} else if (strcmp(es[j], "es_US") == 0) {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %I:%M:%S %p %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%m/%e/%y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%I:%M:%S %p") == 0);
+			} else {
+				p(strcmp(nl_langinfo(D_T_FMT), "%e de %B de %Y %H:%M:%S %Z") == 0);
+				p(strcmp(nl_langinfo(D_FMT), "%d/%m/%Y") == 0);
+				p(strcmp(nl_langinfo(T_FMT), "%H:%M:%S") == 0);
+			}
+			p(strcmp(nl_langinfo(T_FMT_AMPM), "%I:%M:%S %p") == 0);
+			p(strcmp(nl_langinfo(AM_STR), "a.m.") == 0);
+			p(strcmp(nl_langinfo(PM_STR), "p.m.") == 0);
+			p(strcmp(nl_langinfo(DAY_1), "domingo") == 0);
+			p(strcmp(nl_langinfo(DAY_2), "lunes") == 0);
+			p(strcmp(nl_langinfo(DAY_3), "martes") == 0);
+			p(strcmp(nl_langinfo(DAY_5), "jueves") == 0);
+			p(strcmp(nl_langinfo(DAY_6), "viernes") == 0);
+			p(strcmp(nl_langinfo(ABDAY_1), "dom") == 0);
+			p(strcmp(nl_langinfo(ABDAY_2), "lun") == 0);
+			p(strcmp(nl_langinfo(ABDAY_3), "mar") == 0);
+			p(strcmp(nl_langinfo(DAY_4), "miércoles") == 0);
+			p(strcmp(nl_langinfo(DAY_7), "sábado") == 0);
+			p(strcmp(nl_langinfo(ABDAY_4), "mié") == 0);
+			p(strcmp(nl_langinfo(ABDAY_7), "sáb") == 0);
+			p(strcmp(nl_langinfo(ABDAY_5), "jue") == 0);
+			p(strcmp(nl_langinfo(ABDAY_6), "vie") == 0);
+			p(strcmp(nl_langinfo(MON_1), "enero") == 0);
+			p(strcmp(nl_langinfo(MON_2), "febrero") == 0);
+			p(strcmp(nl_langinfo(MON_3), "marzo") == 0);
+			p(strcmp(nl_langinfo(MON_4), "abril") == 0);
+			p(strcmp(nl_langinfo(MON_5), "mayo") == 0);
+			p(strcmp(nl_langinfo(MON_6), "junio") == 0);
+			p(strcmp(nl_langinfo(MON_7), "julio") == 0);
+			p(strcmp(nl_langinfo(MON_8), "agosto") == 0);
+			p(strcmp(nl_langinfo(MON_9), "septiembre") == 0);
+			p(strcmp(nl_langinfo(MON_10), "octubre") == 0);
+			p(strcmp(nl_langinfo(MON_11), "noviembre") == 0);
+			p(strcmp(nl_langinfo(MON_12), "diciembre") == 0);
+			p(strcmp(nl_langinfo(ABMON_1), "ene") == 0);
+			p(strcmp(nl_langinfo(ABMON_2), "feb") == 0);
+			p(strcmp(nl_langinfo(ABMON_3), "mar") == 0);
+			p(strcmp(nl_langinfo(ABMON_4), "abr") == 0);
+			p(strcmp(nl_langinfo(ABMON_5), "may") == 0);
+			p(strcmp(nl_langinfo(ABMON_6), "jun") == 0);
+			p(strcmp(nl_langinfo(ABMON_7), "jul") == 0);
+			p(strcmp(nl_langinfo(ABMON_8), "ago") == 0);
+			p(strcmp(nl_langinfo(ABMON_9), "sep") == 0);
+			p(strcmp(nl_langinfo(ABMON_10), "oct") == 0);
+			p(strcmp(nl_langinfo(ABMON_11), "nov") == 0);
+			p(strcmp(nl_langinfo(ABMON_12), "dic") == 0);
+
+			strptime("dom", "%a", &tl);
+			p(tl.tm_wday == 0);
+			strptime("lun", "%a", &tl);
+			p(tl.tm_wday == 1);
+
+			ti = (time_t)1396950000; //Tue Apr  8 09:40:00 2014
+			gmtime_r(&ti, &tl) ;
+			strftime(col, sizeof(col), "%A", &tl);
+			p(strcmp(col, "martes") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%A", &tl);
+			p(wcscmp(wcol, L"martes") == 0);
+
+			strftime(col, sizeof(col), "%a", &tl);
+			p(strcmp(col, "mar") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%a", &tl);
+			p(wcscmp(wcol, L"mar") == 0);
+
+			strftime(col, sizeof(col), "%B", &tl);
+			p(strcmp(col, "abril") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%B", &tl);
+			p(wcscmp(wcol, L"abril") == 0);
+
+			strftime(col, sizeof(col), "%b", &tl);
+			p(strcmp(col, "abr") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%b", &tl);
+			p(wcscmp(wcol, L"abr") == 0);
+
+			strftime(col, sizeof(col), "%C", &tl);
+			p(strcmp(col, "20") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%C", &tl);
+			p(wcscmp(wcol, L"20") == 0);
+
+			if (strcmp(es[j], "es_CL") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, "08-04-2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"08-04-2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+
+			} else if (strcmp(es[j], "es_CO") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, " 8/04/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L" 8/04/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00 a.m.") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00 a.m.") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				//wprintf(L"w wcol=%ls\n", wcol);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+			} else if (strcmp(es[j], "es_GT") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, " 8/04/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L" 8/04/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				//wprintf(L"w wcol=%ls\n", wcol);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+			} else if (strcmp(es[j], "es_HN") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, "08 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L"08 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, "08/04/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"08/04/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				//wprintf(L"w wcol=%ls\n", wcol);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+			} else if (strcmp(es[j], "es_PA") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, "04/08/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"04/08/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+			} else if (strcmp(es[j], "es_PE") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, " 8/04/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L" 8/04/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+			} else if (strcmp(es[j], "es_PR") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, "04/08/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"04/08/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+
+			} else if (strcmp(es[j], "es_US") == 0) {
+				strftime(col, sizeof(col), "%c", &tl);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 a.m. GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 a.m. GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "04/ 8/14") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"04/ 8/14") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00 a.m.") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00 a.m.") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 GMT") == 0);
+			} else {
+				strftime(col, sizeof(col), "%c", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, " 8 de abril de 2014 09:40:00 GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%c", &tl);
+				p(wcscmp(wcol, L" 8 de abril de 2014 09:40:00 GMT") == 0);
+				strftime(col, sizeof(col), "%x", &tl);
+				p(strcmp(col, "08/04/2014") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%x", &tl);
+				p(wcscmp(wcol, L"08/04/2014") == 0);
+				strftime(col, sizeof(col), "%X", &tl);
+				p(strcmp(col, "09:40:00") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%X", &tl);
+				p(wcscmp(wcol, L"09:40:00") == 0);
+				strftime(col, sizeof(col), "%+", &tl);
+				printf("col=%s\n", col);
+				p(strcmp(col, "martes,  8 de abril de 2014, 09:40:00 a.m. GMT") == 0);
+				wcsftime(wcol, sizeof(wcol), L"%+", &tl);
+				printf("wcol=%ls\n", wcol);
+				p(wcscmp(wcol, L"martes,  8 de abril de 2014, 09:40:00 a.m. GMT") == 0);
+			}
+
+
+			strftime(col, sizeof(col), "%D", &tl);
+			p(strcmp(col, "04/08/14") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%D", &tl);
+			p(wcscmp(wcol, L"04/08/14") == 0);
+
+			strftime(col, sizeof(col), "%d", &tl);
+			p(strcmp(col, "08") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%d", &tl);
+			p(wcscmp(wcol, L"08") == 0);
+
+			strftime(col, sizeof(col), "%e", &tl);
+			p(strcmp(col, " 8") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%e", &tl);
+			p(wcscmp(wcol, L" 8") == 0);
+
+			strftime(col, sizeof(col), "%F", &tl);
+			p(strcmp(col, "2014-04-08") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%F", &tl);
+			p(wcscmp(wcol, L"2014-04-08") == 0);
+
+			strftime(col, sizeof(col), "%G", &tl);
+			p(strcmp(col, "2014") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%G", &tl);
+			p(wcscmp(wcol, L"2014") == 0);
+
+			strftime(col, sizeof(col), "%g", &tl);
+			p(strcmp(col, "14") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%g", &tl);
+			p(wcscmp(wcol, L"14") == 0);
+
+			strftime(col, sizeof(col), "%H", &tl);
+			p(strcmp(col, "09") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%H", &tl);
+			p(wcscmp(wcol, L"09") == 0);
+
+			strftime(col, sizeof(col), "%I", &tl);
+			p(strcmp(col, "09") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%I", &tl);
+			p(wcscmp(wcol, L"09") == 0);
+
+			strftime(col, sizeof(col), "%j", &tl);
+			p(strcmp(col, "098") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%j", &tl);
+			p(wcscmp(wcol, L"098") == 0);
+
+			strftime(col, sizeof(col), "%k", &tl);
+			p(strcmp(col, " 9") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%k", &tl);
+			p(wcscmp(wcol, L" 9") == 0);
+
+			strftime(col, sizeof(col), "%l", &tl);
+			p(strcmp(col, " 9") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%l", &tl);
+			p(wcscmp(wcol, L" 9") == 0);
+
+			strftime(col, sizeof(col), "%M", &tl);
+			p(strcmp(col, "40") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%M", &tl);
+			p(wcscmp(wcol, L"40") == 0);
+
+			strftime(col, sizeof(col), "%m", &tl);
+			p(strcmp(col, "04") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%m", &tl);
+			p(wcscmp(wcol, L"04") == 0);
+
+			strftime(col, sizeof(col), "%n", &tl);
+			p(strcmp(col, "\n") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%n", &tl);
+			p(wcscmp(wcol, L"\n") == 0);
+
+			strftime(col, sizeof(col), "%p", &tl);
+			p(strcmp(col, "a.m.") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%p", &tl);
+			p(wcscmp(wcol, L"a.m.") == 0);
+
+			strftime(col, sizeof(col), "%R", &tl);
+			p(strcmp(col, "09:40") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%R", &tl);
+			p(wcscmp(wcol, L"09:40") == 0);
+
+			strftime(col, sizeof(col), "%r", &tl);
+			p(strcmp(col, "09:40:00 a.m.") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%r", &tl);
+			p(wcscmp(wcol, L"09:40:00 a.m.") == 0);
+
+			strftime(col, sizeof(col), "%S", &tl);
+			p(strcmp(col, "00") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%S", &tl);
+			p(wcscmp(wcol, L"00") == 0);
+
+			strftime(col, sizeof(col), "%s", &tl);
+			ts = atol(col);
+			printf("%li\n", ts);
+			// Checking from any timezone from GMT-12 to GMT+12
+			p(1396950000-43200 <= ts && ts <=1396950000+43200);
+			wcsftime(wcol, sizeof(wcol), L"%s", &tl);
+			ts = wcstol(wcol, NULL, 10);
+			printf("%li\n", ts);
+			p(1396950000-43200 <= ts && ts <=1396950000+43200);
+
+			strftime(col, sizeof(col), "%T", &tl);
+			p(strcmp(col, "09:40:00") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%T", &tl);
+			p(wcscmp(wcol, L"09:40:00") == 0);
+
+			strftime(col, sizeof(col), "%t", &tl);
+			p(strcmp(col, "\t") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%t", &tl);
+			p(wcscmp(wcol, L"\t") == 0);
+
+			strftime(col, sizeof(col), "%U", &tl);
+			p(strcmp(col, "14") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%U", &tl);
+			p(wcscmp(wcol, L"14") == 0);
+
+			strftime(col, sizeof(col), "%u", &tl);
+			p(strcmp(col, "2") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%u", &tl);
+			p(wcscmp(wcol, L"2") == 0);
+
+			strftime(col, sizeof(col), "%V", &tl);
+			p(strcmp(col, "15") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%V", &tl);
+			p(wcscmp(wcol, L"15") == 0);
+
+			strftime(col, sizeof(col), "%v", &tl);
+			p(strcmp(col, " 8-abr-2014") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%v", &tl);
+			p(wcscmp(wcol, L" 8-abr-2014") == 0);
+
+			strftime(col, sizeof(col), "%w", &tl);
+			p(strcmp(col, "2") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%w", &tl);
+			p(wcscmp(wcol, L"2") == 0);
+
+			strftime(col, sizeof(col), "%W", &tl);
+			p(strcmp(col, "14") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%W", &tl);
+			p(wcscmp(wcol, L"14") == 0);
+
+			strftime(col, sizeof(col), "%Y", &tl);
+			p(strcmp(col, "2014") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%Y", &tl);
+			p(wcscmp(wcol, L"2014") == 0);
+
+			strftime(col, sizeof(col), "%y", &tl);
+			p(strcmp(col, "14") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%y", &tl);
+			p(wcscmp(wcol, L"14") == 0);
+
+			strftime(col, sizeof(col), "%Z", &tl);
+			p(strcmp(col, "GMT") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%Z", &tl);
+			p(wcscmp(wcol, L"GMT") == 0);
+
+			ptl = localtime(&ti);
+
+			strftime(col, sizeof(col), "%Z", ptl);
+			p(strcmp(col, "-05") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%Z", ptl);
+			p(wcscmp(wcol, L"-05") == 0);
+
+			strftime(col, sizeof(col), "%z", &tl);
+			p(strcmp(col, "+0000") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%z", &tl);
+			p(wcscmp(wcol, L"+0000") == 0);
+
+			strftime(col, sizeof(col), "%%", &tl);
+			p(strcmp(col, "%") == 0);
+			wcsftime(wcol, sizeof(wcol), L"%%", &tl);
+			p(wcscmp(wcol, L"%") == 0);
+
+		}
+	}
+}
+
+
+int main()
+{
+	test_ltime_switch();
+	
+	return bad != 0;
+}
+
