diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-orig/sys/sys/localedef.h src/sys/sys/localedef.h
--- src56-orig/lib/libc/include/localedef.h	Fri Sep 19 13:09:44 2014
+++ src/lib/libc/include/localedef.h	Thu Oct  2 20:15:19 2014
@@ -99,6 +99,7 @@
 	const char *d_fmt;
 	const char *t_fmt;
 	const char *t_fmt_ampm;
+	const char *date_fmt;
 } _TimeLocale;
 
 extern const _TimeLocale *_CurrentTimeLocale;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-orig/lib/libc/locale/_def_time.c src/lib/libc/locale/_def_time.c
--- src56-orig/lib/libc/locale/_def_time.c	Sun Oct  9 01:39:53 2011
+++ src/lib/libc/locale/_def_time.c	Thu Oct  2 20:19:54 2014
@@ -30,7 +30,8 @@
 	"%a %b %e %H:%M:%S %Y",
 	"%m/%d/%y",
 	"%H:%M:%S",
-	"%I:%M:%S %p"
+	"%I:%M:%S %p",
+	"%a %b %e %H:%M:%S %Z %Y"
 };
 
 const _TimeLocale *_CurrentTimeLocale = &_DefaultTimeLocale;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src66-orig/lib/libc/time/strftime.c src/lib/libc/time/strftime.c
--- src66-orig/lib/libc/time/strftime.c	Sun Dec 29 09:54:47 2019
+++ src/lib/libc/time/strftime.c	Sat Feb  1 05:13:14 2020
@@ -31,69 +31,10 @@
 #include <fcntl.h>
 #include <stdio.h>
 
+#include "localedef.h"
 #include "private.h"
 #include "tzfile.h"
 
-struct lc_time_T {
-	const char *	mon[MONSPERYEAR];
-	const char *	month[MONSPERYEAR];
-	const char *	wday[DAYSPERWEEK];
-	const char *	weekday[DAYSPERWEEK];
-	const char *	X_fmt;
-	const char *	x_fmt;
-	const char *	c_fmt;
-	const char *	am;
-	const char *	pm;
-	const char *	date_fmt;
-};
-
-#define Locale	(&C_time_locale)
-static const struct lc_time_T	C_time_locale = {
-	{
-		"Jan", "Feb", "Mar", "Apr", "May", "Jun",
-		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
-	}, {
-		"January", "February", "March", "April", "May", "June",
-		"July", "August", "September", "October", "November", "December"
-	}, {
-		"Sun", "Mon", "Tue", "Wed",
-		"Thu", "Fri", "Sat"
-	}, {
-		"Sunday", "Monday", "Tuesday", "Wednesday",
-		"Thursday", "Friday", "Saturday"
-	},
-
-	/* X_fmt */
-	"%H:%M:%S",
-
-	/*
-	** x_fmt
-	** C99 requires this format.
-	** Using just numbers (as here) makes Quakers happier;
-	** it's also compatible with SVR4.
-	*/
-	"%m/%d/%y",
-
-	/*
-	** c_fmt
-	** C99 requires this format.
-	** Previously this code used "%D %X", but we now conform to C99.
-	** Note that
-	**	"%a %b %d %H:%M:%S %Y"
-	** is used by Solaris 2.3.
-	*/
-	"%a %b %e %T %Y",
-
-	/* am */
-	"AM",
-
-	/* pm */
-	"PM",
-
-	/* date_fmt */
-	"%a %b %e %H:%M:%S %Z %Y"
-};
-
 static char *	_add(const char *, char *, const char *);
 static char *	_conv(int, const char *, char *, const char *);
 static char *	_fmt(const char *, const struct tm *, char *, const char *,
@@ -139,26 +80,26 @@
 			case 'A':
 				pt = _add((t->tm_wday < 0 ||
 					t->tm_wday >= DAYSPERWEEK) ?
-					"?" : Locale->weekday[t->tm_wday],
+					"?" : _CurrentTimeLocale->day[t->tm_wday],
 					pt, ptlim);
 				continue;
 			case 'a':
 				pt = _add((t->tm_wday < 0 ||
 					t->tm_wday >= DAYSPERWEEK) ?
-					"?" : Locale->wday[t->tm_wday],
+					"?" : _CurrentTimeLocale->abday[t->tm_wday],
 					pt, ptlim);
 				continue;
 			case 'B':
 				pt = _add((t->tm_mon < 0 ||
 					t->tm_mon >= MONSPERYEAR) ?
-					"?" : Locale->month[t->tm_mon],
+					"?" : _CurrentTimeLocale->mon[t->tm_mon],
 					pt, ptlim);
 				continue;
 			case 'b':
 			case 'h':
 				pt = _add((t->tm_mon < 0 ||
 					t->tm_mon >= MONSPERYEAR) ?
-					"?" : Locale->mon[t->tm_mon],
+					"?" : _CurrentTimeLocale->abmon[t->tm_mon],
 					pt, ptlim);
 				continue;
 			case 'C':
@@ -176,7 +117,7 @@
 				{
 				int warn2 = IN_SOME;
 
-				pt = _fmt(Locale->c_fmt, t, pt, ptlim, &warn2);
+				pt = _fmt(_CurrentTimeLocale->d_t_fmt, t, pt, ptlim, &warn2);
 				if (warn2 == IN_ALL)
 					warn2 = IN_THIS;
 				if (warn2 > *warnp)
@@ -264,15 +205,15 @@
 				continue;
 			case 'p':
 				pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
-					Locale->pm :
-					Locale->am,
+					_CurrentTimeLocale->am_pm[1] :
+					_CurrentTimeLocale->am_pm[0],
 					pt, ptlim);
 				continue;
 			case 'R':
 				pt = _fmt("%H:%M", t, pt, ptlim, warnp);
 				continue;
 			case 'r':
-				pt = _fmt("%I:%M:%S %p", t, pt, ptlim, warnp);
+				pt = _fmt(_CurrentTimeLocale->t_fmt_ampm, t, pt, ptlim, warnp);
 				continue;
 			case 'S':
 				pt = _conv(t->tm_sec, "%02d", pt, ptlim);
@@ -420,13 +361,13 @@
 				pt = _conv(t->tm_wday, "%d", pt, ptlim);
 				continue;
 			case 'X':
-				pt = _fmt(Locale->X_fmt, t, pt, ptlim, warnp);
+				pt = _fmt(_CurrentTimeLocale->t_fmt, t, pt, ptlim, warnp);
 				continue;
 			case 'x':
 				{
 				int	warn2 = IN_SOME;
 
-				pt = _fmt(Locale->x_fmt, t, pt, ptlim, &warn2);
+				pt = _fmt(_CurrentTimeLocale->d_fmt, t, pt, ptlim, &warn2);
 				if (warn2 == IN_ALL)
 					warn2 = IN_THIS;
 				if (warn2 > *warnp)
@@ -474,7 +415,7 @@
 				}
 				continue;
 			case '+':
-				pt = _fmt(Locale->date_fmt, t, pt, ptlim,
+				pt = _fmt(_CurrentTimeLocale->date_fmt, t, pt, ptlim,
 					warnp);
 				continue;
 			case '%':
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-orig/lib/libc/time/wcsftime.c src/lib/libc/time/wcsftime.c
--- src56-orig/lib/libc/time/wcsftime.c	Sun Jan 20 15:29:02 2013
+++ src/lib/libc/time/wcsftime.c	Sun Apr 27 17:43:58 2014
@@ -31,75 +31,16 @@
 ** SUCH DAMAGE.
 */
 
+#include <errno.h>
 #include <fcntl.h>
 #include <locale.h>
+#include <stdlib.h>
 #include <wchar.h>
 
+#include "localedef.h"
 #include "private.h"
 #include "tzfile.h"
 
-struct lc_time_T {
-	const wchar_t *	mon[MONSPERYEAR];
-	const wchar_t *	month[MONSPERYEAR];
-	const wchar_t *	wday[DAYSPERWEEK];
-	const wchar_t *	weekday[DAYSPERWEEK];
-	const wchar_t *	X_fmt;
-	const wchar_t *	x_fmt;
-	const wchar_t *	c_fmt;
-	const wchar_t *	am;
-	const wchar_t *	pm;
-	const wchar_t *	date_fmt;
-};
-
-#define Locale	(&C_time_locale)
-
-static const struct lc_time_T	C_time_locale = {
-	{
-		L"Jan", L"Feb", L"Mar", L"Apr", L"May", L"Jun",
-		L"Jul", L"Aug", L"Sep", L"Oct", L"Nov", L"Dec"
-	}, {
-		L"January", L"February", L"March", L"April", L"May", L"June",
-		L"July", L"August", L"September", L"October", L"November", 
-		L"December"
-	}, {
-		L"Sun", L"Mon", L"Tue", L"Wed",
-		L"Thu", L"Fri", L"Sat"
-	}, {
-		L"Sunday", L"Monday", L"Tuesday", L"Wednesday",
-		L"Thursday", L"Friday", L"Saturday"
-	},
-
-	/* X_fmt */
-	L"%H:%M:%S",
-
-	/*
-	** x_fmt
-	** C99 requires this format.
-	** Using just numbers (as here) makes Quakers happier;
-	** it's also compatible with SVR4.
-	*/
-	L"%m/%d/%y",
-
-	/*
-	** c_fmt
-	** C99 requires this format.
-	** Previously this code used "%D %X", but we now conform to C99.
-	** Note that
-	**	"%a %b %d %H:%M:%S %Y"
-	** is used by Solaris 2.3.
-	*/
-	L"%a %b %e %T %Y",
-
-	/* am */
-	L"AM",
-
-	/* pm */
-	L"PM",
-
-	/* date_fmt */
-	L"%a %b %e %H:%M:%S %Z %Y"
-};
-
 #define UNKNOWN L"?"
 static wchar_t *	_add(const wchar_t *, wchar_t *, const wchar_t *);
 static wchar_t *	_sadd(const char *, wchar_t *, const wchar_t *);
@@ -134,10 +75,29 @@
 	return p - s;
 }
 
+wchar_t *
+_towcs(wchar_t *bL, size_t bLsize, const char *s)
+{
+	size_t numc = mbstowcs(NULL, s, 0) + 1; 
+	if (numc <= 0 || numc >= bLsize) { 
+		(void) fprintf(stderr, "Cannot translate %s to wchar_t *\n", s);
+		errno = EINVAL;
+		return NULL;
+	}
+	mbstowcs(bL, s, numc);
+	return bL;
+}
+
+
 static wchar_t *
 _fmt(const wchar_t *format, const struct tm *t, wchar_t *pt, 
     const wchar_t *ptlim, int *warnp)
 {
+	// In the moment of this writing the biggest LC_TIME file
+        // is 479 bytes, the next buffer should be enough to store
+        // any string in them.
+        wchar_t bL[1024];
+
 	for ( ; *format; ++format) {
 		if (*format != L'%') {
 			if (pt == ptlim)
@@ -153,26 +113,26 @@
 		case 'A':
 			pt = _add((t->tm_wday < 0 ||
 				t->tm_wday >= DAYSPERWEEK) ?
-				UNKNOWN : Locale->weekday[t->tm_wday],
+				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->day[t->tm_wday]),
 				pt, ptlim);
 			continue;
 		case 'a':
 			pt = _add((t->tm_wday < 0 ||
 				t->tm_wday >= DAYSPERWEEK) ?
-				UNKNOWN : Locale->wday[t->tm_wday],
+				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->abday[t->tm_wday]),
 				pt, ptlim);
 			continue;
 		case 'B':
 			pt = _add((t->tm_mon < 0 ||
 				t->tm_mon >= MONSPERYEAR) ?
-				UNKNOWN : Locale->month[t->tm_mon],
+				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->mon[t->tm_mon]),
 				pt, ptlim);
 			continue;
 		case 'b':
 		case 'h':
 			pt = _add((t->tm_mon < 0 ||
 				t->tm_mon >= MONSPERYEAR) ?
-				UNKNOWN : Locale->mon[t->tm_mon],
+				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->abmon[t->tm_mon]),
 				pt, ptlim);
 			continue;
 		case 'C':
@@ -190,7 +150,7 @@
 			{
 			int warn2 = IN_SOME;
 
-			pt = _fmt(Locale->c_fmt, t, pt, ptlim, &warn2);
+			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->d_t_fmt), t, pt, ptlim, &warn2);
 			if (warn2 == IN_ALL)
 				warn2 = IN_THIS;
 			if (warn2 > *warnp)
@@ -270,8 +230,8 @@
 			continue;
 		case 'p':
 			pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
-				Locale->pm :
-				Locale->am,
+				_towcs(bL, sizeof(bL), _CurrentTimeLocale->am_pm[1]) :
+				_towcs(bL, sizeof(bL), _CurrentTimeLocale->am_pm[0]),
 				pt, ptlim);
 			continue;
 		case 'R':
@@ -417,13 +377,13 @@
 			pt = _conv(t->tm_wday, L"%d", pt, ptlim);
 			continue;
 		case 'X':
-			pt = _fmt(Locale->X_fmt, t, pt, ptlim, warnp);
+			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->t_fmt), t, pt, ptlim, warnp);
 			continue;
 		case 'x':
 			{
 			int	warn2 = IN_SOME;
 
-			pt = _fmt(Locale->x_fmt, t, pt, ptlim, &warn2);
+			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->d_fmt), t, pt, ptlim, &warn2);
 			if (warn2 == IN_ALL)
 				warn2 = IN_THIS;
 			if (warn2 > *warnp)
@@ -471,7 +431,7 @@
 			}
 			continue;
 		case '+':
-			pt = _fmt(Locale->date_fmt, t, pt, ptlim, warnp);
+			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->date_fmt), t, pt, ptlim, warnp);
 			continue;
 		case '%':
 		/*
@@ -547,4 +507,3 @@
 		pt = _conv(((trail < 0) ? -trail : trail), L"%02d", pt, ptlim);
 	return pt;
 }
-
diff -ruN src59-orig/lib/libc/hidden/stdlib.h src/lib/libc/hidden/stdlib.h
--- src59-orig/lib/libc/hidden/stdlib.h	Mon Nov  9 23:14:03 2015
+++ src/lib/libc/hidden/stdlib.h	Sun May  8 23:13:15 2016
@@ -101,7 +101,7 @@
 PROTO_DEPRECATED(lrand48);
 /*PROTO_NORMAL(malloc);			not yet, breaks emacs */
 PROTO_STD_DEPRECATED(mblen);
-PROTO_STD_DEPRECATED(mbstowcs);
+PROTO_NORMAL(mbstowcs);	
 PROTO_STD_DEPRECATED(mbtowc);
 PROTO_DEPRECATED(mergesort);
 PROTO_DEPRECATED(mkdtemp);
@@ -155,7 +155,7 @@
 PROTO_DEPRECATED(unlockpt);
 PROTO_NORMAL(unsetenv);
 PROTO_STD_DEPRECATED(valloc);
-PROTO_STD_DEPRECATED(wcstombs);
-PROTO_STD_DEPRECATED(wctomb);
+PROTO_NORMAL(wcstombs);
+PROTO_NORMAL(wctomb);
 
 #endif /* _LIBC_STDLIB_H_ */
diff -ruN src59-orig/lib/libc/locale/mbstowcs.c src/lib/libc/locale/mbstowcs.c
--- src59-orig/lib/libc/locale/mbstowcs.c	Thu Jun  9 23:21:43 2016
+++ src/lib/libc/locale/mbstowcs.c	Thu Aug 18 22:05:13 2016
@@ -42,3 +42,4 @@
 	sp = s;
 	return (mbsrtowcs(pwcs, &sp, n, &mbs));
 }
+DEF_STRONG(mbstowcs);
diff -ruN src59-orig/lib/libc/locale/wcstombs.c src/lib/libc/locale/wcstombs.c
--- src59-orig/lib/libc/locale/wcstombs.c	Thu Jun  9 23:21:43 2016
+++ src/lib/libc/locale/wcstombs.c	Thu Aug 18 22:06:14 2016
@@ -41,3 +41,4 @@
 	pwcsp = pwcs;
 	return (wcsrtombs(s, &pwcsp, n, &mbs));
 }
+DEF_STRONG(wcstombs);
diff -ruN src59-orig/lib/libc/locale/wctomb.c src/lib/libc/locale/wctomb.c
--- src59-orig/lib/libc/locale/wctomb.c	Thu Jun  9 23:21:43 2016
+++ src/lib/libc/locale/wctomb.c	Thu Aug 18 22:06:18 2016
@@ -45,3 +45,6 @@
 		return (-1);
 	return ((int)rval);
 }
+
+DEF_STRONG(wctomb);
+
