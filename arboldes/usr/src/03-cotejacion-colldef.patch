diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/Makefile src/usr.bin/Makefile
--- src54-s/usr.bin/Makefile	Sat Oct 12 13:03:17 2013
+++ src/usr.bin/Makefile	Sat Oct 12 13:23:41 2013
@@ -4,7 +4,7 @@
 
 SUBDIR= apply arch at aucat audioctl awk banner \
 	basename bc bgplg \
-	biff cal calendar cap_mkdb cdio chpass cmp col colrm \
+	biff cal calendar cap_mkdb cdio chpass cmp col colldef colrm \
 	column comm compress cpp crontab csplit ctags ctfconv ctfdump \
 	cu cut cvs \
 	dc deroff diff diff3 dirname doas du encrypt env expand false file \
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/Makefile src/usr.bin/colldef/Makefile
--- src54-s/usr.bin/colldef/Makefile	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/Makefile	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,14 @@
+# From FreeBSD
+
+
+PROG=	colldef
+SRCS=	parse.y scan.l 
+LFLAGS=	-8 -i -d
+CFLAGS+=-I. -I${.CURDIR} -I${.CURDIR}/../../lib/libc/locale -I${.CURDIR}/../../lib/libc/include
+CFLAGS+=-DCOLLATE_DEBUG -DYY_NO_UNPUT -DYY_NO_INPUT
+LDADD=	-ll
+DPADD=	${LIBL}
+
+WARNS?=	2
+
+.include <bsd.prog.mk>
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/colldef.1 src/usr.bin/colldef/colldef.1
--- src54-s/usr.bin/colldef/colldef.1	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/colldef.1	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,288 @@
+.\" Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+.\"		at Electronni Visti IA, Kiev, Ukraine.
+.\"			All rights reserved.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\" $FreeBSD$
+.\"
+.Dd March 23, 2013
+.Dt COLLDEF 1
+.Os
+.Sh NAME
+.Nm colldef
+.Nd convert collation sequence source definition
+.Sh SYNOPSIS
+.Nm
+.Op Fl I Ar map_dir
+.Op Fl o Ar out_file
+.Op Ar filename
+.Sh DESCRIPTION
+The
+.Nm
+utility converts a collation sequence source definition
+into a format usable by the
+.Fn strxfrm ,
+.Fn strcoll ,
+.Fn wcscoll
+and
+.Fn wcsxfrm
+functions.
+It is used to define the many ways in which
+strings can be ordered and collated.
+The
+.Fn strxfrm
+and
+.Fn wcsxfrm
+functions transform
+their second argument and place the result in its first
+argument.
+The transformed string is such that it can be
+correctly ordered with other transformed strings by using
+.Fn strcmp
+and
+.Fn wcscmp
+respectevily
+(as well as other function with similar purpose like
+.Fn strncmp ,
+.Fn wcsncmp
+or
+.Fn memcmp )
+The
+.Fn strcoll
+and
+.Fn wcscoll
+functions transform their arguments and do a comparison.
+.Pp
+The
+.Nm
+utility reads the collation sequence source definition
+from the standard input and stores the converted definition in filename.
+The output file produced contains the
+database with collating sequence information in a form
+usable by system commands and routines.
+.Pp
+The following options are available:
+.Bl -tag -width indent
+.It Fl I Ar map_dir
+Set directory name where
+.Ar charmap
+files can be found, current directory by default.
+.It Fl o Ar out_file
+Set output file name,
+.Ar LC_COLLATE
+by default.
+.El
+.Pp
+The collation sequence definition specifies a set of collating elements and
+the rules defining how strings containing these should be ordered.
+This is most useful for different language definitions.
+.Pp
+The specification file can consist of three statements:
+.Ar charmap ,
+.Ar substitute
+and
+.Ar order .
+.Pp
+Of these, only the
+.Ar order
+statement is required.
+When
+.Ar charmap
+or
+.Ar substitute
+is
+supplied, these statements must be ordered as above.
+Any
+statements after the order statement are ignored.
+.Pp
+Lines in the specification file beginning with a
+.Ql #
+are
+treated as comments and are ignored.
+Blank lines are also
+ignored.
+.Pp
+.Dl "charmap charmapfile"
+.Pp
+.Ar Charmap
+defines where a mapping of the character
+and collating element symbols to the actual
+character encoding can be found.
+.Pp
+The format of
+.Ar charmapfile
+is shown below.
+Symbol
+names are separated from their values by TAB or
+SPACE characters.
+Symbol-value can be specified in
+a hexadecimal (\ex\fI??\fR) or octal (\e\fI???\fR)
+representation, and can be only one character in length.
+.Bd -literal -offset indent
+symbol-name1 symbol-value1
+symbol-name2 symbol-value2
+\&...
+.Ed
+.Pp
+Symbol names cannot be specified in
+.Ar substitute
+fields.
+.Pp
+The
+.Ar charmap
+statement is optional.
+.Bd -literal -offset indent
+substitute "symbol" with "repl_string"
+.Ed
+.Pp
+The
+.Ar substitute
+statement substitutes the character
+.Ar symbol
+with the string
+.Ar repl_string .
+Symbol names cannot be specified in
+.Ar repl_string
+field.
+The
+.Ar substitute
+statement is optional.
+.Pp
+.Dl "order order_list"
+.Pp
+.Ar Order_list
+is a list of symbols, separated by semi colons, that defines the
+collating sequence.
+The
+special symbol
+.Ar ...
+specifies, in a short-hand
+form, symbols that are sequential in machine code
+order.
+.Pp
+An order list element
+can be represented in any one of the following
+ways:
+.Bl -bullet
+.It
+The symbol itself (for example,
+.Ar a
+for the lower-case letter
+.Ar a ) .
+.It
+The symbol in octal representation (for example,
+.Ar \e141
+for the letter
+.Ar a ) .
+.It
+The symbol in hexadecimal representation (for example,
+.Ar \ex61
+for the letter
+.Ar a ) .
+.It
+The symbol name as defined in the
+.Ar charmap
+file (for example,
+.Ar <letterA>
+for
+.Ar letterA \e023
+record in
+.Ar charmapfile ) .
+If character map name have
+.Ar >
+character, it must be escaped as
+.Ar /> ,
+single
+.Ar /
+must be escaped as
+.Ar // .
+.It
+Symbols
+.Ar \ea ,
+.Ar \eb ,
+.Ar \ef ,
+.Ar \en ,
+.Ar \er ,
+.Ar \ev
+are permitted in its usual C-language meaning.
+.It
+The symbol chain (for example:
+.Ar abc ,
+.Ar <letterA><letterB>c ,
+.Ar \exf1b\exf2 )
+.It
+The symbol range (for example,
+.Ar a;...;z ) .
+.It
+Comma-separated symbols, ranges and chains enclosed in parenthesis (for example
+.Ar \&(
+.Ar sym1 ,
+.Ar sym2 ,
+.Ar ...
+.Ar \&) )
+are assigned the
+same primary ordering but different secondary
+ordering.
+.It
+Comma-separated symbols, ranges and chains enclosed in curly brackets (for example
+.Ar \&{
+.Ar sym1 ,
+.Ar sym2 ,
+.Ar ...
+.Ar \&} )
+are assigned the same primary ordering only.
+.El
+.Pp
+The backslash character
+.Ar \e
+is used for continuation.
+In this case, no characters are permitted
+after the backslash character.
+.Sh FILES
+.Bl -tag -width indent
+.It Pa /usr/share/locale/ Ns Ao Ar language Ac Ns Pa /LC_COLLATE
+The standard shared location for collation orders
+under the locale
+.Aq Ar language .
+.El
+.Sh EXIT STATUS
+The
+.Nm
+utility exits with the following values:
+.Bl -tag -width indent
+.It Li 0
+No errors were found and the output was successfully created.
+.It Li !=0
+Errors were found.
+.El
+.Sh SEE ALSO
+.Xr mklocale 1 ,
+.Xr setlocale 3 ,
+.Xr strcoll 3 ,
+.Xr wcscoll 3 ,
+.Xr strxfrm 3 ,
+.Xr wcsxfrm 3
+.Sh HISTORY
+The
+.Nm
+utility first appeared in FreeBSD 2.0.5
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/common.h src/usr.bin/colldef/common.h
--- src54-s/usr.bin/colldef/common.h	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/common.h	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,11 @@
+/*
+ * $FreeBSD$
+ */
+
+#define CHARMAP_SYMBOL_LEN 64
+#define BUFSIZE 80
+
+extern int line_no;
+
+extern u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+extern char map_name[FILENAME_MAX];
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/parse.c src/usr.bin/colldef/parse.c
--- src54-s/usr.bin/colldef/parse.c	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/parse.c	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,937 @@
+#include <stdlib.h>
+#include <string.h>
+#define YYBYACC 1
+#define YYMAJOR 1
+#define YYMINOR 9
+#define YYLEX yylex()
+#define YYEMPTY -1
+#define yyclearin (yychar=(YYEMPTY))
+#define yyerrok (yyerrflag=0)
+#define YYRECOVERING() (yyerrflag!=0)
+#define YYPREFIX "yy"
+#line 2 "parse.y"
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <sysexits.h>
+#include <syslog.h>
+#include "collate.h"
+#include "common.h"
+
+extern FILE *yyin;
+void yyerror(const char *, ...);
+int yyparse(void);
+int yylex(void);
+static void usage(void);
+static void collate_print_tables(void);
+
+char map_name[FILENAME_MAX] = ".";
+char curr_chain[COLLATE_MAX_STR_LEN];
+
+char __collate_version[COLLATE_MAX_STR_LEN];
+u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+
+#undef __collate_substitute_table
+u_char __collate_substitute_table[UCHAR_MAX + 1][COLLATE_MAX_STR_LEN];
+#undef __collate_char_pri_table
+struct __collate_st_char_pri __collate_char_pri_table[UCHAR_MAX + 1];
+struct __collate_st_chain_pri *__collate_chain_pri_table;
+struct __collate_st_chain_pri *nc = NULL;
+
+int chain_index = 0;
+int prim_pri = 1, sec_pri = 1;
+#ifdef COLLATE_DEBUG
+int debug;
+#endif
+
+const char *out_file = "LC_COLLATE";
+#line 71 "parse.y"
+#ifndef YYSTYPE_DEFINED
+#define YYSTYPE_DEFINED
+typedef union {
+	u_char ch;
+	u_char str[BUFSIZE];
+} YYSTYPE;
+#endif /* YYSTYPE_DEFINED */
+#line 90 "y.tab.c"
+#define SUBSTITUTE 257
+#define WITH 258
+#define ORDER 259
+#define RANGE 260
+#define STRING 261
+#define DEFN 262
+#define CHAR 263
+#define YYERRCODE 256
+#if defined(__cplusplus) || defined(__STDC__)
+const short yylhs[] =
+#else
+short yylhs[] =
+#endif
+	{                                        -1,
+    0,    1,    1,    2,    2,    2,    2,    3,    4,    5,
+    6,    6,    8,    8,    7,    7,    7,    7,    7,    9,
+    9,   10,   10,   11,   11,   11,   12,   12,   12,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yylen[] =
+#else
+short yylen[] =
+#endif
+	{                                         2,
+    1,    1,    3,    0,    1,    1,    1,    2,    4,    2,
+    1,    3,    2,    2,    1,    1,    3,    3,    3,    1,
+    3,    1,    3,    1,    3,    1,    1,    3,    1,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yydefred[] =
+#else
+short yydefred[] =
+#endif
+	{                                      0,
+    0,    0,    0,    0,    0,    2,    5,    6,    7,    0,
+    0,    0,    0,    0,   11,    0,    8,    0,    0,    0,
+   13,    0,    0,    0,   20,    0,    0,    0,   22,    0,
+   14,    3,    9,   17,    0,   18,    0,    0,   19,    0,
+   12,   25,   21,   28,   23,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yydgoto[] =
+#else
+short yydgoto[] =
+#endif
+	{                                       4,
+    5,    6,    7,    8,    9,   14,   15,   16,   24,   28,
+   25,   29,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yysindex[] =
+#else
+short yysindex[] =
+#endif
+	{                                   -246,
+ -253,  -40, -248,    0,   18,    0,    0,    0,    0, -225,
+ -243, -228, -227,  -22,    0, -224,    0, -246, -223, -222,
+    0, -239, -224,  -43,    0, -238, -224,  -18,    0,  -40,
+    0,    0,    0,    0, -221,    0, -228, -220,    0, -227,
+    0,    0,    0,    0,    0,};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yyrindex[] =
+#else
+short yyrindex[] =
+#endif
+	{                                      8,
+    0,    0,    0,    0,   40,    0,    0,    0,    0,    0,
+    2,    0,    0,    9,    0,    4,    0,    8,    0,    0,
+    0,  -41,  -39,    0,    0,  -14,  -12,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yygindex[] =
+#else
+short yygindex[] =
+#endif
+	{                                      0,
+    0,   26,    0,    0,    0,    0,   15,   -6,    0,    0,
+   10,    6,
+};
+#define YYTABLESIZE 223
+#if defined(__cplusplus) || defined(__STDC__)
+const short yytable[] =
+#else
+short yytable[] =
+#endif
+	{                                      13,
+   37,   15,   24,   16,   26,   23,   27,    4,   10,   10,
+    1,   15,    2,   16,   17,    3,   20,    4,   10,   21,
+   35,   38,   39,   21,   21,   40,   27,   18,   29,   27,
+   23,   29,   19,   27,   22,   26,   30,   33,   31,    1,
+   34,   42,   44,   32,   41,   45,   43,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+   15,    0,   16,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,   36,   12,   24,    0,   26,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,   11,
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const short yycheck[] =
+#else
+short yycheck[] =
+#endif
+	{                                      40,
+   44,    0,   44,    0,   44,   12,   13,    0,    0,  263,
+  257,   10,  259,   10,  263,  262,  260,   10,   10,  263,
+  260,  260,   41,  263,  263,   44,   41,   10,   41,   44,
+   37,   44,  258,   40,  263,  263,   59,  261,  263,    0,
+  263,  263,  263,   18,   30,   40,   37,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   59,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,  125,  123,  125,   -1,  125,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+   -1,   -1,  263,
+};
+#define YYFINAL 4
+#ifndef YYDEBUG
+#define YYDEBUG 0
+#endif
+#define YYMAXTOKEN 263
+#if YYDEBUG
+#if defined(__cplusplus) || defined(__STDC__)
+const char * const yyname[] =
+#else
+char *yyname[] =
+#endif
+	{
+"end-of-file",0,0,0,0,0,0,0,0,0,"'\\n'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,"'('","')'",0,0,"','",0,0,0,0,0,0,0,0,0,0,0,0,0,0,"';'",0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+"SUBSTITUTE","WITH","ORDER","RANGE","STRING","DEFN","CHAR",
+};
+#if defined(__cplusplus) || defined(__STDC__)
+const char * const yyrule[] =
+#else
+char *yyrule[] =
+#endif
+	{"$accept : collate",
+"collate : statment_list",
+"statment_list : statment",
+"statment_list : statment_list '\\n' statment",
+"statment :",
+"statment : charmap",
+"statment : substitute",
+"statment : order",
+"charmap : DEFN CHAR",
+"substitute : SUBSTITUTE CHAR WITH STRING",
+"order : ORDER order_list",
+"order_list : item",
+"order_list : order_list ';' item",
+"chain : CHAR CHAR",
+"chain : chain CHAR",
+"item : CHAR",
+"item : chain",
+"item : CHAR RANGE CHAR",
+"item : '{' prim_order_list '}'",
+"item : '(' sec_order_list ')'",
+"prim_order_list : prim_sub_item",
+"prim_order_list : prim_order_list ',' prim_sub_item",
+"sec_order_list : sec_sub_item",
+"sec_order_list : sec_order_list ',' sec_sub_item",
+"prim_sub_item : CHAR",
+"prim_sub_item : CHAR RANGE CHAR",
+"prim_sub_item : chain",
+"sec_sub_item : CHAR",
+"sec_sub_item : CHAR RANGE CHAR",
+"sec_sub_item : chain",
+};
+#endif
+#ifdef YYSTACKSIZE
+#undef YYMAXDEPTH
+#define YYMAXDEPTH YYSTACKSIZE
+#else
+#ifdef YYMAXDEPTH
+#define YYSTACKSIZE YYMAXDEPTH
+#else
+#define YYSTACKSIZE 10000
+#define YYMAXDEPTH 10000
+#endif
+#endif
+#define YYINITSTACKSIZE 200
+/* LINTUSED */
+int yydebug;
+int yynerrs;
+int yyerrflag;
+int yychar;
+short *yyssp;
+YYSTYPE *yyvsp;
+YYSTYPE yyval;
+YYSTYPE yylval;
+short *yyss;
+short *yysslim;
+YYSTYPE *yyvs;
+int yystacksize;
+#line 321 "parse.y"
+extern int yy_flex_debug;
+int
+main(int ac, char **av)
+{
+	int ch;
+	yy_flex_debug = 0;
+#ifdef COLLATE_DEBUG
+	while((ch = getopt(ac, av, ":do:I:")) != -1) {
+#else
+	while((ch = getopt(ac, av, ":o:I:")) != -1) {
+#endif
+		switch (ch)
+		{
+#ifdef COLLATE_DEBUG
+		  case 'd':
+			debug++;
+			yy_flex_debug = 1;
+			break;
+#endif
+		  case 'o':
+			out_file = optarg;
+			break;
+
+		  case 'I':
+			strlcpy(map_name, optarg, sizeof(map_name));
+			break;
+
+		  default:
+			usage();
+		}
+	}
+	ac -= optind;
+	av += optind;
+	if (ac > 0) {
+		if ((yyin = fopen(*av, "r")) == NULL)
+			err(EX_UNAVAILABLE, "can't open source file %s", *av);
+	}
+	for (ch = 0; ch <= UCHAR_MAX; ch++)
+		__collate_substitute_table[ch][0] = ch;
+	yyparse();
+	return 0;
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr, "usage: colldef [-I map_dir] [-o out_file] [filename]\n");
+	exit(EX_USAGE);
+}
+
+void
+yyerror(const char *fmt, ...)
+{
+ 	va_list ap;
+	char msg[128];
+
+	va_start(ap, fmt);
+	vsnprintf(msg, sizeof(msg), fmt, ap);
+	va_end(ap);
+	errx(EX_UNAVAILABLE, "%s near line %d", msg, line_no);
+}
+
+#ifdef COLLATE_DEBUG
+static void
+collate_print_tables(void)
+{
+	int i;
+
+	printf("Substitute table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+	    if (i != *__collate_substitute_table[i])
+		printf("\t'%c' --> \"%s\"\n", i,
+		       __collate_substitute_table[i]);
+	printf("Chain priority table:\n");
+	for (i = 0; i < chain_index - 1; i++)
+		printf("\t\"%s\" : %d %d\n",
+		    __collate_chain_pri_table[i].str,
+		    __collate_chain_pri_table[i].prim,
+		    __collate_chain_pri_table[i].sec);
+	printf("Char priority table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+		printf("\t'%c' : %d %d\n", i, __collate_char_pri_table[i].prim,
+		       __collate_char_pri_table[i].sec);
+}
+#endif
+#line 349 "y.tab.c"
+/* allocate initial stack or double stack size, up to YYMAXDEPTH */
+#if defined(__cplusplus) || defined(__STDC__)
+static int yygrowstack(void)
+#else
+static int yygrowstack()
+#endif
+{
+    int newsize, i;
+    short *newss;
+    YYSTYPE *newvs;
+
+    if ((newsize = yystacksize) == 0)
+        newsize = YYINITSTACKSIZE;
+    else if (newsize >= YYMAXDEPTH)
+        return -1;
+    else if ((newsize *= 2) > YYMAXDEPTH)
+        newsize = YYMAXDEPTH;
+    i = yyssp - yyss;
+#ifdef SIZE_MAX
+#define YY_SIZE_MAX SIZE_MAX
+#else
+#define YY_SIZE_MAX 0xffffffffU
+#endif
+    if (newsize && YY_SIZE_MAX / newsize < sizeof *newss)
+        goto bail;
+    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
+      (short *)malloc(newsize * sizeof *newss); /* overflow check above */
+    if (newss == NULL)
+        goto bail;
+    yyss = newss;
+    yyssp = newss + i;
+    if (newsize && YY_SIZE_MAX / newsize < sizeof *newvs)
+        goto bail;
+    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
+      (YYSTYPE *)malloc(newsize * sizeof *newvs); /* overflow check above */
+    if (newvs == NULL)
+        goto bail;
+    yyvs = newvs;
+    yyvsp = newvs + i;
+    yystacksize = newsize;
+    yysslim = yyss + newsize - 1;
+    return 0;
+bail:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return -1;
+}
+
+#define YYABORT goto yyabort
+#define YYREJECT goto yyabort
+#define YYACCEPT goto yyaccept
+#define YYERROR goto yyerrlab
+int
+#if defined(__cplusplus) || defined(__STDC__)
+yyparse(void)
+#else
+yyparse()
+#endif
+{
+    int yym, yyn, yystate;
+#if YYDEBUG
+#if defined(__cplusplus) || defined(__STDC__)
+    const char *yys;
+#else /* !(defined(__cplusplus) || defined(__STDC__)) */
+    char *yys;
+#endif /* !(defined(__cplusplus) || defined(__STDC__)) */
+
+    if ((yys = getenv("YYDEBUG")))
+    {
+        yyn = *yys;
+        if (yyn >= '0' && yyn <= '9')
+            yydebug = yyn - '0';
+    }
+#endif /* YYDEBUG */
+
+    yynerrs = 0;
+    yyerrflag = 0;
+    yychar = (-1);
+
+    if (yyss == NULL && yygrowstack()) goto yyoverflow;
+    yyssp = yyss;
+    yyvsp = yyvs;
+    *yyssp = yystate = 0;
+
+yyloop:
+    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
+    if (yychar < 0)
+    {
+        if ((yychar = yylex()) < 0) yychar = 0;
+#if YYDEBUG
+        if (yydebug)
+        {
+            yys = 0;
+            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+            if (!yys) yys = "illegal-symbol";
+            printf("%sdebug: state %d, reading %d (%s)\n",
+                    YYPREFIX, yystate, yychar, yys);
+        }
+#endif
+    }
+    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+    {
+#if YYDEBUG
+        if (yydebug)
+            printf("%sdebug: state %d, shifting to state %d\n",
+                    YYPREFIX, yystate, yytable[yyn]);
+#endif
+        if (yyssp >= yysslim && yygrowstack())
+        {
+            goto yyoverflow;
+        }
+        *++yyssp = yystate = yytable[yyn];
+        *++yyvsp = yylval;
+        yychar = (-1);
+        if (yyerrflag > 0)  --yyerrflag;
+        goto yyloop;
+    }
+    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+    {
+        yyn = yytable[yyn];
+        goto yyreduce;
+    }
+    if (yyerrflag) goto yyinrecovery;
+#if defined(lint) || defined(__GNUC__)
+    goto yynewerror;
+#endif
+yynewerror:
+    yyerror("syntax error");
+#if defined(lint) || defined(__GNUC__)
+    goto yyerrlab;
+#endif
+yyerrlab:
+    ++yynerrs;
+yyinrecovery:
+    if (yyerrflag < 3)
+    {
+        yyerrflag = 3;
+        for (;;)
+        {
+            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
+                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
+            {
+#if YYDEBUG
+                if (yydebug)
+                    printf("%sdebug: state %d, error recovery shifting\
+ to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
+#endif
+                if (yyssp >= yysslim && yygrowstack())
+                {
+                    goto yyoverflow;
+                }
+                *++yyssp = yystate = yytable[yyn];
+                *++yyvsp = yylval;
+                goto yyloop;
+            }
+            else
+            {
+#if YYDEBUG
+                if (yydebug)
+                    printf("%sdebug: error recovery discarding state %d\n",
+                            YYPREFIX, *yyssp);
+#endif
+                if (yyssp <= yyss) goto yyabort;
+                --yyssp;
+                --yyvsp;
+            }
+        }
+    }
+    else
+    {
+        if (yychar == 0) goto yyabort;
+#if YYDEBUG
+        if (yydebug)
+        {
+            yys = 0;
+            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+            if (!yys) yys = "illegal-symbol";
+            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
+                    YYPREFIX, yystate, yychar, yys);
+        }
+#endif
+        yychar = (-1);
+        goto yyloop;
+    }
+yyreduce:
+#if YYDEBUG
+    if (yydebug)
+        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
+                YYPREFIX, yystate, yyn, yyrule[yyn]);
+#endif
+    yym = yylen[yyn];
+    if (yym)
+        yyval = yyvsp[1-yym];
+    else
+        memset(&yyval, 0, sizeof yyval);
+    switch (yyn)
+    {
+case 8:
+#line 90 "parse.y"
+{
+	if (strlen(yyvsp[-1].str) + 1 > CHARMAP_SYMBOL_LEN)
+		yyerror("Charmap symbol name '%s' is too long", yyvsp[-1].str);
+	strlcpy(charmap_table[yyvsp[0].ch], yyvsp[-1].str, CHARMAP_SYMBOL_LEN);
+}
+break;
+case 9:
+#line 96 "parse.y"
+{
+	if (yyvsp[-2].ch == '\0')
+		yyerror("NUL character can't be substituted");
+	if (strchr(yyvsp[0].str, yyvsp[-2].ch) != NULL)
+		yyerror("Char 0x%02x substitution is recursive", yyvsp[-2].ch);
+	if (strlen(yyvsp[0].str) + 1 > COLLATE_MAX_STR_LEN)
+		yyerror("Char 0x%02x substitution is too long", yyvsp[-2].ch);
+	strlcpy(__collate_substitute_table[yyvsp[-2].ch], yyvsp[0].str, COLLATE_MAX_STR_LEN);
+}
+break;
+case 10:
+#line 106 "parse.y"
+{
+	FILE *fp;
+	int ch, substed, ordered;
+	uint32_t u32;
+
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		substed = (__collate_substitute_table[ch][0] != ch);
+		ordered = !!__collate_char_pri_table[ch].prim;
+		if (!ordered && !substed)
+			yyerror("Char 0x%02x not found", ch);
+		if (substed && ordered)
+			yyerror("Char 0x%02x can't be ordered since substituted", ch);
+	}
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	chain_index++;
+
+#ifdef COLLATE_DEBUG
+	if (debug)
+		collate_print_tables();
+#endif
+	if ((fp = fopen(out_file, "w")) == NULL)
+		err(EX_UNAVAILABLE, "can't open destination file %s",
+		    out_file);
+
+	strlcpy(__collate_version, COLLATE_VERSION1_2, COLLATE_MAX_STR_LEN);
+	if (fwrite(__collate_version, sizeof(__collate_version), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting collate version to destination file %s",
+		    out_file);
+	u32 = htonl(chain_index);
+	if (fwrite(&u32, sizeof(u32), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting chains number to destination file %s",
+		    out_file);
+	if (fwrite(__collate_substitute_table,
+		   sizeof(__collate_substitute_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting substitute table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		__collate_char_pri_table[ch].prim =
+		    htonl(__collate_char_pri_table[ch].prim);
+		__collate_char_pri_table[ch].sec =
+		    htonl(__collate_char_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_char_pri_table,
+		   sizeof(__collate_char_pri_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting char table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < chain_index; ch++) {
+		__collate_chain_pri_table[ch].prim =
+		    htonl(__collate_chain_pri_table[ch].prim);
+		__collate_chain_pri_table[ch].sec =
+		    htonl(__collate_chain_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_chain_pri_table,
+		   sizeof(*__collate_chain_pri_table), chain_index, fp) !=
+		   (size_t)chain_index)
+		err(EX_IOERR,
+		"IO error writting chain table to destination file %s",
+		    out_file);
+	if (fclose(fp) != 0)
+		err(EX_IOERR, "IO error closing destination file %s",
+		    out_file);
+	exit(EX_OK);
+}
+break;
+case 13:
+#line 185 "parse.y"
+{
+	curr_chain[0] = yyvsp[-1].ch;
+	curr_chain[1] = yyvsp[0].ch;
+	if (curr_chain[0] == '\0' || curr_chain[1] == '\0')
+		yyerror("\\0 can't be chained");
+	curr_chain[2] = '\0';
+}
+break;
+case 14:
+#line 192 "parse.y"
+{
+	static char tb[2];
+
+	tb[0] = yyvsp[0].ch;
+	if (tb[0] == '\0')
+		yyerror("\\0 can't be chained");
+	if (strlen(curr_chain) + 2 > COLLATE_MAX_STR_LEN)
+		yyerror("Chain '%s' grows too long", curr_chain);
+	(void)strlcat(curr_chain, tb, COLLATE_MAX_STR_LEN);
+}
+break;
+case 15:
+#line 203 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri++;
+}
+break;
+case 16:
+#line 208 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain, 
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri++;
+	chain_index++;
+}
+break;
+case 17:
+#line 223 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x", yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri++;
+	}
+}
+break;
+case 18:
+#line 235 "parse.y"
+{
+	prim_pri++;
+}
+break;
+case 19:
+#line 238 "parse.y"
+{
+	prim_pri++;
+	sec_pri = 1;
+}
+break;
+case 24:
+#line 249 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri;
+}
+break;
+case 25:
+#line 254 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+	}
+}
+break;
+case 26:
+#line 267 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	chain_index++;
+}
+break;
+case 27:
+#line 283 "parse.y"
+{
+	if (__collate_char_pri_table[yyvsp[0].ch].prim)
+		yyerror("Char 0x%02x duplicated", yyvsp[0].ch);
+	__collate_char_pri_table[yyvsp[0].ch].prim = prim_pri;
+	__collate_char_pri_table[yyvsp[0].ch].sec = sec_pri++;
+}
+break;
+case 28:
+#line 289 "parse.y"
+{
+	u_int i;
+
+	if (yyvsp[0].ch <= yyvsp[-2].ch)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			yyvsp[-2].ch, yyvsp[0].ch);
+
+	for (i = yyvsp[-2].ch; i <= yyvsp[0].ch; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+		__collate_char_pri_table[(u_char)i].sec = sec_pri++;
+	}
+}
+break;
+case 29:
+#line 303 "parse.y"
+{
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	__collate_chain_pri_table[chain_index].sec = sec_pri++;
+	chain_index++;
+}
+break;
+#line 816 "y.tab.c"
+    }
+    yyssp -= yym;
+    yystate = *yyssp;
+    yyvsp -= yym;
+    yym = yylhs[yyn];
+    if (yystate == 0 && yym == 0)
+    {
+#if YYDEBUG
+        if (yydebug)
+            printf("%sdebug: after reduction, shifting from state 0 to\
+ state %d\n", YYPREFIX, YYFINAL);
+#endif
+        yystate = YYFINAL;
+        *++yyssp = YYFINAL;
+        *++yyvsp = yyval;
+        if (yychar < 0)
+        {
+            if ((yychar = yylex()) < 0) yychar = 0;
+#if YYDEBUG
+            if (yydebug)
+            {
+                yys = 0;
+                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+                if (!yys) yys = "illegal-symbol";
+                printf("%sdebug: state %d, reading %d (%s)\n",
+                        YYPREFIX, YYFINAL, yychar, yys);
+            }
+#endif
+        }
+        if (yychar == 0) goto yyaccept;
+        goto yyloop;
+    }
+    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
+        yystate = yytable[yyn];
+    else
+        yystate = yydgoto[yym];
+#if YYDEBUG
+    if (yydebug)
+        printf("%sdebug: after reduction, shifting from state %d \
+to state %d\n", YYPREFIX, *yyssp, yystate);
+#endif
+    if (yyssp >= yysslim && yygrowstack())
+    {
+        goto yyoverflow;
+    }
+    *++yyssp = yystate;
+    *++yyvsp = yyval;
+    goto yyloop;
+yyoverflow:
+    yyerror("yacc stack overflow");
+yyabort:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return (1);
+yyaccept:
+    if (yyss)
+            free(yyss);
+    if (yyvs)
+            free(yyvs);
+    yyss = yyssp = NULL;
+    yyvs = yyvsp = NULL;
+    yystacksize = 0;
+    return (0);
+}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/parse.y src/usr.bin/colldef/parse.y
--- src54-s/usr.bin/colldef/parse.y	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/parse.y	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,405 @@
+%{
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <arpa/inet.h>
+#include <err.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <sysexits.h>
+#include <syslog.h>
+#include "collate.h"
+#include "common.h"
+
+extern FILE *yyin;
+void yyerror(const char *, ...);
+int yyparse(void);
+int yylex(void);
+static void usage(void);
+static void collate_print_tables(void);
+
+char map_name[FILENAME_MAX] = ".";
+char curr_chain[COLLATE_MAX_STR_LEN];
+
+char __collate_version[COLLATE_MAX_STR_LEN];
+u_char charmap_table[UCHAR_MAX + 1][CHARMAP_SYMBOL_LEN];
+
+#undef __collate_substitute_table
+u_char __collate_substitute_table[UCHAR_MAX + 1][COLLATE_MAX_STR_LEN];
+#undef __collate_char_pri_table
+struct __collate_st_char_pri __collate_char_pri_table[UCHAR_MAX + 1];
+struct __collate_st_chain_pri *__collate_chain_pri_table;
+struct __collate_st_chain_pri *nc = NULL;
+
+int chain_index = 0;
+int prim_pri = 1, sec_pri = 1;
+#ifdef COLLATE_DEBUG
+int debug;
+#endif
+
+const char *out_file = "LC_COLLATE";
+%}
+%union {
+	u_char ch;
+	u_char str[BUFSIZE];
+}
+%token SUBSTITUTE WITH ORDER RANGE
+%token <str> STRING
+%token <str> DEFN
+%token <ch> CHAR
+%%
+collate : statment_list
+;
+statment_list : statment
+	| statment_list '\n' statment
+;
+statment :
+	| charmap
+	| substitute
+	| order
+;
+charmap : DEFN CHAR {
+	if (strlen($1) + 1 > CHARMAP_SYMBOL_LEN)
+		yyerror("Charmap symbol name '%s' is too long", $1);
+	strlcpy(charmap_table[$2], $1, CHARMAP_SYMBOL_LEN);
+}
+;
+substitute : SUBSTITUTE CHAR WITH STRING {
+	if ($2 == '\0')
+		yyerror("NUL character can't be substituted");
+	if (strchr($4, $2) != NULL)
+		yyerror("Char 0x%02x substitution is recursive", $2);
+	if (strlen($4) + 1 > COLLATE_MAX_STR_LEN)
+		yyerror("Char 0x%02x substitution is too long", $2);
+	strlcpy(__collate_substitute_table[$2], $4, COLLATE_MAX_STR_LEN);
+}
+;
+order : ORDER order_list {
+	FILE *fp;
+	int ch, substed, ordered;
+	uint32_t u32;
+
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		substed = (__collate_substitute_table[ch][0] != ch);
+		ordered = !!__collate_char_pri_table[ch].prim;
+		if (!ordered && !substed)
+			yyerror("Char 0x%02x not found", ch);
+		if (substed && ordered)
+			yyerror("Char 0x%02x can't be ordered since substituted", ch);
+	}
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	chain_index++;
+
+#ifdef COLLATE_DEBUG
+	if (debug)
+		collate_print_tables();
+#endif
+	if ((fp = fopen(out_file, "w")) == NULL)
+		err(EX_UNAVAILABLE, "can't open destination file %s",
+		    out_file);
+
+	strlcpy(__collate_version, COLLATE_VERSION1_2, COLLATE_MAX_STR_LEN);
+	if (fwrite(__collate_version, sizeof(__collate_version), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting collate version to destination file %s",
+		    out_file);
+	u32 = htonl(chain_index);
+	if (fwrite(&u32, sizeof(u32), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting chains number to destination file %s",
+		    out_file);
+	if (fwrite(__collate_substitute_table,
+		   sizeof(__collate_substitute_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting substitute table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < UCHAR_MAX + 1; ch++) {
+		__collate_char_pri_table[ch].prim =
+		    htonl(__collate_char_pri_table[ch].prim);
+		__collate_char_pri_table[ch].sec =
+		    htonl(__collate_char_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_char_pri_table,
+		   sizeof(__collate_char_pri_table), 1, fp) != 1)
+		err(EX_IOERR,
+		"IO error writting char table to destination file %s",
+		    out_file);
+	for (ch = 0; ch < chain_index; ch++) {
+		__collate_chain_pri_table[ch].prim =
+		    htonl(__collate_chain_pri_table[ch].prim);
+		__collate_chain_pri_table[ch].sec =
+		    htonl(__collate_chain_pri_table[ch].sec);
+	}
+	if (fwrite(__collate_chain_pri_table,
+		   sizeof(*__collate_chain_pri_table), chain_index, fp) !=
+		   (size_t)chain_index)
+		err(EX_IOERR,
+		"IO error writting chain table to destination file %s",
+		    out_file);
+	if (fclose(fp) != 0)
+		err(EX_IOERR, "IO error closing destination file %s",
+		    out_file);
+	exit(EX_OK);
+}
+;
+order_list : item
+	| order_list ';' item
+;
+chain : CHAR CHAR {
+	curr_chain[0] = $1;
+	curr_chain[1] = $2;
+	if (curr_chain[0] == '\0' || curr_chain[1] == '\0')
+		yyerror("\\0 can't be chained");
+	curr_chain[2] = '\0';
+}
+	| chain CHAR {
+	static char tb[2];
+
+	tb[0] = $2;
+	if (tb[0] == '\0')
+		yyerror("\\0 can't be chained");
+	if (strlen(curr_chain) + 2 > COLLATE_MAX_STR_LEN)
+		yyerror("Chain '%s' grows too long", curr_chain);
+	(void)strlcat(curr_chain, tb, COLLATE_MAX_STR_LEN);
+}
+;
+item :  CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri++;
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain, 
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri++;
+	chain_index++;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x", $1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri++;
+	}
+}
+	| '{' prim_order_list '}' {
+	prim_pri++;
+}
+	| '(' sec_order_list ')' {
+	prim_pri++;
+	sec_pri = 1;
+}
+;
+prim_order_list : prim_sub_item
+	| prim_order_list ',' prim_sub_item 
+;
+sec_order_list : sec_sub_item
+	| sec_order_list ',' sec_sub_item 
+;
+prim_sub_item : CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			$1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+	}
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	chain_index++;
+}
+;
+sec_sub_item : CHAR {
+	if (__collate_char_pri_table[$1].prim)
+		yyerror("Char 0x%02x duplicated", $1);
+	__collate_char_pri_table[$1].prim = prim_pri;
+	__collate_char_pri_table[$1].sec = sec_pri++;
+}
+	| CHAR RANGE CHAR {
+	u_int i;
+
+	if ($3 <= $1)
+		yyerror("Illegal range 0x%02x -- 0x%02x",
+			$1, $3);
+
+	for (i = $1; i <= $3; i++) {
+		if (__collate_char_pri_table[(u_char)i].prim)
+			yyerror("Char 0x%02x duplicated", (u_char)i);
+		__collate_char_pri_table[(u_char)i].prim = prim_pri;
+		__collate_char_pri_table[(u_char)i].sec = sec_pri++;
+	}
+}
+	| chain {
+	if ((nc = realloc(__collate_chain_pri_table,
+	     sizeof(*__collate_chain_pri_table) * (chain_index + 1))) == NULL) {
+		free(__collate_chain_pri_table);
+		__collate_chain_pri_table = NULL;
+		yyerror("can't grow chain table");
+	}
+	__collate_chain_pri_table  = nc;
+	(void)memset(&__collate_chain_pri_table[chain_index], 0,
+		     sizeof(__collate_chain_pri_table[0]));
+	(void)strlcpy(__collate_chain_pri_table[chain_index].str, curr_chain,
+		COLLATE_MAX_STR_LEN);
+	__collate_chain_pri_table[chain_index].prim = prim_pri;
+	__collate_chain_pri_table[chain_index].sec = sec_pri++;
+	chain_index++;
+}
+;
+%%
+extern int yy_flex_debug;
+int
+main(int ac, char **av)
+{
+	int ch;
+	yy_flex_debug = 0;
+#ifdef COLLATE_DEBUG
+	while((ch = getopt(ac, av, ":do:I:")) != -1) {
+#else
+	while((ch = getopt(ac, av, ":o:I:")) != -1) {
+#endif
+		switch (ch)
+		{
+#ifdef COLLATE_DEBUG
+		  case 'd':
+			debug++;
+			yy_flex_debug = 1;
+			break;
+#endif
+		  case 'o':
+			out_file = optarg;
+			break;
+
+		  case 'I':
+			strlcpy(map_name, optarg, sizeof(map_name));
+			break;
+
+		  default:
+			usage();
+		}
+	}
+	ac -= optind;
+	av += optind;
+	if (ac > 0) {
+		if ((yyin = fopen(*av, "r")) == NULL)
+			err(EX_UNAVAILABLE, "can't open source file %s", *av);
+	}
+	for (ch = 0; ch <= UCHAR_MAX; ch++)
+		__collate_substitute_table[ch][0] = ch;
+	yyparse();
+	return 0;
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr, "usage: colldef [-I map_dir] [-o out_file] [filename]\n");
+	exit(EX_USAGE);
+}
+
+void
+yyerror(const char *fmt, ...)
+{
+ 	va_list ap;
+	char msg[128];
+
+	va_start(ap, fmt);
+	vsnprintf(msg, sizeof(msg), fmt, ap);
+	va_end(ap);
+	errx(EX_UNAVAILABLE, "%s near line %d", msg, line_no);
+}
+
+#ifdef COLLATE_DEBUG
+static void
+collate_print_tables(void)
+{
+	int i;
+
+	printf("Substitute table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+	    if (i != *__collate_substitute_table[i])
+		printf("\t'%c' --> \"%s\"\n", i,
+		       __collate_substitute_table[i]);
+	printf("Chain priority table:\n");
+	for (i = 0; i < chain_index - 1; i++)
+		printf("\t\"%s\" : %d %d\n",
+		    __collate_chain_pri_table[i].str,
+		    __collate_chain_pri_table[i].prim,
+		    __collate_chain_pri_table[i].sec);
+	printf("Char priority table:\n");
+	for (i = 0; i < UCHAR_MAX + 1; i++)
+		printf("\t'%c' : %d %d\n", i, __collate_char_pri_table[i].prim,
+		       __collate_char_pri_table[i].sec);
+}
+#endif
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/scan.c src/usr.bin/colldef/scan.c
--- src54-s/usr.bin/colldef/scan.c	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/scan.c	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,2131 @@
+/*	$OpenBSD: flex.skl,v 1.11 2010/08/04 18:24:50 millert Exp $	*/
+
+/* A lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: /cvs/src/usr.bin/lex/flex.skl,v 1.11 2010/08/04 18:24:50 millert Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+#include <stdio.h>
+#include <errno.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#ifdef __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( yyin )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		YY_RESTORE_YY_MORE_OFFSET \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+static YY_BUFFER_STATE yy_current_buffer = 0;
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+
+
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 1;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart YY_PROTO(( FILE *input_file ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
+void yy_load_buffer_state YY_PROTO(( void ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define FLEX_DEBUG
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+
+#define FLEX_DEBUG
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state YY_PROTO(( void ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
+static int yy_get_next_buffer YY_PROTO(( void ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#define YY_NUM_RULES 49
+#define YY_END_OF_BUFFER 50
+static yyconst short int yy_accept[116] =
+    {   0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,   50,   26,    1,   16,
+       17,   17,    4,   26,   26,   26,   26,    6,   26,   46,
+       42,   33,   46,   34,   34,   32,   47,    1,   48,   28,
+       34,   26,   49,    3,   26,   15,    2,    1,    0,    0,
+       25,    7,   25,   14,   10,   11,    9,   13,    8,   12,
+       25,    0,    0,    0,    0,    5,   45,   31,   45,   41,
+       36,   37,   39,   40,   35,   38,   45,   29,   30,   47,
+       28,    0,   27,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,   23,   24,    0,    0,    0,   44,
+
+       43,   19,    0,   22,    0,   20,    0,    0,    0,   21,
+        0,    0,    0,   18,    0
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
+        6,    1,    1,    6,    1,    7,    8,    9,    9,    9,
+        9,    9,    9,    9,    9,   10,   10,    1,   11,   12,
+        1,   13,    1,    1,   15,   16,   17,   18,   19,   20,
+        1,   21,   22,    1,    1,    1,   23,   24,   25,   26,
+        1,   27,   28,   29,   30,   31,   32,   33,    1,    1,
+        1,   14,    1,    1,    1,    1,   15,   16,   17,   18,
+
+       19,   20,    1,   21,   22,    1,    1,    1,   23,   24,
+       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
+        1,    1,    6,    1,    6,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[34] =
+    {   0,
+        1,    2,    3,    1,    1,    1,    1,    1,    4,    4,
+        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1
+    } ;
+
+static yyconst short int yy_base[130] =
+    {   0,
+        0,   27,    1,    4,   13,   32,    7,   17,   20,   44,
+       34,   40,   54,   85,   56,   59,  114,  250,  111,  250,
+      250,   62,  250,  115,   91,   84,   80,  250,  106,  250,
+      250,  250,  145,  250,   57,  250,    0,  106,  250,  105,
+      103,  176,  250,  250,   83,  250,  250,  102,   65,   96,
+      250,  250,   93,  250,  250,  250,  250,  250,  250,  250,
+        0,   86,   82,   82,   93,  250,  250,  250,   86,  250,
+      250,  250,  250,  250,  250,  250,    0,  250,  250,    0,
+       92,   90,  250,   63,   84,   81,    0,   62,   66,   56,
+       74,    0,   60,   69,  250,  250,   56,   51,   48,  250,
+
+      250,  250,   71,  250,   61,  250,   53,   48,   24,  250,
+       21,   21,   15,  250,  250,  209,  213,  217,  221,  225,
+      229,  233,  237,  241,  245,   27,   23,   20,    9
+    } ;
+
+static yyconst short int yy_def[130] =
+    {   0,
+      116,  116,  117,  117,  118,  118,  119,  119,  118,  118,
+      116,  116,  116,  116,  120,  120,  115,  115,  115,  115,
+      115,  115,  115,  121,  115,  115,  115,  115,  122,  115,
+      115,  115,  123,  115,  115,  115,  124,  115,  115,  115,
+      125,  121,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      126,  115,  115,  115,  122,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  127,  115,  115,  124,
+      115,  125,  115,  115,  115,  115,  128,  115,  115,  115,
+      115,  129,  115,  115,  115,  115,  115,  115,  115,  115,
+
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,    0,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115
+    } ;
+
+static yyconst short int yy_nxt[284] =
+    {   0,
+      115,   19,   20,   31,   32,   21,   31,   32,   38,   39,
+       22,   23,  101,   24,   33,   31,   25,   33,   38,   39,
+       35,   40,   31,   96,   26,   36,   92,   27,   19,   28,
+       87,   29,   21,  114,   31,   19,   20,   22,   23,   35,
+       24,   19,   20,   25,   36,   40,   31,   42,   41,  113,
+      112,   26,  111,   42,   27,   19,   43,   38,   46,   47,
+       38,   46,   47,   49,   78,   44,   49,   42,   50,   79,
+      103,   50,  103,  110,  109,  108,  107,  106,  105,  104,
+      102,  104,  100,   99,   98,   45,   19,   43,   97,   95,
+       94,   93,   83,   81,   91,   66,   44,   90,   42,   89,
+
+       88,   86,   85,   48,   84,   83,   81,   48,   66,   64,
+       63,   62,   48,  115,  115,  115,   45,   52,  115,  115,
+      115,  115,  115,   53,  115,  115,  115,  115,  115,   54,
+       55,  115,  115,  115,   56,  115,  115,  115,   57,  115,
+      115,   58,  115,   59,  115,   60,  115,   61,   68,  115,
+      115,  115,  115,   69,  115,  115,  115,  115,  115,   70,
+       71,  115,  115,  115,   72,  115,  115,  115,   73,  115,
+      115,   74,  115,   75,  115,   76,  115,   77,  115,  115,
+      115,  115,  115,  115,   53,  115,  115,  115,  115,  115,
+       54,   55,  115,  115,  115,   56,  115,  115,  115,   57,
+
+      115,  115,   58,  115,   59,  115,   60,  115,   61,   18,
+       18,   18,   18,   30,   30,   30,   30,   34,   34,   34,
+       34,   37,   37,   37,   37,   43,   43,   43,   43,   51,
+       51,   51,   51,   65,   65,   65,   65,   67,   67,  115,
+       67,   80,  115,  115,   80,   82,   82,   82,   82,   17,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115
+    } ;
+
+static yyconst short int yy_chk[284] =
+    {   0,
+        0,    1,    1,    3,    3,    1,    4,    4,    7,    7,
+        1,    1,  129,    1,    3,    5,    1,    4,    8,    8,
+        5,    9,    9,  128,    1,    5,  127,    1,    2,    2,
+      126,    2,    2,  113,    6,   11,   11,    2,    2,    6,
+        2,   12,   12,    2,    6,   10,   10,   11,   10,  112,
+      111,    2,  109,   12,    2,   13,   13,   15,   15,   15,
+       16,   16,   16,   22,   35,   13,   49,   13,   22,   35,
+       94,   49,  103,  108,  107,  105,   99,   98,   97,   94,
+       93,  103,   91,   90,   89,   13,   14,   14,   88,   86,
+       85,   84,   82,   81,   69,   65,   14,   64,   14,   63,
+
+       62,   53,   50,   48,   45,   41,   40,   38,   29,   27,
+       26,   25,   19,   17,    0,    0,   14,   24,    0,    0,
+        0,    0,    0,   24,    0,    0,    0,    0,    0,   24,
+       24,    0,    0,    0,   24,    0,    0,    0,   24,    0,
+        0,   24,    0,   24,    0,   24,    0,   24,   33,    0,
+        0,    0,    0,   33,    0,    0,    0,    0,    0,   33,
+       33,    0,    0,    0,   33,    0,    0,    0,   33,    0,
+        0,   33,    0,   33,    0,   33,    0,   33,   42,    0,
+        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
+       42,   42,    0,    0,    0,   42,    0,    0,    0,   42,
+
+        0,    0,   42,    0,   42,    0,   42,    0,   42,  116,
+      116,  116,  116,  117,  117,  117,  117,  118,  118,  118,
+      118,  119,  119,  119,  119,  120,  120,  120,  120,  121,
+      121,  121,  121,  122,  122,  122,  122,  123,  123,    0,
+      123,  124,    0,    0,  124,  125,  125,  125,  125,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+extern int yy_flex_debug;
+int yy_flex_debug = 1;
+
+static yyconst short int yy_rule_linenum[49] =
+    {   0,
+       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
+       62,   63,   64,   65,   66,   71,   79,   80,   81,   82,
+       83,   84,   85,   92,   99,  100,  101,  102,  111,  117,
+      123,  129,  150,  156,  167,  173,  179,  185,  191,  197,
+      203,  209,  219,  225,  231,  237,  243,  257
+    } ;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "scan.l"
+#define INITIAL 0
+#define string 1
+#define name 2
+#define charmap 3
+#define defn 4
+#define nchar 5
+#define subs 6
+#define subs2 7
+
+#line 3 "scan.l"
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <ctype.h>
+#include <err.h>
+#include <limits.h>
+#include <unistd.h>
+#include <string.h>
+#include <sysexits.h>
+#include "common.h"
+#include "y.tab.h"
+
+int line_no = 1, save_no, fromsubs;
+u_char buf[BUFSIZE], *ptr;
+FILE *map_fp;
+YY_BUFFER_STATE main_buf, map_buf;
+#ifdef FLEX_DEBUG
+extern YYSTYPE yylval;
+#endif /* FLEX_DEBUG */
+int yylex(void);
+#line 539 "lex.yy.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput YY_PROTO(( void ));
+#else
+static int input YY_PROTO(( void ));
+#endif
+#endif
+
+#if defined(YY_STACK_USED) && YY_STACK_USED
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( void ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( void ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#ifdef __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	if ( yyleng > 0 ) \
+		yy_current_buffer->yy_at_bol = \
+				(yytext[yyleng - 1] == '\n'); \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 51 "scan.l"
+
+#line 695 "lex.yy.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( yyin, YY_BUF_SIZE );
+
+		yy_load_buffer_state();
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+		yy_current_state += YY_AT_BOL();
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				yy_last_accepting_state = yy_current_state;
+				yy_last_accepting_cpos = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 116 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 250 );
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+		if ( yy_act == 0 )
+			{ /* have to back up */
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			yy_act = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+		if ( yy_flex_debug )
+			{
+			if ( yy_act == 0 )
+				fprintf( stderr, "--scanner backing up\n" );
+			else if ( yy_act < 49 )
+				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
+				         yy_rule_linenum[yy_act], yytext );
+			else if ( yy_act == 49 )
+				fprintf( stderr, "--accepting default rule (\"%s\")\n",
+				         yytext );
+			else if ( yy_act == 50 )
+				fprintf( stderr, "--(end of buffer or a NUL)\n" );
+			else
+				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
+			}
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = yy_hold_char;
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			goto yy_find_action;
+
+case 1:
+YY_RULE_SETUP
+#line 52 "scan.l"
+;
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 53 "scan.l"
+{ ptr = buf; BEGIN(string); }
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 54 "scan.l"
+{ ptr = buf; fromsubs = 1; BEGIN(name); }
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 55 "scan.l"
+{ ptr = buf; fromsubs = 0; BEGIN(name); }
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 56 "scan.l"
+line_no++;
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 57 "scan.l"
+line_no++;
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 58 "scan.l"
+line_no++;
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 59 "scan.l"
+{ yylval.ch = '\t'; return CHAR; }
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 60 "scan.l"
+{ yylval.ch = '\n'; return CHAR; }
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 61 "scan.l"
+{ yylval.ch = '\b'; return CHAR; }
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 62 "scan.l"
+{ yylval.ch = '\f'; return CHAR; }
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 63 "scan.l"
+{ yylval.ch = '\v'; return CHAR; }
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 64 "scan.l"
+{ yylval.ch = '\r'; return CHAR; }
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 65 "scan.l"
+{ yylval.ch = '\a'; return CHAR; }
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 66 "scan.l"
+{
+	line_no++;
+	BEGIN(INITIAL);
+	return '\n';
+}
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 71 "scan.l"
+{
+	line_no++;
+	if (map_fp != NULL) {
+		ptr = buf;
+		BEGIN(defn);
+	}
+	return '\n';
+}
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 79 "scan.l"
+return *yytext;
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 80 "scan.l"
+{ BEGIN(subs); return SUBSTITUTE; }
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 81 "scan.l"
+{ BEGIN(subs2); return WITH; }
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 82 "scan.l"
+return ORDER;
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 83 "scan.l"
+BEGIN(charmap);
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 84 "scan.l"
+return RANGE;
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 85 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 92 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 99 "scan.l"
+{ yylval.ch = yytext[1]; return CHAR; }
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 100 "scan.l"
+{ yylval.ch = *yytext; return CHAR; }
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 101 "scan.l"
+line_no++;
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 102 "scan.l"
+{
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "map expected near line %u of %s",
+		     line_no, map_name);
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(nchar);
+	return DEFN;
+}
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 111 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '/'",
+		     line_no);
+	*ptr++ = '/';
+}
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 117 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '>'",
+		     line_no);
+	*ptr++ = '>';
+}
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 123 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\"'",
+		     line_no);
+	*ptr++ = '"';
+}
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 129 "scan.l"
+{
+	u_int i;
+
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "non-empty name expected near line %u",
+		     line_no);
+	*ptr = '\0';
+	for (i = 0; i <= UCHAR_MAX; i++) {
+		if (strcmp(charmap_table[i], buf) == 0)
+			goto findit;
+	}
+	errx(EX_UNAVAILABLE, "name <%s> not 'charmap'-defined near line %u",
+		buf, line_no);
+ findit:
+	yylval.ch = i;
+	if (fromsubs)
+		BEGIN(subs);
+	else
+		BEGIN(INITIAL);
+	return CHAR;
+}
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 150 "scan.l"
+{
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(subs2);
+	return STRING;
+}
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 156 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	if (!isascii(*yytext) || !isprint(*yytext))
+		errx(EX_UNAVAILABLE, "non-ASCII or non-printable character 0x%02x not allowed in the map/name near line %u of %s",
+		     *yytext, line_no, s);
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "map/name buffer overflow near line %u of %s, character '%c'",
+		     line_no, s, *yytext);
+	*ptr++ = *yytext;
+}
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 167 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\t'",
+		     line_no);
+	*ptr++ = '\t';
+}
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 173 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\b'",
+		     line_no);
+	*ptr++ = '\b';
+}
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 179 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\f'",
+		     line_no);
+	*ptr++ = '\f';
+}
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 185 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\v'",
+		     line_no);
+	*ptr++ = '\v';
+}
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 191 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\n'",
+		     line_no);
+	*ptr++ = '\n';
+}
+	YY_BREAK
+case 40:
+YY_RULE_SETUP
+#line 197 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\r'",
+		     line_no);
+	*ptr++ = '\r';
+}
+	YY_BREAK
+case 41:
+YY_RULE_SETUP
+#line 203 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\a'",
+		     line_no);
+	*ptr++ = '\a';
+}
+	YY_BREAK
+case 42:
+YY_RULE_SETUP
+#line 209 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "unterminated map/name/string near line %u of %s", line_no, s);
+}
+	YY_BREAK
+case YY_STATE_EOF(name):
+case YY_STATE_EOF(string):
+case YY_STATE_EOF(nchar):
+#line 214 "scan.l"
+{
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "premature EOF in the name/string/char near line %u of %s", line_no, s);
+}
+	YY_BREAK
+case 43:
+YY_RULE_SETUP
+#line 219 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	*ptr++ = (u_char)v;
+}
+	YY_BREAK
+case 44:
+YY_RULE_SETUP
+#line 225 "scan.l"
+{
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	*ptr++ = (u_char)v;
+}
+	YY_BREAK
+case 45:
+YY_RULE_SETUP
+#line 231 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, yytext[1]);
+	*ptr++ = yytext[1];
+}
+	YY_BREAK
+case 46:
+YY_RULE_SETUP
+#line 237 "scan.l"
+{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, *yytext);
+	*ptr++ = *yytext;
+}
+	YY_BREAK
+case 47:
+YY_RULE_SETUP
+#line 243 "scan.l"
+{
+	strlcat(map_name, "/", FILENAME_MAX);
+	strlcat(map_name, yytext, FILENAME_MAX);
+	if((map_fp = fopen(map_name, "r")) == NULL)
+		err(EX_UNAVAILABLE, "can't open 'charmap' file %s",
+		    map_name);
+	save_no = line_no;
+	line_no = 1;
+	map_buf = yy_new_buffer(map_fp, YY_BUF_SIZE);
+	main_buf = YY_CURRENT_BUFFER;
+	yy_switch_to_buffer(map_buf);
+	ptr = buf;
+	BEGIN(defn);
+}
+	YY_BREAK
+case 48:
+YY_RULE_SETUP
+#line 257 "scan.l"
+{
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+	YY_BREAK
+case YY_STATE_EOF(charmap):
+#line 261 "scan.l"
+{
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+	YY_BREAK
+case YY_STATE_EOF(INITIAL):
+case YY_STATE_EOF(defn):
+#line 265 "scan.l"
+{
+	if(map_fp != NULL) {
+		if (ptr != buf)
+			errx(EX_UNAVAILABLE, "premature EOF in the map near line %u of %s", line_no, map_name);
+		yy_switch_to_buffer(main_buf);
+		yy_delete_buffer(map_buf);
+		fclose(map_fp);
+		map_fp = NULL;
+		line_no = save_no;
+		BEGIN(INITIAL);
+	} else
+		yyterminate();
+}
+	YY_BREAK
+case 49:
+YY_RULE_SETUP
+#line 278 "scan.l"
+ECHO;
+	YY_BREAK
+#line 1229 "lex.yy.c"
+case YY_STATE_EOF(subs):
+case YY_STATE_EOF(subs2):
+	yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			yy_n_chars = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = yyin;
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state();
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_c_buf_p;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer() )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer()
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			yy_n_chars, num_to_read );
+
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	if ( yy_n_chars == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( yyin );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	yy_n_chars += number_to_move;
+	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state()
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+	yy_current_state += YY_AT_BOL();
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			yy_last_accepting_state = yy_current_state;
+			yy_last_accepting_cpos = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 116 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state )
+yy_state_type yy_current_state;
+#endif
+	{
+	register int yy_is_jam;
+	register char *yy_cp = yy_c_buf_p;
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		yy_last_accepting_state = yy_current_state;
+		yy_last_accepting_cpos = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 116 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 115);
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp )
+#else
+static void yyunput( c, yy_bp )
+int c;
+register char *yy_bp;
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = yy_n_chars + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			yy_n_chars = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput()
+#else
+static int input()
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer() )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( yyin );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+	yy_current_buffer->yy_at_bol = (c == '\n');
+
+	return c;
+	}
+#endif	/* ifndef YY_NO_INPUT */
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( FILE *input_file )
+#else
+void yyrestart( input_file )
+FILE *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
+
+	yy_init_buffer( yy_current_buffer, input_file );
+	yy_load_buffer_state();
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
+#else
+void yy_switch_to_buffer( new_buffer )
+YY_BUFFER_STATE new_buffer;
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state();
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( void )
+#else
+void yy_load_buffer_state()
+#endif
+	{
+	yy_n_chars = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	yyin = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size )
+FILE *file;
+int size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b )
+#else
+void yy_delete_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+#include <unistd.h>
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
+#else
+void yy_init_buffer( b, file )
+YY_BUFFER_STATE b;
+FILE *file;
+#endif
+
+
+	{
+	int oerrno = errno;
+
+	yy_flush_buffer( b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+#if defined(YY_ALWAYS_INTERACTIVE) && YY_ALWAYS_INTERACTIVE
+	b->yy_is_interactive = 1;
+#else
+#if defined(YY_NEVER_INTERACTIVE) && YY_NEVER_INTERACTIVE
+	b->yy_is_interactive = 0;
+#else
+	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+#endif
+#endif
+	errno = oerrno;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b )
+#else
+void yy_flush_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state();
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size )
+char *base;
+yy_size_t size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str )
+yyconst char *yy_str;
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len )
+yyconst char *bytes;
+int len;
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state )
+#else
+static void yy_push_state( new_state )
+int new_state;
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state()
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state()
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if defined(YY_MAIN) && YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 278 "scan.l"
+
+#ifdef FLEX_DEBUG
+/*main()
+{
+	while(yylex())
+		;
+	return 0;
+}*/
+#endif /* FLEX_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/scan.l src/usr.bin/colldef/scan.l
--- src54-s/usr.bin/colldef/scan.l	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/scan.l	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,286 @@
+%x string name charmap defn nchar subs subs2
+%{
+/*-
+ * Copyright (c) 1995 Alex Tatmanjants <alex@elvisti.kiev.ua>
+ *		at Electronni Visti IA, Kiev, Ukraine.
+ *			All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <sys/types.h>
+#include <ctype.h>
+#include <err.h>
+#include <limits.h>
+#include <unistd.h>
+#include <string.h>
+#include <sysexits.h>
+#include "common.h"
+#include "y.tab.h"
+
+int line_no = 1, save_no, fromsubs;
+u_char buf[BUFSIZE], *ptr;
+FILE *map_fp;
+YY_BUFFER_STATE main_buf, map_buf;
+#ifdef FLEX_DEBUG
+extern YYSTYPE yylval;
+#endif /* FLEX_DEBUG */
+int yylex(void);
+%}
+%%
+<INITIAL,charmap,nchar,subs,subs2>[ \t]+      ;
+<subs2>\"               { ptr = buf; BEGIN(string); }
+<subs>\<                { ptr = buf; fromsubs = 1; BEGIN(name); }
+<INITIAL>\<             { ptr = buf; fromsubs = 0; BEGIN(name); }
+^#.*\n			line_no++;
+^\n			line_no++;
+<INITIAL>\\\n           line_no++;
+<INITIAL,nchar,subs>\\t      { yylval.ch = '\t'; return CHAR; }
+<INITIAL,nchar,subs>\\n      { yylval.ch = '\n'; return CHAR; }
+<INITIAL,nchar,subs>\\b      { yylval.ch = '\b'; return CHAR; }
+<INITIAL,nchar,subs>\\f      { yylval.ch = '\f'; return CHAR; }
+<INITIAL,nchar,subs>\\v      { yylval.ch = '\v'; return CHAR; }
+<INITIAL,nchar,subs>\\r      { yylval.ch = '\r'; return CHAR; }
+<INITIAL,nchar,subs>\\a      { yylval.ch = '\a'; return CHAR; }
+<subs2>\n               {
+	line_no++;
+	BEGIN(INITIAL);
+	return '\n';
+}
+<INITIAL,nchar>\n       {
+	line_no++;
+	if (map_fp != NULL) {
+		ptr = buf;
+		BEGIN(defn);
+	}
+	return '\n';
+}
+<INITIAL>[;,{}()]       return *yytext;
+<INITIAL>substitute     { BEGIN(subs); return SUBSTITUTE; }
+<subs>with              { BEGIN(subs2); return WITH; }
+<INITIAL>order          return ORDER;
+<INITIAL>charmap        BEGIN(charmap);
+<INITIAL>;[ \t]*\.\.\.[ \t]*;   return RANGE;
+<INITIAL,nchar,subs>\\[0-7]{3}       {
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+<INITIAL,nchar,subs>\\x[0-9a-fA-F]{2}   {
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	yylval.ch = (u_char)v;
+	return CHAR;
+}
+<INITIAL,nchar,subs>\\. { yylval.ch = yytext[1]; return CHAR; }
+<INITIAL,nchar,subs>.   { yylval.ch = *yytext; return CHAR; }
+<defn>^#.*\n            line_no++;
+<defn>[ \t]+            {
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "map expected near line %u of %s",
+		     line_no, map_name);
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(nchar);
+	return DEFN;
+}
+<name>\/\/              {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '/'",
+		     line_no);
+	*ptr++ = '/';
+}
+<name>\/\>              {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "name buffer overflow near line %u, character '>'",
+		     line_no);
+	*ptr++ = '>';
+}
+<string>\\\"		{
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\"'",
+		     line_no);
+	*ptr++ = '"';
+}
+<name>\>		{
+	u_int i;
+
+	if (ptr == buf)
+		errx(EX_UNAVAILABLE, "non-empty name expected near line %u",
+		     line_no);
+	*ptr = '\0';
+	for (i = 0; i <= UCHAR_MAX; i++) {
+		if (strcmp(charmap_table[i], buf) == 0)
+			goto findit;
+	}
+	errx(EX_UNAVAILABLE, "name <%s> not 'charmap'-defined near line %u",
+		buf, line_no);
+ findit:
+	yylval.ch = i;
+	if (fromsubs)
+		BEGIN(subs);
+	else
+		BEGIN(INITIAL);
+	return CHAR;
+}
+<string>\"		{
+	*ptr = '\0';
+	strlcpy(yylval.str, buf, BUFSIZE);
+	BEGIN(subs2);
+	return STRING;
+}
+<name,defn>.            {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	if (!isascii(*yytext) || !isprint(*yytext))
+		errx(EX_UNAVAILABLE, "non-ASCII or non-printable character 0x%02x not allowed in the map/name near line %u of %s",
+		     *yytext, line_no, s);
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "map/name buffer overflow near line %u of %s, character '%c'",
+		     line_no, s, *yytext);
+	*ptr++ = *yytext;
+}
+<string>\\t             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\t'",
+		     line_no);
+	*ptr++ = '\t';
+}
+<string>\\b             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\b'",
+		     line_no);
+	*ptr++ = '\b';
+}
+<string>\\f             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\f'",
+		     line_no);
+	*ptr++ = '\f';
+}
+<string>\\v             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\v'",
+		     line_no);
+	*ptr++ = '\v';
+}
+<string>\\n             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\n'",
+		     line_no);
+	*ptr++ = '\n';
+}
+<string>\\r             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\r'",
+		     line_no);
+	*ptr++ = '\r';
+}
+<string>\\a             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '\\a'",
+		     line_no);
+	*ptr++ = '\a';
+}
+<name,string,defn>\n            {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "unterminated map/name/string near line %u of %s", line_no, s);
+}
+<name,string,nchar><<EOF>>      {
+	const char *s = (map_fp != NULL) ? map_name : "input";
+
+	errx(EX_UNAVAILABLE, "premature EOF in the name/string/char near line %u of %s", line_no, s);
+}
+<string>\\x[0-9a-f]{2}          {
+	u_int v;
+
+	sscanf(&yytext[2], "%x", &v);
+	*ptr++ = (u_char)v;
+}
+<string>\\[0-7]{3}              {
+	u_int v;
+
+	sscanf(&yytext[1], "%o", &v);
+	*ptr++ = (u_char)v;
+}
+<string>\\.             {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, yytext[1]);
+	*ptr++ = yytext[1];
+}
+<string>.               {
+	if(ptr >= buf + sizeof(buf) - 1)
+		errx(EX_UNAVAILABLE, "string buffer overflow near line %u, character '%c'",
+		     line_no, *yytext);
+	*ptr++ = *yytext;
+}
+<charmap>[^ \t\n]+	{
+	strlcat(map_name, "/", FILENAME_MAX);
+	strlcat(map_name, yytext, FILENAME_MAX);
+	if((map_fp = fopen(map_name, "r")) == NULL)
+		err(EX_UNAVAILABLE, "can't open 'charmap' file %s",
+		    map_name);
+	save_no = line_no;
+	line_no = 1;
+	map_buf = yy_new_buffer(map_fp, YY_BUF_SIZE);
+	main_buf = YY_CURRENT_BUFFER;
+	yy_switch_to_buffer(map_buf);
+	ptr = buf;
+	BEGIN(defn);
+}
+<charmap>\n             {
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+<charmap><<EOF>>        {
+	errx(EX_UNAVAILABLE, "'charmap' file name expected near line %u",
+	     line_no);
+}
+<INITIAL,defn><<EOF>>                 {
+	if(map_fp != NULL) {
+		if (ptr != buf)
+			errx(EX_UNAVAILABLE, "premature EOF in the map near line %u of %s", line_no, map_name);
+		yy_switch_to_buffer(main_buf);
+		yy_delete_buffer(map_buf);
+		fclose(map_fp);
+		map_fp = NULL;
+		line_no = save_no;
+		BEGIN(INITIAL);
+	} else
+		yyterminate();
+}
+%%
+#ifdef FLEX_DEBUG
+/*main()
+{
+	while(yylex())
+		;
+	return 0;
+}*/
+#endif /* FLEX_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/usr.bin/colldef/y.tab.h src/usr.bin/colldef/y.tab.h
--- src54-s/usr.bin/colldef/y.tab.h	Wed Dec 31 19:00:00 1969
+++ src/usr.bin/colldef/y.tab.h	Sat Oct 12 13:23:42 2013
@@ -0,0 +1,15 @@
+#define SUBSTITUTE 257
+#define WITH 258
+#define ORDER 259
+#define RANGE 260
+#define STRING 261
+#define DEFN 262
+#define CHAR 263
+#ifndef YYSTYPE_DEFINED
+#define YYSTYPE_DEFINED
+typedef union {
+	u_char ch;
+	u_char str[BUFSIZE];
+} YYSTYPE;
+#endif /* YYSTYPE_DEFINED */
+extern YYSTYPE yylval;
