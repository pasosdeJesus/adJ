diff -u src54-coll/lib/libc/locale/Makefile.inc src54-mon/lib/libc/locale/Makefile.inc
--- src54-coll/lib/libc/locale/Makefile.inc	Tue Dec  3 10:55:22 2013
+++ src54-mon/lib/libc/locale/Makefile.inc	Thu Dec  5 15:39:51 2013
@@ -6,7 +6,8 @@
 SRCS+=	btowc.c _def_messages.c _def_monetary.c _def_numeric.c _def_time.c \
 	localeconv.c nl_langinfo.c nl_langinfo_l.c setlocale.c \
 	duplocale.c freelocale.c newlocale.c uselocale.c \
-	__mb_cur_max.c collate.c _CurrentRuneLocale.c _get_locname.c \
+	__mb_cur_max.c collate.c _CurrentRuneLocale.c \
+	fix_grouping.c _get_locname.c \
 	isctype_l.c iswctype.c iswctype_l.c wctype.c \
 	loadtextcat.c \
 	mblen.c mbrlen.c mbstowcs.c mbtowc.c multibyte_citrus.c wcscoll.c \
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/locale/_def_monetary.c src/lib/libc/locale/_def_monetary.c
--- src55-orig/lib/libc/locale/_def_monetary.c	Mon Aug  8 03:05:35 2005
+++ src/lib/libc/locale/_def_monetary.c	Wed Dec 31 19:00:00 1969
@@ -3,20 +3,56 @@
  * Written by J.T. Conklin <jtc@netbsd.org>.
  * Public domain.
  */
+/*
+* Copyright (c) 2000, 2001 Alexey Zelkin <phantom@FreeBSD.org>
+* All rights reserved.
+*
+* Copyright (c) 2011 The FreeBSD Foundation
+* All rights reserved.
+* Portions of this software were developed by David Chisnall
+* under sponsorship from the FreeBSD Foundation.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+* 1. Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+* 2. Redistributions in binary form must reproduce the above copyright
+*    notice, this list of conditions and the following disclaimer in the
+*    documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+* SUCH DAMAGE.
+*/
 
 #include <limits.h>
 #include <locale.h>
 #include "localedef.h"
+#include <stdlib.h>
+#include <string.h>
+ 
+#include "locale/loadtextcat.h"
 
+static char    numempty[] = { CHAR_MAX, '\0'};
+
 const _MonetaryLocale _DefaultMonetaryLocale =
 {
 	"",
 	"",
 	"",
 	"",
+	numempty,       /* mon_grouping */  
 	"",
 	"",
-	"",
 	CHAR_MAX,
 	CHAR_MAX,
 
@@ -36,3 +72,152 @@
 };
 
 const _MonetaryLocale *_CurrentMonetaryLocale = &_DefaultMonetaryLocale;
+
+extern const char * __fix_locale_grouping_str(const char *);
+
+/* Last loaded monetary locale different to _DefaultMonetaryLocale */
+_MonetaryLocale _monetary_locale;
+
+static char *_monetary_buffer = NULL;
+
+/* Used by localeconv, should be set to 0 only by that function */
+extern int __mlocale_changed;
+
+/* This structure is used to load with __part_load_locale, after
+ * loading will be converted to _MonetaryLocale */
+struct lc_monetary_T {
+	const char	*int_curr_symbol;
+	const char	*currency_symbol;
+	const char	*mon_decimal_point;
+	const char	*mon_thousands_sep;
+	const char	*mon_grouping;
+	const char	*positive_sign;
+	const char	*negative_sign;
+	const char	*int_frac_digits;
+	const char	*frac_digits;
+	const char	*p_cs_precedes;
+	const char	*p_sep_by_space;
+	const char	*n_cs_precedes;
+	const char	*n_sep_by_space;
+	const char	*p_sign_posn;
+	const char	*n_sign_posn;
+	const char	*int_p_cs_precedes;
+	const char	*int_n_cs_precedes;
+	const char	*int_p_sep_by_space;
+	const char	*int_n_sep_by_space;
+	const char	*int_p_sign_posn;
+	const char	*int_n_sign_posn;
+};
+
+static char
+cnv(const char *str)
+{
+	int i = strtol(str, NULL, 10);
+
+	if (i == -1)
+		i = CHAR_MAX;
+	return ((char)i);
+}
+		
+int
+__monetary_load_locale(const char *name)
+{
+	int ret=0;
+	char error_buf[2048];
+	struct lc_monetary_T tmon;
+	int changed;
+
+	if (strcmp(name, "C") == 0 || strcmp(name, "POSIX") == 0) {
+		if (_CurrentMonetaryLocale != &_DefaultMonetaryLocale) {
+			__mlocale_changed = 1;
+			_CurrentMonetaryLocale = &_DefaultMonetaryLocale;
+		}
+	} else {
+		ret = __loadtextcat(name, LC_MONETARY, &changed,
+				&_monetary_buffer, 
+				(const char**)&tmon,
+				sizeof(tmon), 
+				error_buf, sizeof(error_buf));
+		if (ret == 0 && changed == 1) {
+			_monetary_locale.mon_grouping = 
+				(char *)__fix_locale_grouping_str(
+						tmon.mon_grouping);
+#define M_ASSIGN_STR(NAME) (_monetary_locale.NAME = (char *)tmon.NAME)
+			M_ASSIGN_STR(int_curr_symbol);
+			M_ASSIGN_STR(currency_symbol);
+			M_ASSIGN_STR(mon_decimal_point);
+			M_ASSIGN_STR(mon_thousands_sep);
+			M_ASSIGN_STR(positive_sign);
+			M_ASSIGN_STR(negative_sign);
+#define M_ASSIGN_CHAR(NAME) ((_monetary_locale.NAME) = cnv(tmon.NAME))
+			M_ASSIGN_CHAR(int_frac_digits);
+			M_ASSIGN_CHAR(frac_digits);
+			M_ASSIGN_CHAR(p_cs_precedes);
+			M_ASSIGN_CHAR(p_sep_by_space);
+			M_ASSIGN_CHAR(n_cs_precedes);
+			M_ASSIGN_CHAR(n_sep_by_space);
+			M_ASSIGN_CHAR(p_sign_posn);
+			M_ASSIGN_CHAR(n_sign_posn);
+			M_ASSIGN_CHAR(int_p_cs_precedes);
+			M_ASSIGN_CHAR(int_n_cs_precedes);
+			M_ASSIGN_CHAR(int_p_sep_by_space);
+			M_ASSIGN_CHAR(int_n_sep_by_space);
+			M_ASSIGN_CHAR(int_p_sign_posn);
+			M_ASSIGN_CHAR(int_n_sign_posn);
+			__mlocale_changed = 1;
+			_CurrentMonetaryLocale = &_monetary_locale;
+		}
+	}
+
+	return ret;
+
+}
+
+#ifdef LOCALE_DEBUG
+void
+monetdebug() {
+	printf(	"int_curr_symbol = %s\n"
+			"currency_symbol = %s\n"
+			"mon_decimal_point = %s\n"
+			"mon_thousands_sep = %s\n"
+			"mon_grouping = %s\n"
+			"positive_sign = %s\n"
+			"negative_sign = %s\n"
+			"int_frac_digits = %d\n"
+			"frac_digits = %d\n"
+			"p_cs_precedes = %d\n"
+			"p_sep_by_space = %d\n"
+			"n_cs_precedes = %d\n"
+			"n_sep_by_space = %d\n"
+			"p_sign_posn = %d\n"
+			"n_sign_posn = %d\n",
+			"int_p_cs_precedes = %d\n"
+			"int_p_sep_by_space = %d\n"
+			"int_n_cs_precedes = %d\n"
+			"int_n_sep_by_space = %d\n"
+			"int_p_sign_posn = %d\n"
+			"int_n_sign_posn = %d\n",
+			_monetary_locale.int_curr_symbol,
+			_monetary_locale.currency_symbol,
+			_monetary_locale.mon_decimal_point,
+			_monetary_locale.mon_thousands_sep,
+			_monetary_locale.mon_grouping,
+			_monetary_locale.positive_sign,
+			_monetary_locale.negative_sign,
+			_monetary_locale.int_frac_digits[0],
+			_monetary_locale.frac_digits[0],
+			_monetary_locale.p_cs_precedes[0],
+			_monetary_locale.p_sep_by_space[0],
+			_monetary_locale.n_cs_precedes[0],
+			_monetary_locale.n_sep_by_space[0],
+			_monetary_locale.p_sign_posn[0],
+			_monetary_locale.n_sign_posn[0],
+			_monetary_locale.int_p_cs_precedes[0],
+			_monetary_locale.int_p_sep_by_space[0],
+			_monetary_locale.int_n_cs_precedes[0],
+			_monetary_locale.int_n_sep_by_space[0],
+			_monetary_locale.int_p_sign_posn[0],
+			_monetary_locale.int_n_sign_posn[0]
+				);
+}
+#endif /* LOCALE_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/locale/fix_grouping.c src/lib/libc/locale/fix_grouping.c
--- src55-orig/lib/libc/locale/fix_grouping.c	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/locale/fix_grouping.c	Tue Nov 12 02:16:24 2013
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+
+#include <ctype.h>
+#include <limits.h>
+#include <stddef.h>
+
+static const char nogrouping[] = { CHAR_MAX, '\0' };
+
+/*
+ * Internal helper used to convert grouping sequences from string
+ * representation into POSIX specified form, i.e.
+ *
+ * "3;3;-1" -> "\003\003\177\000"
+ */
+
+const char *
+__fix_locale_grouping_str(const char *str)
+{
+	char *src, *dst;
+	char n;
+
+	if (str == NULL || *str == '\0') {
+		return nogrouping;
+	}
+
+	for (src = (char*)str, dst = (char*)str; *src != '\0'; src++) {
+
+		/* input string examples: "3;3", "3;2;-1" */
+		if (*src == ';')
+			continue;
+	
+		if (*src == '-' && *(src+1) == '1') {
+			*dst++ = CHAR_MAX;
+			src++;
+			continue;
+		}
+
+		if (!isdigit((unsigned char)*src)) {
+			/* broken grouping string */
+			return nogrouping;
+		}
+
+		/* assume all numbers <= 99 */
+		n = *src - '0';
+		if (isdigit((unsigned char)*(src+1))) {
+			src++;
+			n *= 10;
+			n += *src - '0';
+		}
+
+		*dst = n;
+		/* NOTE: assume all input started with "0" as 'no grouping' */
+		if (*dst == '\0')
+			return (dst == (char*)str) ? nogrouping : str;
+		dst++;
+	}
+	*dst = '\0';
+	return str;
+}
diff -ruN -x *~ -x *orig src55-orig/lib/libc/locale/loadtextcat.c src/lib/libc/locale/loadtextcat.c
--- src55-orig/lib/libc/locale/loadtextcat.c	Sun Oct  6 20:04:49 2013
+++ src/lib/libc/locale/loadtextcat.c	Wed Dec 11 08:16:55 2013
@@ -36,6 +36,9 @@
 #include <stdlib.h>
 #include <string.h>
 
+/* Amount of lines in a text file with LC_MONETARY locale */
+#define LC_MONETARY_LINES 21
+
 /* Amount of lines in a text file with LC_TIME locale */
 #define LC_TIME_LINES 45
 
@@ -179,6 +182,10 @@
 
 
 	switch (category) {
+		case LC_MONETARY:
+			cfname = "LC_MONETARY";
+			locale_buf_lines = LC_MONETARY_LINES;
+			break;
 		case LC_TIME:
 			cfname = "LC_TIME";
 			locale_buf_lines = LC_TIME_LINES;
diff -ruN -x *~ -x *orig src54-orig/lib/libc/locale/nl_langinfo.3 src/lib/libc/locale/nl_langinfo.3
--- src54-orig/lib/libc/locale/nl_langinfo.3	Sun Oct  6 20:04:49 2013
+++ src/lib/libc/locale/nl_langinfo.3	Wed Dec 11 08:16:55 2013
@@ -57,6 +57,15 @@
 If
 .Fa item
 is invalid, a pointer to an empty string is returned.
+.Sh ERRORS
+Regarding CRNCYSTR from
+http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/langinfo.h.html
+it is not clear how to detect when to use '.' (i.e currency
+symbol replaces radix char).  Such information is not present at
+http://unicode.org/cldr/trac/browser/tags/release-1-9/posix/.
+.Pp
+FreeBSD implements p_cs_precedes == CHAR_MAX to mean that currency symbol
+replaces radix char.
 .Sh SEE ALSO
 .Xr setlocale 3 ,
 .Xr uselocale 3
diff -ruN -x *~ -x *orig src54-orig/lib/libc/locale/nl_langinfo.c src/lib/libc/locale/nl_langinfo.c
--- src54-orig/lib/libc/locale/nl_langinfo.c	Wed Nov 16 11:48:15 2005
+++ src/lib/libc/locale/nl_langinfo.c	Wed Dec 11 08:11:54 2013
@@ -4,14 +4,18 @@
  * Public domain.
  */
 
+#include <langinfo.h>
 #include <locale.h>
 #include <nl_types.h>
 #include <langinfo.h>
+#include <string.h>
 
 #include "localedef.h"
 #include "rune.h"
 #include "runetype.h"
 
+static char _bufcrncystr[16];
+
 char *
 nl_langinfo(nl_item item)
 {
@@ -98,8 +102,20 @@
 	case NOEXPR:
 		s = _CurrentMessagesLocale->noexpr;
 		break;
-	case CRNCYSTR:				/* XXX */
-		s = "";
+	case CRNCYSTR:				
+		_bufcrncystr[0] = '\0';
+		
+		if (_CurrentMonetaryLocale->currency_symbol[0] != '\0' 
+			&& _CurrentMonetaryLocale->p_cs_precedes == _CurrentMonetaryLocale->n_cs_precedes) {
+			if (_CurrentMonetaryLocale->p_cs_precedes == 1) {
+				strlcat(_bufcrncystr, "-", sizeof(_bufcrncystr));
+			} else {
+				strlcat(_bufcrncystr, "+", sizeof(_bufcrncystr));
+			}
+		}
+		strlcat(_bufcrncystr, _CurrentMonetaryLocale->currency_symbol, 
+				sizeof(_bufcrncystr));
+		s = _bufcrncystr;
 		break;
 	case CODESET:
 		s = _CurrentRuneLocale->rl_codeset;
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/locale/setlocale.c src/lib/libc/locale/setlocale.c
--- src55-orig/lib/libc/locale/setlocale.c	Tue Dec  3 10:55:22 2013
+++ src/lib/libc/locale/setlocale.c	Tue Dec  3 11:54:07 2013
@@ -53,6 +53,7 @@
 }
 
 extern int __time_load_locale(const char *name);
+extern int __monetary_load_locale(const char *name);
 
 static int
 changegl(int category, const char *locname, char **gl, char **oldgl)
@@ -80,6 +81,10 @@
 				}
 				break;
 			case LC_MONETARY:
+				if (__monetary_load_locale(locname) != 0) {
+					free(cp);
+					return -1;
+				}
 			case LC_NUMERIC:
 				break;
 			case LC_TIME:
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/stdlib/Makefile.inc src/lib/libc/stdlib/Makefile.inc
--- src55-orig/lib/libc/stdlib/Makefile.inc	Sun Oct  6 20:04:50 2013
+++ src/lib/libc/stdlib/Makefile.inc	Wed Nov 13 00:05:15 2013
@@ -8,7 +8,7 @@
 	getsubopt.c hcreate.c heapsort.c imaxabs.c imaxdiv.c insque.c \
 	l64a.c llabs.c lldiv.c lsearch.c malloc.c reallocarray.c \
 	merge.c posix_pty.c qsort.c radixsort.c rand.c random.c \
-	realpath.c remque.c setenv.c strtoimax.c \
+	realpath.c remque.c setenv.c strtoimax.c strfmon.c \
 	strtol.c strtoll.c strtonum.c strtoul.c strtoull.c strtoumax.c \
 	system.c tfind.c tsearch.c _rand48.c drand48.c erand48.c jrand48.c \
 	lcong48.c lrand48.c mrand48.c nrand48.c seed48.c srand48.c qabs.c \
@@ -28,4 +28,4 @@
 	getsubopt.3 hcreate.3 imaxabs.3 imaxdiv.3 insque.3 labs.3 ldiv.3 \
 	lldiv.3 lsearch.3 malloc.3 posix_memalign.3 posix_openpt.3 ptsname.3 \
 	qabs.3 qdiv.3 qsort.3 radixsort.3 rand48.3 rand.3 random.3 realpath.3 \
-	strtod.3 strtonum.3 strtol.3 strtoul.3 system.3 tsearch.3 \
+	strfmon.3 strtod.3 strtonum.3 strtol.3 strtoul.3 system.3 tsearch.3 \
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/stdlib/strfmon.3 src/lib/libc/stdlib/strfmon.3
--- src55-orig/lib/libc/stdlib/strfmon.3	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/stdlib/strfmon.3	Fri Nov 15 22:20:42 2013
@@ -0,0 +1,174 @@
+.\" Copyright (c) 2001 Jeroen Ruigrok van der Werven <asmodai@FreeBSD.org>
+.\" All rights reserved.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\" From FreeBSD
+.\"
+.Dd $Mdocdate: June 25 2012 $
+.Dt STRFMON 3
+.Os
+.\" ----------------------------------------------------------------------
+.Sh NAME
+.Nm strfmon
+.Nd convert monetary value to string
+.\" ----------------------------------------------------------------------
+.Sh LIBRARY
+.Lb libc
+.Sh SYNOPSIS
+.In monetary.h
+.Ft ssize_t
+.Fn strfmon "char * restrict s" "size_t maxsize" "const char * restrict format" "..."
+.\" ----------------------------------------------------------------------
+.Sh DESCRIPTION
+The
+.Fn strfmon
+function places characters into the array pointed to by
+.Fa s
+as controlled by the string pointed to by
+.Fa format .
+No more than
+.Fa maxsize
+bytes are placed into the array.
+.Pp
+The format string is composed of zero or more directives:
+ordinary characters (not
+.Cm % ) ,
+which are copied unchanged to the output stream; and conversion
+specifications, each of which results in fetching zero or more subsequent
+arguments.
+Each conversion specification is introduced by the
+.Cm %
+character.
+After the
+.Cm % ,
+the following appear in sequence:
+.Bl -bullet
+.It
+Zero or more of the following flags:
+.Bl -tag -width "XXX"
+.It Cm = Ns Ar f
+A
+.Sq Cm =
+character followed by another character
+.Ar f
+which is used as the numeric fill character.
+.It Cm ^
+Do not use grouping characters, regardless of the current locale default.
+.It Cm +
+Represent positive values by prefixing them with a positive sign,
+and negative values by prefixing them with a negative sign.
+This is the default.
+.It Cm \&(
+Enclose negative values in parentheses.
+.It Cm \&!
+Do not include a currency symbol in the output.
+.It Cm \-
+Left justify the result.
+Only valid when a field width is specified.
+.El
+.It
+An optional minimum field width as a decimal number.
+By default, there is no minimum width.
+.It
+A
+.Sq Cm #
+sign followed by a decimal number specifying the maximum
+expected number of digits after the radix character.
+.It
+A
+.Sq Cm \&.
+character followed by a decimal number specifying the number
+the number of digits after the radix character.
+.It
+One of the following conversion specifiers:
+.Bl -tag -width "XXX"
+.It Cm i
+The
+.Vt double
+argument is formatted as an international monetary amount.
+.It Cm n
+The
+.Vt double
+argument is formatted as a national monetary amount.
+.It Cm %
+A
+.Sq Li %
+character is written.
+.El
+.\" ----------------------------------------------------------------------
+.Sh RETURN VALUES
+If the total number of resulting bytes including the terminating
+.Dv NUL
+byte is not more than
+.Fa maxsize ,
+.Fn strfmon
+returns the number of bytes placed into the array pointed to by
+.Fa s ,
+not including the terminating
+.Dv NUL
+byte.
+Otherwise, \-1 is returned,
+the contents of the array are indeterminate,
+and
+.Va errno
+is set to indicate the error.
+.\" ----------------------------------------------------------------------
+.Sh ERRORS
+The
+.Fn strfmon
+function will fail if:
+.Bl -tag -width Er
+.It Bq Er E2BIG
+Conversion stopped due to lack of space in the buffer.
+.It Bq Er EINVAL
+The format string is invalid.
+.It Bq Er ENOMEM
+Not enough memory for temporary buffers.
+.El
+.\" ----------------------------------------------------------------------
+.Sh SEE ALSO
+.Xr localeconv 3
+.\" ----------------------------------------------------------------------
+.Sh STANDARDS
+The
+.Fn strfmon
+function
+conforms to
+.St -p1003.1-2001 .
+.Sh AUTHORS
+.An -nosplit
+The
+.Fn strfmon
+function was implemented by
+.An Alexey Zelkin Aq phantom@FreeBSD.org .
+.Pp
+This manual page was written by
+.An Jeroen Ruigrok van der Werven Aq asmodai@FreeBSD.org
+based on the standards' text.
+.\" ----------------------------------------------------------------------
+.Sh BUGS
+The
+.Fn strfmon
+function does not correctly handle multibyte characters in the
+.Fa format
+argument.
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/stdlib/strfmon.c src/lib/libc/stdlib/strfmon.c
--- src55-orig/lib/libc/stdlib/strfmon.c	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/stdlib/strfmon.c	Wed Nov 13 12:08:13 2013
@@ -0,0 +1,627 @@
+/*-
+ * Copyright (c) 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+#include <ctype.h>
+#include <errno.h>
+#include <limits.h>
+#include <locale.h>
+#include <monetary.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+/* internal flags */
+#define	NEED_GROUPING		0x01	/* print digits grouped (default) */
+#define	SIGN_POSN_USED		0x02	/* '+' or '(' usage flag */
+#define	LOCALE_POSN		0x04	/* use locale defined +/- (default) */
+#define	PARENTH_POSN		0x08	/* enclose negative amount in () */
+#define	SUPRESS_CURR_SYMBOL	0x10	/* supress the currency from output */
+#define	LEFT_JUSTIFY		0x20	/* left justify */
+#define	USE_INTL_CURRENCY	0x40	/* use international currency symbol */
+#define IS_NEGATIVE		0x80	/* is argument value negative ? */
+
+/* internal macros */
+#define PRINT(CH) do {						\
+	if (dst >= s + maxsize) 				\
+		goto e2big_error;				\
+	*dst++ = CH;						\
+} while (0)
+
+#define PRINTS(STR) do {					\
+	char *tmps = STR;					\
+	while (*tmps != '\0')					\
+		PRINT(*tmps++);					\
+} while (0)
+
+#define GET_NUMBER(VAR)	do {					\
+	VAR = 0;						\
+	while (isdigit((unsigned char)*fmt)) {			\
+		if (VAR > INT_MAX / 10)				\
+			goto e2big_error;			\
+		VAR *= 10;					\
+		VAR += *fmt - '0';				\
+		if (VAR < 0)					\
+			goto e2big_error;			\
+		fmt++;						\
+	}							\
+} while (0)
+
+#define GRPCPY(howmany) do {					\
+	int i = howmany;					\
+	while (i-- > 0) {					\
+		avalue_size--;					\
+		*--bufend = *(avalue+avalue_size+padded);	\
+	}							\
+} while (0)
+
+#define GRPSEP do {						\
+	*--bufend = thousands_sep;				\
+	groups++;						\
+} while (0)
+
+static void __setup_vars(int, char *, char *, char *, char **);
+static int __calc_left_pad(int, char *);
+static char *__format_grouped_double(double, int *, int, int, int);
+
+static ssize_t
+vstrfmon(char * __restrict s, size_t maxsize, 
+		const char * __restrict format, va_list ap)
+{
+	char 		*dst;		/* output destination pointer */
+	const char 	*fmt;		/* current format poistion pointer */
+	struct lconv 	*lc;		/* pointer to lconv structure */
+	char		*asciivalue;	/* formatted double pointer */
+
+	int		flags;		/* formatting options */
+	int		pad_char;	/* padding character */
+	int		pad_size;	/* pad size */
+	int		width;		/* field width */
+	int		left_prec;	/* left precision */
+	int		right_prec;	/* right precision */
+	double		value;		/* just value */
+	char		space_char = ' '; /* space after currency */
+
+	char		cs_precedes,	/* values gathered from struct lconv */
+			sep_by_space,
+			sign_posn,
+			*signstr,
+			*currency_symbol;
+
+	char		*tmpptr;	/* temporary vars */
+	int		sverrno;
+
+
+	lc = localeconv();
+	dst = s;
+	fmt = format;
+	asciivalue = NULL;
+	currency_symbol = NULL;
+	pad_size = 0;
+
+	while (*fmt) {
+		/* pass nonformating characters AS IS */
+		if (*fmt != '%')
+			goto literal;
+
+		/* '%' found ! */
+
+		/* "%%" mean just '%' */
+		if (*(fmt+1) == '%') {
+			fmt++;
+	literal:
+			PRINT(*fmt++);
+			continue;
+		}
+
+		/* set up initial values */
+		flags = (NEED_GROUPING|LOCALE_POSN);
+		pad_char = ' ';		/* padding character is "space" */
+		left_prec = -1;		/* no left precision specified */
+		right_prec = -1;	/* no right precision specified */
+		width = -1;		/* no width specified */
+		value = 0;		/* we have no value to print now */
+
+		/* Flags */
+		while (1) {
+			switch (*++fmt) {
+				case '=':	/* fill character */
+					pad_char = *++fmt;
+					if (pad_char == '\0')
+						goto format_error;
+					continue;
+				case '^':	/* not group currency  */
+					flags &= ~(NEED_GROUPING);
+					continue;
+				case '+':	/* use locale defined signs */
+					if (flags & SIGN_POSN_USED)
+						goto format_error;
+					flags |= (SIGN_POSN_USED|LOCALE_POSN);
+					continue;
+				case '(':	/* enclose negatives with () */
+					if (flags & SIGN_POSN_USED)
+						goto format_error;
+					flags |= (SIGN_POSN_USED|PARENTH_POSN);
+					continue;
+				case '!':	/* suppress currency symbol */
+					flags |= SUPRESS_CURR_SYMBOL;
+					continue;
+				case '-':	/* alignment (left)  */
+					flags |= LEFT_JUSTIFY;
+					continue;
+				default:
+					break;
+			}
+			break;
+		}
+
+		/* field Width */
+		if (isdigit((unsigned char)*fmt)) {
+			GET_NUMBER(width);
+			/* Do we have enough space to put number with
+			 * required width ?
+			 */
+			if ((unsigned int)width >= maxsize - (dst - s))
+				goto e2big_error;
+		}
+
+		/* Left precision */
+		if (*fmt == '#') {
+			if (!isdigit((unsigned char)*++fmt))
+				goto format_error;
+			GET_NUMBER(left_prec);
+			if ((unsigned int)left_prec >= maxsize - (dst - s))
+				goto e2big_error;
+		}
+
+		/* Right precision */
+		if (*fmt == '.') {
+			if (!isdigit((unsigned char)*++fmt))
+				goto format_error;
+			GET_NUMBER(right_prec);
+			if ((unsigned int)right_prec >= maxsize - (dst - s) -
+			    left_prec)
+				goto e2big_error;
+		}
+
+		/* Conversion Characters */
+		switch (*fmt++) {
+			case 'i':	/* use internaltion currency format */
+				flags |= USE_INTL_CURRENCY;
+				break;
+			case 'n':	/* use national currency format */
+				flags &= ~(USE_INTL_CURRENCY);
+				break;
+			default:	/* required character is missing or
+					   premature EOS */
+				goto format_error;
+		}
+
+		if (currency_symbol != NULL)
+			free(currency_symbol);
+		if (flags & USE_INTL_CURRENCY) {
+			currency_symbol = strdup(lc->int_curr_symbol);
+			if (currency_symbol != NULL)
+				space_char = *(currency_symbol+3);
+		} else
+			currency_symbol = strdup(lc->currency_symbol);
+
+		if (currency_symbol == NULL)
+			goto end_error;			/* ENOMEM. */
+
+		/* value itself */
+		value = va_arg(ap, double);
+
+		/* detect sign */
+		if (value < 0) {
+			flags |= IS_NEGATIVE;
+			value = -value;
+		}
+
+		/* fill left_prec with amount of padding chars */
+		if (left_prec >= 0) {
+			pad_size = __calc_left_pad((flags ^ IS_NEGATIVE),
+							currency_symbol) -
+				   __calc_left_pad(flags, currency_symbol);
+			if (pad_size < 0)
+				pad_size = 0;
+		}
+
+		if (asciivalue != NULL)
+			free(asciivalue);
+		asciivalue = __format_grouped_double(value, &flags,
+				left_prec, right_prec, pad_char);
+		if (asciivalue == NULL)
+			goto end_error;		/* errno already set     */
+						/* to ENOMEM by malloc() */
+
+		/* set some variables for later use */
+		__setup_vars(flags, &cs_precedes, &sep_by_space,
+				&sign_posn, &signstr);
+
+		/*
+		 * Description of some LC_MONETARY's values:
+		 *
+		 * p_cs_precedes & n_cs_precedes
+		 *
+		 * = 1 - $currency_symbol precedes the value
+		 *       for a monetary quantity with a non-negative value
+		 * = 0 - symbol succeeds the value
+		 *
+		 * p_sep_by_space & n_sep_by_space
+                 *
+		 * = 0 - no space separates $currency_symbol
+		 *       from the value for a monetary quantity with a
+		 *	 non-negative value
+		 * = 1 - space separates the symbol from the value
+		 * = 2 - space separates the symbol and the sign string,
+		 *       if adjacent.
+                 *
+		 * p_sign_posn & n_sign_posn
+                 *
+		 * = 0 - parentheses enclose the quantity and the
+		 *	 $currency_symbol
+		 * = 1 - the sign string precedes the quantity and the 
+		 *       $currency_symbol
+		 * = 2 - the sign string succeeds the quantity and the 
+		 *       $currency_symbol
+		 * = 3 - the sign string precedes the $currency_symbol
+		 * = 4 - the sign string succeeds the $currency_symbol
+                 *
+		 */
+
+		tmpptr = dst;
+
+		while (pad_size-- > 0)
+			PRINT(' ');
+
+		if (sign_posn == 0 && (flags & IS_NEGATIVE))
+			PRINT('(');
+
+		if (cs_precedes == 1) {
+			if (sign_posn == 1 || sign_posn == 3) {
+				PRINTS(signstr);
+				if (sep_by_space == 2)		/* XXX: ? */
+					PRINT(' ');
+			}
+
+			if (!(flags & SUPRESS_CURR_SYMBOL)) {
+				PRINTS(currency_symbol);
+
+				if (sign_posn == 4) {
+					if (sep_by_space == 2)
+						PRINT(space_char);
+					PRINTS(signstr);
+					if (sep_by_space == 1)
+						PRINT(' ');
+				} else if (sep_by_space == 1)
+					PRINT(space_char);
+			}
+		} else if (sign_posn == 1)
+			PRINTS(signstr);
+
+		PRINTS(asciivalue);
+
+		if (cs_precedes == 0) {
+			if (sign_posn == 3) {
+				if (sep_by_space == 1)
+					PRINT(' ');
+				PRINTS(signstr);
+			}
+
+			if (!(flags & SUPRESS_CURR_SYMBOL)) {
+				if ((sign_posn == 3 && sep_by_space == 2)
+				    || (sep_by_space == 1
+				    && (sign_posn == 0
+				    || sign_posn == 1
+				    || sign_posn == 2
+				    || sign_posn == 4)))
+					PRINT(space_char);
+				PRINTS(currency_symbol); /* XXX: len */
+				if (sign_posn == 4) {
+					if (sep_by_space == 2)
+						PRINT(' ');
+					PRINTS(signstr);
+				}
+			}
+		}
+
+		if (sign_posn == 2) {
+			if (sep_by_space == 2)
+				PRINT(' ');
+			PRINTS(signstr);
+		}
+
+		if (sign_posn == 0 && (flags & IS_NEGATIVE))
+			PRINT(')');
+
+		if (dst - tmpptr < width) {
+			if (flags & LEFT_JUSTIFY) {
+				while (dst - tmpptr < width)
+					PRINT(' ');
+			} else {
+				pad_size = dst-tmpptr;
+				memmove(tmpptr + width-pad_size, tmpptr,
+				    pad_size);
+				memset(tmpptr, ' ', width-pad_size);
+				dst += width-pad_size;
+			}
+		}
+	}
+
+	PRINT('\0');
+	free(asciivalue);
+	free(currency_symbol);
+	return (dst - s - 1);	/* return size of put data except trailing '\0' */
+
+e2big_error:
+	errno = E2BIG;
+	goto end_error;
+
+format_error:
+	errno = EINVAL;
+
+end_error:
+	sverrno = errno;
+	if (asciivalue != NULL)
+		free(asciivalue);
+	if (currency_symbol != NULL)
+		free(currency_symbol);
+	errno = sverrno;
+	return (-1);
+}
+ssize_t
+strfmon(char * __restrict s, size_t maxsize, const char * __restrict format,
+    ...)
+{
+	size_t ret;
+	va_list ap;
+	va_start(ap, format);
+	ret = vstrfmon(s, maxsize, format, ap);
+	va_end(ap);
+	return ret;
+}
+
+static void
+__setup_vars(int flags, char *cs_precedes, char *sep_by_space,
+		char *sign_posn, char **signstr) {
+
+	struct lconv *lc = localeconv();
+
+	if ((flags & IS_NEGATIVE) && (flags & USE_INTL_CURRENCY)) {
+		*cs_precedes = lc->int_n_cs_precedes;
+		*sep_by_space = lc->int_n_sep_by_space;
+		*sign_posn = (flags & PARENTH_POSN) ? 0 : lc->int_n_sign_posn;
+		*signstr = (lc->negative_sign[0] == '\0') ? "-"
+		    : lc->negative_sign;
+	} else if (flags & USE_INTL_CURRENCY) {
+		*cs_precedes = lc->int_p_cs_precedes;
+		*sep_by_space = lc->int_p_sep_by_space;
+		*sign_posn = (flags & PARENTH_POSN) ? 0 : lc->int_p_sign_posn;
+		*signstr = lc->positive_sign;
+	} else if (flags & IS_NEGATIVE) {
+		*cs_precedes = lc->n_cs_precedes;
+		*sep_by_space = lc->n_sep_by_space;
+		*sign_posn = (flags & PARENTH_POSN) ? 0 : lc->n_sign_posn;
+		*signstr = (lc->negative_sign[0] == '\0') ? "-"
+		    : lc->negative_sign;
+	} else {
+		*cs_precedes = lc->p_cs_precedes;
+		*sep_by_space = lc->p_sep_by_space;
+		*sign_posn = (flags & PARENTH_POSN) ? 0 : lc->p_sign_posn;
+		*signstr = lc->positive_sign;
+	}
+
+	/* Set defult values for unspecified information. */
+	if (*cs_precedes != 0)
+		*cs_precedes = 1;
+	if (*sep_by_space == CHAR_MAX)
+		*sep_by_space = 0;
+	if (*sign_posn == CHAR_MAX)
+		*sign_posn = 0;
+}
+
+static int
+__calc_left_pad(int flags, char *cur_symb) {
+
+	char cs_precedes, sep_by_space, sign_posn, *signstr;
+	int left_chars = 0;
+
+	__setup_vars(flags, &cs_precedes, &sep_by_space, &sign_posn, &signstr);
+
+	if (cs_precedes != 0) {
+		left_chars += strlen(cur_symb);
+		if (sep_by_space != 0)
+			left_chars++;
+	}
+
+	switch (sign_posn) {
+		case 1:
+			left_chars += strlen(signstr);
+			break;
+		case 3:
+		case 4:
+			if (cs_precedes != 0)
+				left_chars += strlen(signstr);
+	}
+	return (left_chars);
+}
+
+static int
+get_groups(int size, char *grouping) {
+
+	int	chars = 0;
+
+	if (*grouping == CHAR_MAX || *grouping <= 0)	/* no grouping ? */
+		return (0);
+
+	while (size > (int)*grouping) {
+		chars++;
+		size -= (int)*grouping++;
+		/* no more grouping ? */
+		if (*grouping == CHAR_MAX)
+			break;
+		/* rest grouping with same value ? */
+		if (*grouping == 0) {
+			chars += (size - 1) / *(grouping - 1);
+			break;
+		}
+	}
+	return (chars);
+}
+
+/* convert double to ASCII */
+static char *
+__format_grouped_double(double value, int *flags,
+			int left_prec, int right_prec, int pad_char) {
+
+	char		*rslt;
+	char		*avalue;
+	int		avalue_size;
+	char		fmt[32];
+
+	size_t		bufsize;
+	char		*bufend;
+
+	int		padded;
+
+	struct lconv	*lc = localeconv();
+	char		*grouping;
+	char		decimal_point;
+	char		thousands_sep;
+
+	int groups = 0;
+
+	grouping = lc->mon_grouping;
+	decimal_point = *lc->mon_decimal_point;
+	if (decimal_point == '\0')
+		decimal_point = *lc->decimal_point;
+	thousands_sep = *lc->mon_thousands_sep;
+	if (thousands_sep == '\0')
+		thousands_sep = *lc->thousands_sep;
+
+	/* fill left_prec with default value */
+	if (left_prec == -1)
+		left_prec = 0;
+
+	/* fill right_prec with default value */
+	if (right_prec == -1) {
+                if (*flags & USE_INTL_CURRENCY)
+                        right_prec = lc->int_frac_digits;
+                else
+                        right_prec = lc->frac_digits;
+
+		if (right_prec == CHAR_MAX)	/* POSIX locale ? */
+			right_prec = 2;
+	}
+
+	if (*flags & NEED_GROUPING)
+		left_prec += get_groups(left_prec, grouping);
+
+	/* convert to string */
+	snprintf(fmt, sizeof(fmt), "%%%d.%df", left_prec + right_prec + 1,
+	    right_prec);
+	avalue_size = asprintf(&avalue, fmt, value);
+	if (avalue_size < 0)
+		return (NULL);
+
+	/* make sure that we've enough space for result string */
+	bufsize = strlen(avalue)*2+1;
+	rslt = calloc(1, bufsize);
+	if (rslt == NULL) {
+		free(avalue);
+		return (NULL);
+	}
+	bufend = rslt + bufsize - 1;	/* reserve space for trailing '\0' */
+
+	/* skip spaces at beggining */
+	padded = 0;
+	while (avalue[padded] == ' ') {
+		padded++;
+		avalue_size--;
+	}
+
+	if (right_prec > 0) {
+		bufend -= right_prec;
+		memcpy(bufend, avalue + avalue_size+padded-right_prec,
+		    right_prec);
+		*--bufend = decimal_point;
+		avalue_size -= (right_prec + 1);
+	}
+
+	if ((*flags & NEED_GROUPING) &&
+	    thousands_sep != '\0' &&	/* XXX: need investigation */
+	    *grouping != CHAR_MAX &&
+	    *grouping > 0) {
+		while (avalue_size > (int)*grouping) {
+			GRPCPY(*grouping);
+			GRPSEP;
+			grouping++;
+
+			/* no more grouping ? */
+			if (*grouping == CHAR_MAX)
+				break;
+
+			/* rest grouping with same value ? */
+			if (*grouping == 0) {
+				grouping--;
+				while (avalue_size > *grouping) {
+					GRPCPY(*grouping);
+					GRPSEP;
+				}
+			}
+		}
+		if (avalue_size != 0)
+			GRPCPY(avalue_size);
+		padded -= groups;
+
+	} else {
+		bufend -= avalue_size;
+		memcpy(bufend, avalue+padded, avalue_size);
+		if (right_prec == 0)
+			padded--;	/* decrease assumed $decimal_point */
+	}
+
+	/* do padding with pad_char */
+	if (padded > 0) {
+		bufend -= padded;
+		memset(bufend, pad_char, padded);
+	}
+
+	bufsize = bufsize - (bufend - rslt) + 1;
+	memmove(rslt, bufend, bufsize);
+	free(avalue);
+	return (rslt);
+}
diff -ruN src54-orig/include/monetary.h src/include/monetary.h
--- src54-orig/include/monetary.h	Wed Dec 31 19:00:00 1969
+++ src/include/monetary.h	Mon Mar 24 11:18:23 2014
@@ -0,0 +1,52 @@
+/*-
+ * Copyright (c) 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * From FreeBSD
+ */
+
+#ifndef _MONETARY_H_
+#define	_MONETARY_H_
+
+#include <sys/cdefs.h>
+#include <sys/_types.h>
+
+#ifndef _SIZE_T_DECLARED
+typedef	__size_t	size_t;
+#define	_SIZE_T_DECLARED
+#endif
+
+#ifndef _SSIZE_T_DECLARED
+typedef	__ssize_t	ssize_t;
+#define	_SSIZE_T_DECLARED
+#endif
+
+__BEGIN_DECLS
+#ifdef _XLOCALE_H_
+#include <xlocale.h>
+#endif
+ssize_t	strfmon(char * __restrict, size_t, const char * __restrict, ...);
+__END_DECLS
+
+#endif /* !_MONETARY_H_ */
diff -ruN src56-orig/include/Makefile src/include/Makefile
--- src56-orig/include/Makefile	Wed Apr  2 23:43:56 2014
+++ src/include/Makefile	Thu Apr  3 09:30:29 2014
@@ -19,7 +19,7 @@
 	icdb.h ieeefp.h ifaddrs.h inttypes.h iso646.h \
 	kvm.h \
 	langinfo.h libgen.h limits.h link.h link_elf.h locale.h login_cap.h \
-	math.h md5.h memory.h \
+	math.h md5.h memory.h monetary.h \
 	ndbm.h netdb.h netgroup.h nlist.h nl_types.h \
 	paths.h poll.h pthread.h pthread_np.h pwd.h \
 	ranlib.h readpassphrase.h regex.h resolv.h rmd160.h \
diff -ruN src59-orig/lib/libc/Symbols.list src/lib/libc/Symbols.list
--- src59-orig/lib/libc/Symbols.list	Wed Nov 18 11:50:08 2015
+++ src/lib/libc/Symbols.list	Sat May 14 05:28:17 2016
@@ -1650,6 +1650,7 @@
 mktime
 offtime
 posix2time
+strfmon
 strftime
 strptime
 time2posix
diff -ruN src59-orig/lib/libc/hidden/monetary.h src/lib/libc/hidden/monetary.h
--- src59-orig/lib/libc/hidden/monetary.h	Wed Dec 31 19:00:00 1969
+++ src/lib/libc/hidden/monetary.h	Thu Aug 18 23:46:00 2016
@@ -0,0 +1,16 @@
+/*
+ * Public domain according to Colombian Legislation.
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2016. vtamara@pasosdeJesus.org 
+ *
+ * $adJ$
+ */
+
+#ifndef _LIBC_MONETARY_H_
+#define _LIBC_MONETARY_H_
+
+#include_next <monetary.h>
+
+PROTO_STD_DEPRECATED(strfmon);
+
+#endif /* !_LIBC_MONETARY_H_ */
