diff -u src54-mon/regress/lib/libc/locale/Makefile src/regress/lib/libc/locale/Makefile
--- src54-mon/regress/lib/libc/locale/Makefile	Tue Dec  3 12:26:53 2013
+++ src/regress/lib/libc/locale/Makefile	Tue Dec  3 12:58:34 2013
@@ -1,5 +1,5 @@
 # $OpenBSD: Makefile,v 1.7 2020/01/13 15:35:57 bluhm Exp $
 
-SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb check_time check_collate check_monetary
+SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb check_time check_collate check_monetary check_numeric
 
 .include <bsd.subdir.mk>
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/regress/lib/libc/locale/check_numeric/Makefile src/regress/lib/libc/locale/check_numeric/Makefile
--- src55-orig/regress/lib/libc/locale/check_numeric/Makefile	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_numeric/Makefile	Mon Nov 11 12:01:52 2013
@@ -0,0 +1,11 @@
+
+NOMAN=
+PROG=check_numeric
+
+CFLAGS=-g
+
+
+run-regress-check_numeric: ${PROG}
+	./${PROG} >/dev/null
+
+.include <bsd.regress.mk>
diff -ruN -x obj -x CVS -x *~ -x *orig src54-mon/regress/lib/libc/locale/check_numeric/check_numeric.c src/regress/lib/libc/locale/check_numeric/check_numeric.c
--- src54-mon/regress/lib/libc/locale/check_numeric/check_numeric.c	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_numeric/check_numeric.c	Tue Dec 10 21:46:25 2013
@@ -0,0 +1,238 @@
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org
+ *
+ * $adJ$
+ */
+
+#include <float.h>
+#include <langinfo.h>
+#include <locale.h>
+#include <math.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+int bad = 0;
+
+#define p(t) printf("%s:\t ",#t); \
+	if (t) { \
+		printf("\x1b[38;5;2mOK\x1b[0m\n"); \
+	} else { \
+		bad++; \
+		printf("\x1b[38;5;1mERROR\x1b[0m\n"); \
+	}
+
+/** Function adapted from lnumeric.c */
+void
+m_numericdebug(struct lconv *p) {
+	printf( "decimal_point = %s\n"
+			"thousands_sep = %s\n"
+			"grouping = %d\n",
+			p->decimal_point,
+			p->thousands_sep,
+			p->grouping[0]
+	      );
+}
+
+void test_posix()
+{
+	char nom[256];
+	char col[512];
+	char *nl;
+	char *enc[]= { "UTF-8" };
+	struct lconv *p;
+	int i;
+	for(i = 0; i < sizeof(enc) / sizeof(char *) ; i++) {
+		snprintf(nom, sizeof(nom), "POSIX.%s", enc[i]);
+		printf("nom=%s\n", nom);
+		nl = setlocale(LC_ALL, nom);
+		printf("locale %s\n", nl);
+		p = localeconv();
+
+		m_numericdebug(p);
+		p(strcmp(p->decimal_point, ".") == 0);
+		p(strcmp(p->thousands_sep, "") == 0);
+		p(p->grouping[0] == 127);
+
+		snprintf(col, sizeof(col), "%f", 1000000.01);
+		p(strcmp(col, "1000000.010000") == 0);
+		snprintf(col, sizeof(col), "%'d", 1000000);
+		printf("col=%s\n", col);
+		p(strcmp(col, "1000000") == 0);
+		snprintf(col, sizeof(col), "%'f", 1000000.01);
+		printf("col=%s\n", col);
+		p(strcmp(col, "1000000.010000") == 0);
+		p(strcmp(nl_langinfo(RADIXCHAR), ".") == 0);
+		p(strcmp(nl_langinfo(THOUSEP), "") == 0);
+	}
+}
+
+// Locales where radix symbol is command, and there is grouping
+// of thousands separated by dot
+// Not sure if any of es_CR, es_MX, es_PR, es_SV should be here
+// http://es.wikipedia.org/wiki/Separador_decimal#cite_note-ref_duplicada_1-3
+void test_radixcomma_thousandsdot()
+{
+	char *c[] = { 
+		"es_AR", "es_BO", "es_CL", "es_CO", "es_DO", "es_EC", 
+		"es_ES", "es_GT", "es_NI", "es_PA", "es_PE", 
+		"es_PY", "es_UY", "es_VE", "pt_BR"
+	};
+	char *enc[]= { "UTF-8" };
+	struct lconv *p;
+	char nom[256];
+	char col[512];
+	char *nl;
+	int i, j;
+	float fl;
+	double dl;
+	long double ldl;
+
+	for(i = 0; i < sizeof(enc) / sizeof(char *) ; i++) {
+		for(j = 0; j < sizeof(c) / sizeof(char *) ; j++) {
+			snprintf(nom, sizeof(nom), "%s.%s", c[j], enc[i]);
+			printf("nom=%s\n", nom);
+			nl = setlocale(LC_ALL, nom);
+			printf("locale %s\n", nl);
+			p = localeconv();
+
+			p(strcmp(p->decimal_point, ",") == 0);
+			p(strcmp(p->thousands_sep, ".") == 0);
+			p(p->grouping[0] == 3);
+
+			snprintf(col, sizeof(col), "%f", 1000000.01);
+			p(strcmp(col, "1000000,010000") == 0);
+			snprintf(col, sizeof(col), "%'d", 1000000);
+			printf("col=%s\n", col);
+			p(strcmp(col, "1.000.000") == 0);
+			snprintf(col, sizeof(col), "%'f", 1000000.01);
+			printf("col=%s\n", col);
+			p(strcmp(col, "1.000.000,010000") == 0);
+			p(strcmp(nl_langinfo(RADIXCHAR), ",") == 0);
+			p(strcmp(nl_langinfo(THOUSEP), ".") == 0);
+
+			fl = strtof("3,1", NULL);
+			p(fabs(fl - 3.1) < FLT_EPSILON);
+			dl = strtod("3,1", NULL);
+			p(fabs(dl - 3.1) < DBL_EPSILON);
+			ldl = strtold("3,1", NULL);
+			p(fabsl(ldl - 3.1) < DBL_EPSILON);
+			sscanf("3,1", "%f", &fl);
+			p(fabs(fl - 3.1) < FLT_EPSILON);
+		}
+	}
+}
+
+void test_radixdot_thousandscomma() 
+{
+	char *c[] = { 
+		"en", "es_CR", "es_HN", "es_MX", "es_PR", "es_SV", "es_US"
+	};
+	char *enc[]= { "UTF-8" };
+	struct lconv *p;
+	char nom[256];
+	char col[512];
+	char *nl;
+	int i, j;
+
+	for(i = 0; i < sizeof(enc) / sizeof(char *) ; i++) {
+		for(j = 0; j < sizeof(c) / sizeof(char *) ; j++) {
+			snprintf(nom, sizeof(nom), "%s.%s", c[j], enc[i]);
+			printf("nom=%s\n", nom);
+			nl = setlocale(LC_ALL, nom);
+			printf("locale %s\n", nl);
+			p = localeconv();
+
+			p(strcmp(p->decimal_point, ".") == 0);
+			p(strcmp(p->thousands_sep, ",") == 0);
+			p(p->grouping[0] == 3);
+
+			snprintf(col, sizeof(col), "%f", 1000000.01);
+			p(strcmp(col, "1000000.010000") == 0);
+			snprintf(col, sizeof(col), "%'d", 1000000);
+			printf("col=%s\n", col);
+			p(strcmp(col, "1,000,000") == 0);
+			snprintf(col, sizeof(col), "%'f", 1000000.01);
+			printf("col=%s\n", col);
+			p(strcmp(col, "1,000,000.010000") == 0);
+			p(strcmp(nl_langinfo(RADIXCHAR), ".") == 0);
+			p(strcmp(nl_langinfo(THOUSEP), ",") == 0);
+		}
+	}
+}
+
+void test_switch()
+{
+	char nom[256];
+	char ol[512];
+	char op[512];
+	char *nl;
+	struct lconv *p;
+	int i;
+	nl = setlocale(LC_NUMERIC, NULL);
+	snprintf(ol, sizeof(ol), "%s", nl);	
+	printf("lc_numeric %s\n", nl);
+	p = localeconv();
+	snprintf(op, sizeof(op), "%s", p->decimal_point);
+
+
+	nl = setlocale(LC_NUMERIC, "C");
+	printf("lc_numeric %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ".") == 0);
+
+	nl = setlocale(LC_NUMERIC, ol);
+	printf("lc_numeric %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, op) == 0);
+
+
+	nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	printf("locale %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ",") == 0);
+
+	nl = setlocale(LC_NUMERIC, "algo_loco.UTF-8");
+	printf("locale %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ".") == 0);
+
+	nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	printf("locale %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ",") == 0);
+
+
+	nl = setlocale(LC_ALL, "algo_loco.UTF-8");
+	printf("locale %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ".") == 0);
+
+	//nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	//printf("locale %s\n", nl);
+	//p = localeconv();
+	//p(strcmp(p->decimal_point, ",") == 0);
+
+	// twice to same locale
+	//nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	//printf("locale %s\n", nl);
+	//p = localeconv();
+	//p(strcmp(p->decimal_point, ",") == 0);
+
+	nl = setlocale(LC_ALL, "C");
+	printf("locale %s\n", nl);
+	p = localeconv();
+	p(strcmp(p->decimal_point, ".") == 0);
+}
+
+int main()
+{
+	test_switch();
+	test_posix();
+	test_radixcomma_thousandsdot();
+	test_radixdot_thousandscomma();
+	
+	return bad != 0;
+}
