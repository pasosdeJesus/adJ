diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/locale/_def_numeric.c src/lib/libc/locale/_def_numeric.c
--- src55-orig/lib/libc/locale/_def_numeric.c	Mon Aug  8 03:05:35 2005
+++ src/lib/libc/locale/_def_numeric.c	Wed Dec 31 19:00:00 1969
@@ -3,15 +3,102 @@
  * Written by J.T. Conklin <jtc@netbsd.org>.
  * Public domain.
  */
-
+/*
+ * Copyright (c) 2000, 2001 Alexey Zelkin <phantom@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+ 
+#include <limits.h>
 #include <locale.h>
+#include <string.h>
+
 #include "localedef.h"
+#include "locale/loadtextcat.h"
 
+static char    numempty[] = { CHAR_MAX, '\0' };
+
 const _NumericLocale _DefaultNumericLocale =
 {
 	".",
 	"",
-	""
+	numempty
 };
 
 const _NumericLocale *_CurrentNumericLocale = &_DefaultNumericLocale;
+
+extern const char *__fix_locale_grouping_str(const char *);
+
+static char *_numeric_buffer = NULL;
+
+_NumericLocale _numeric_locale;
+
+/* Used by localeconv, should be set to 0 only by that function */
+extern int __nlocale_changed;
+
+/* Loads numeric locale from file in text format */
+int
+__numeric_load_locale(const char *name)
+{
+	int ret = 0;
+	char error_buf[2048];
+	int changed;
+
+	if (strcmp(name, "C") == 0 || strcmp(name, "POSIX") == 0) {
+		if (_CurrentNumericLocale != &_DefaultNumericLocale) {
+			__nlocale_changed = 1;
+			_CurrentNumericLocale = &_DefaultNumericLocale;
+		}
+	} else {
+		ret = __loadtextcat(name, LC_NUMERIC, &changed,
+				&_numeric_buffer, 
+				(const char**)&_numeric_locale, 
+				sizeof(_numeric_locale), 
+				error_buf, sizeof(error_buf));
+		if (ret == 0 && changed == 1) {
+			(void)__fix_locale_grouping_str(_numeric_locale.grouping);
+			__nlocale_changed = 1;
+			_CurrentNumericLocale = &_numeric_locale;
+		}
+	}
+	return ret;
+}
+
+#ifdef LOCALE_DEBUG
+void
+numericdebug(void) {
+	printf(	"decimal_point = %s\n"
+			"thousands_sep = %s\n"
+			"grouping = %s\n",
+			_numeric_locale.decimal_point,
+			_numeric_locale.thousands_sep,
+			_numeric_locale.grouping
+	      );
+}
+#endif /* LOCALE_DEBUG */
diff -ruN -x *~ -x *orig src55-orig/lib/libc/locale/loadtextcat.c src/lib/libc/locale/loadtextcat.c
--- src55-orig/lib/libc/locale/loadtextcat.c	Sun Oct  6 20:04:49 2013
+++ src/lib/libc/locale/loadtextcat.c	Wed Dec 11 08:16:55 2013
@@ -39,6 +39,9 @@
 /* Amount of lines in a text file with LC_MONETARY locale */
 #define LC_MONETARY_LINES 21
 
+/* Amount of lines in a text file with LC_NUMERIC locale */
+#define LC_NUMERIC_LINES 3
+
 /* Amount of lines in a text file with LC_TIME locale */
 #define LC_TIME_LINES 45
 
@@ -185,6 +188,10 @@
 		case LC_MONETARY:
 			cfname = "LC_MONETARY";
 			locale_buf_lines = LC_MONETARY_LINES;
+			break;
+		case LC_NUMERIC:
+			cfname = "LC_NUMERIC";
+			locale_buf_lines = LC_NUMERIC_LINES;
 			break;
 		case LC_TIME:
 			cfname = "LC_TIME";
diff -ruN -x obj -x CVS -x *~ -x *orig src54-mon/lib/libc/locale/setlocale.c src/lib/libc/locale/setlocale.c
--- src54-mon/lib/libc/locale/setlocale.c	Tue Dec  3 12:26:37 2013
+++ src/lib/libc/locale/setlocale.c	Tue Dec  3 12:51:12 2013
@@ -54,6 +54,7 @@
 
 extern int __time_load_locale(const char *name);
 extern int __monetary_load_locale(const char *name);
+extern int __numeric_load_locale(const char *name);
 
 static int
 changegl(int category, const char *locname, char **gl, char **oldgl)
@@ -87,6 +88,10 @@
 					return -1;
 				}
 			case LC_NUMERIC:
+				if (__numeric_load_locale(locname) != 0) {
+					free(cp);
+					return -1;
+				}
 				break;
 			case LC_TIME:
 				if (__time_load_locale(locname) != 0) {
diff -ruN src55-orig/lib/libc/stdio/printf.3 src/lib/libc/stdio/printf.3
--- src55-orig/lib/libc/stdio/printf.3	Sun Oct  6 20:04:49 2013
+++ src/lib/libc/stdio/printf.3	Mon Nov 11 21:11:57 2013
@@ -192,6 +192,10 @@
 .It Ar flags
 Zero or more of the following flag characters can be given:
 .Bl -tag -width 11n
+.It Cm ' Pq apostrophe
+specifying thousands' grouping of the integer part of a decimal conversion
+(%i, %d, %u, %f, %F, %g, %G).  The current locale is used to separate in
+groups and to use a thousands' separator.
 .It Cm # Pq hash
 Use an alternate form for the output.
 The effect differs depending on the conversion specifier.
@@ -902,7 +906,8 @@
 .Sh SEE ALSO
 .Xr printf 1 ,
 .Xr scanf 3 ,
-.Xr wprintf 3
+.Xr wprintf 3 ,
+.Xr localeconv 3
 .Sh STANDARDS
 The
 .Fn fprintf ,
diff -ruN -x obj -x CVS -x *~ -x *orig src55-orig/lib/libc/stdio/vfprintf.c src/lib/libc/stdio/vfprintf.c
--- src55-orig/lib/libc/stdio/vfprintf.c	Fri Nov  8 21:13:37 2013
+++ src/lib/libc/stdio/vfprintf.c	Mon Nov 11 11:56:21 2013
@@ -6,6 +6,11 @@
  * This code is derived from software contributed to Berkeley by
  * Chris Torek.
  *
+ * Copyright (c) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ * Portions of this software were developed by David Chisnall
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -53,8 +58,9 @@
 #include <syslog.h>
 #include <wchar.h>
 
-#include "local.h"
 #include "fvwrite.h"
+#include "local.h"
+#include "localedef.h"
 
 union arg {
 	int			intarg;
@@ -88,6 +94,15 @@
 #endif
 };
 
+struct grouping_state {
+       const char *thousands_sep;    /* locale-specific thousands separator */
+       int thousep_len;        /* length of thousands_sep */
+       const char *grouping;   /* locale-specific numeric grouping rules */
+       int lead;               /* sig figs before decimal or group sep */
+       int nseps;              /* number of group separators with ' */
+       int nrepeats;           /* number of repeats of the last group */
+};
+
 static int __find_arguments(const char *fmt0, va_list ap, union arg **argtable,
     size_t *argtablesiz);
 static int __grow_type_table(unsigned char **typetable, int *tablesize);
@@ -253,6 +268,7 @@
 #define SIZEINT		0x0400		/* (signed) size_t */
 #define CHARINT		0x0800		/* 8 bit integer */
 #define MAXINT		0x1000		/* largest integer size (intmax_t) */
+#define GROUPING	0x2000		/* largest integer size (intmax_t) */
 
 int
 vfprintf(FILE *fp, const char *fmt0, __va_list ap)
@@ -266,6 +282,76 @@
 }
 DEF_STRONG(vfprintf);
 
+
+/*
+ * Initialize the thousands' grouping state in preparation to print a
+ * number with ndigits digits. This routine returns the total number
+ * of bytes that will be needed.
+ */
+static int
+grouping_init(struct grouping_state *gs, int ndigits)
+{
+	struct lconv *locale;
+
+	locale = localeconv();
+	gs->grouping = locale->grouping;
+	gs->thousands_sep = locale->thousands_sep;
+	gs->thousep_len = strlen(gs->thousands_sep);
+
+	gs->nseps = gs->nrepeats = 0;
+	gs->lead = ndigits;
+	while (*gs->grouping != CHAR_MAX) {
+		if (gs->lead <= *gs->grouping)
+			break;
+		gs->lead -= *gs->grouping;
+		if (*(gs->grouping+1)) {
+			gs->nseps++;
+			gs->grouping++;
+		} else
+			gs->nrepeats++;
+	}
+	return ((gs->nseps + gs->nrepeats) * gs->thousep_len);
+}
+
+
+
+
+char *
+__print_intdec(int flags, uintmax_t _umax, char *cp, 
+		struct grouping_state gs)
+{
+	const char *grp = NULL;	/* Size of next group of digits */
+	int ndig, i;
+
+	/* many numbers are 1 digit */
+	if (flags & GROUPING) {
+		grouping_init(&gs, 0);
+		grp = gs.grouping;
+	} 
+	ndig = 0;
+	while (_umax >= 10) {
+		*--cp = to_char(_umax % 10);
+		ndig++;
+		if ((flags & GROUPING) && *grp != CHAR_MAX
+				&& ndig == *grp) {
+			for (i = gs.thousep_len - 1; i >= 0; i--) { 
+				*--cp = gs.thousands_sep[i];
+			}
+			ndig = 0;
+			/*
+			 * If (*(grp+1) == '\0') then we have to
+			 * use *grp character (last grouping rule)
+			 * for all next cases
+			 */
+			if (*(grp+1) != '\0')
+				grp++;
+		}
+		_umax /= 10;
+	}
+	*--cp = to_char(_umax);
+	return cp;
+}
+
 int
 __vfprintf(FILE *fp, const char *fmt0, __va_list ap)
 {
@@ -279,6 +365,7 @@
 	int width;		/* width from format (%8d), or 0 */
 	int prec;		/* precision from format; <0 for N/A */
 	char sign;		/* sign prefix (' ', '+', '-', or \0) */
+	struct grouping_state gs; /* thousands' grouping info */
 #ifdef FLOATING_POINT
 	/*
 	 * We can decompose the printed representation of floating
@@ -294,7 +381,10 @@
 	 * D:	expchar holds this character; '\0' if no exponent, e.g. %f
 	 * F:	at least two digits for decimal, at least one digit for hex
 	 */
-	char *decimal_point = NULL;
+	const char *decimal_point = nl_langinfo(RADIXCHAR);
+	if (strlen(decimal_point) > 1) {
+		decimal_point = "."; // POSIX
+	}
 	int signflag;		/* true if float is negative */
 	union {			/* floating point arguments %[aAeEfFgG] */
 		double dbl;
@@ -348,7 +438,7 @@
 	 * BEWARE, these `goto error' on error, and PAD uses `n'.
 	 */
 #define	PRINT(ptr, len) do { \
-	iovp->iov_base = (ptr); \
+	iovp->iov_base = (char *)(ptr); \
 	iovp->iov_len = (len); \
 	uio.uio_resid += (len); \
 	iovp++; \
@@ -381,7 +471,28 @@
 	uio.uio_iovcnt = 0; \
 	iovp = iov; \
 } while (0)
+/*
+ * Print a number with thousands' separators.
+ */
+#define	GROUPINGPRINT(gs, cp, ep) do {	\
+	PRINTANDPAD((cp), (ep), (gs)->lead, zeroes); \
+	cp += (gs)->lead; \
+	while ((gs)->nseps > 0 || (gs)->nrepeats > 0) { \
+		if ((gs)->nrepeats > 0) \
+			(gs)->nrepeats--; \
+		else { \
+			(gs)->grouping--; \
+			(gs)->nseps--; \
+		} \
+		PRINT((gs)->thousands_sep, (gs)->thousep_len); \
+		PRINTANDPAD((cp), (ep), *(gs)->grouping, zeroes); \
+		cp += *(gs)->grouping; \
+	} \
+	if ((cp) > (ep)) \
+		cp = (ep); \
+} while(0)
 
+
 	/*
 	 * To extend shorts properly, we need both signed and unsigned
 	 * argument extraction methods.
@@ -501,6 +612,7 @@
 		dprec = 0;
 		width = 0;
 		prec = -1;
+		gs.grouping = NULL;
 		sign = '\0';
 		ox[1] = '\0';
 
@@ -519,7 +631,7 @@
 			flags |= ALT;
 			goto rflag;
 		case '\'':
-			/* grouping not implemented */
+			flags |= GROUPING;
 			goto rflag;
 		case '*':
 			/*
@@ -794,6 +906,8 @@
 				/* space for decimal pt and following digits */
 				if (prec || flags & ALT)
 					size += prec + 1;
+				if ((flags & GROUPING) && expt > 0) 
+					size += grouping_init(&gs, expt);
 				lead = expt;
 			}
 			break;
@@ -901,7 +1015,7 @@
 			/* leading 0x/X only if non-zero */
 			if (flags & ALT && _umax != 0)
 				ox[1] = ch;
-
+			flags &=  ~GROUPING;
 			/* unsigned conversions */
 nosign:			sign = '\0';
 			/*
@@ -936,12 +1050,8 @@
 					break;
 
 				case DEC:
-					/* many numbers are 1 digit */
-					while (_umax >= 10) {
-						*--cp = to_char(_umax % 10);
-						_umax /= 10;
-					}
-					*--cp = to_char(_umax);
+					cp = __print_intdec(flags, _umax, 
+							cp, gs);
 					break;
 
 				case HEX:
@@ -1015,10 +1125,12 @@
 		/* the string or number proper */
 #ifdef FLOATING_POINT
 		if ((flags & FPT) == 0) {
-			PRINT(cp, size);
+			if (gs.grouping) {
+				GROUPINGPRINT(&gs, cp, buf+BUF);
+			} else {
+				PRINT(cp, size);
+			}
 		} else {	/* glue together f_p fragments */
-			if (decimal_point == NULL)
-				decimal_point = nl_langinfo(RADIXCHAR);
 			if (!expchar) {	/* %[fF] or sufficiently short %[gG] */
 				if (expt <= 0) {
 					PRINT(zeroes, 1);
@@ -1028,8 +1140,14 @@
 					/* already handled initial 0's */
 					prec += expt;
  				} else {
-					PRINTANDPAD(cp, dtoaend, lead, zeroes);
-					cp += lead;
+					if (gs.grouping) { 
+						GROUPINGPRINT(&gs, cp, 
+								dtoaend);
+					} else {
+						PRINTANDPAD(cp, dtoaend, 
+								lead, zeroes);
+						cp += lead;
+					}
 					if (prec || flags & ALT)
 						PRINT(decimal_point, 1);
 				}
diff -ruN -x *~ -x *orig -x *rej src54-mon/lib/libc/stdio/scanf.3 src/lib/libc/stdio/scanf.3
--- src54-mon/lib/libc/stdio/scanf.3	Sun Oct  6 20:04:49 2013
+++ src/lib/libc/stdio/scanf.3	Tue Dec 10 06:04:34 2013
@@ -295,7 +295,9 @@
 Equivalent to
 .Cm f .
 .It Cm fF
-Matches an optionally signed floating-point number;
+Matches an optionally signed floating-point number that uses
+the decimal point of the current LC_NUMERIC category of the locale
+.Xr setlocale(3) ;
 the next pointer must be a pointer to
 .Vt float .
 .It Cm gG
diff -ruN -x *~ -x *orig -x *rej src54-mon/lib/libc/stdio/vfscanf.c src/lib/libc/stdio/vfscanf.c
--- src54-mon/lib/libc/stdio/vfscanf.c	Sat Apr 27 21:08:40 2013
+++ src/lib/libc/stdio/vfscanf.c	Mon Dec  9 10:02:00 2013
@@ -32,13 +32,14 @@
  */
 
 #include <ctype.h>
-#include <wctype.h>
 #include <inttypes.h>
+#include <locale.h>
 #include <stdarg.h>
 #include <stddef.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <wctype.h>
 #include "local.h"
 
 #ifdef FLOATING_POINT
@@ -110,6 +111,7 @@
 	int base;		/* base argument to strtoimax/strtouimax */
 	char ccltab[256];	/* character class table for %[...] */
 	char buf[BUF];		/* buffer for numeric conversions */
+	const char *decimal_point;
 #ifdef SCANF_WIDE_CHAR
 	wchar_t *wcp;		/* handy wide character pointer */
 	size_t nconv;		/* length of multibyte sequence converted */
@@ -769,6 +771,10 @@
 				width = sizeof(buf) - 2;
 			width++;
 #endif
+			decimal_point=localeconv()->decimal_point;
+			if (strlen(decimal_point) > 1) {
+				decimal_point="."; // POSIX
+			}
 			flags |= SIGNOK | NDIGITS | DPTOK | EXPOK;
 			for (p = buf; width; width--) {
 				c = *fp->_p;
@@ -776,6 +782,10 @@
 				 * This code mimicks the integer conversion
 				 * code, but is much simpler.
 				 */
+				if (decimal_point[0] == c  && (flags & DPTOK)) {
+					flags &= ~(SIGNOK | DPTOK);
+					goto fok;
+				}
 				switch (c) {
 
 				case '0': case '1': case '2': case '3':
@@ -790,18 +800,12 @@
 						goto fok;
 					}
 					break;
-				case '.':
-					if (flags & DPTOK) {
-						flags &= ~(SIGNOK | DPTOK);
-						goto fok;
-					}
-					break;
 				case 'e': case 'E':
 					/* no exponent without some digits */
 					if ((flags&(NDIGITS|EXPOK)) == EXPOK) {
 						flags =
-						    (flags & ~(EXPOK|DPTOK)) |
-						    SIGNOK | NDIGITS;
+							(flags & ~(EXPOK|DPTOK)) |
+							SIGNOK | NDIGITS;
 						goto fok;
 					}
 					break;
diff -ruN -x *~ -x *orig -x *rej src54-mon/lib/libc/stdlib/strtod.3 src/lib/libc/stdlib/strtod.3
--- src54-mon/lib/libc/stdlib/strtod.3	Sun Oct  6 20:04:50 2013
+++ src/lib/libc/stdlib/strtod.3	Tue Dec 10 06:07:04 2013
@@ -80,6 +80,9 @@
 .Pq Ql -
 followed by a sequence of digits optionally containing
 a decimal-point character, optionally followed by an exponent.
+The decimal-point character depends on the category LC_NUMERIC
+of the current locale,
+.Xr setlocale 3 .
 An exponent consists of an
 .Sq E
 or
diff -ruN -x obj -x CVS -x *~ -x *orig src56-orig/lib/libc/locale/localeconv.c src/lib/libc/locale/localeconv.c
--- src56-orig/lib/libc/locale/localeconv.c	Fri Sep 19 13:07:17 2014
+++ src/lib/libc/locale/localeconv.c	Fri Sep 19 14:49:15 2014
@@ -17,7 +17,7 @@
  * locale has been changed.
  */
 int __mlocale_changed = 1;
-static int __nlocale_changed = 1;
+int __nlocale_changed = 1;
 
 /*
  * Return the current locale conversion.
