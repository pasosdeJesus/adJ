diff -ruN src62-orig/lib/libc/time/strftime_l.c src/lib/libc/time/strftime_l.c
--- src62-orig/lib/libc/time/strftime_l.c 	Mon Sep  4 22:16:14 2017
+++ src/lib/libc/time/strftime_l.c	Tue Dec  5 21:27:19 2017
@@ -3,12 +3,499 @@
  * Written in 2017 by Ingo Schwarze <schwarze@openbsd.org>.
  * Released into the public domain.
  */
+/*
+** Copyright (c) 1989, 1993
+**	The Regents of the University of California.  All rights reserved.
+**
+** Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions
+** are met:
+** 1. Redistributions of source code must retain the above copyright
+**    notice, this list of conditions and the following disclaimer.
+** 2. Redistributions in binary form must reproduce the above copyright
+**    notice, this list of conditions and the following disclaimer in the
+**    documentation and/or other materials provided with the distribution.
+** 3. Neither the name of the University nor the names of its contributors
+**    may be used to endorse or promote products derived from this software
+**    without specific prior written permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+** ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+** OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+** SUCH DAMAGE.
+*/
 
-#include <time.h>
 
+#include <fcntl.h>
+#include <locale.h>
+#include <stdio.h>
+
+#include "localedef.h"
+#include "locale/xlocale_private.h"
+#include "private.h"
+#include "tzfile.h"
+
+static char *	_add(const char *, char *, const char *);
+static char *	_conv(int, const char *, char *, const char *);
+static char *	_fmt(const char *, const struct tm *, char *, const char *,
+			int *, locale_t);
+static char *	_yconv(int, int, int, int, char *, const char *);
+
+extern char *	tzname[];
+
+#define IN_NONE	0
+#define IN_SOME	1
+#define IN_THIS	2
+#define IN_ALL	3
+
 size_t
-strftime_l(char *s, size_t maxsize, const char *format, const struct tm *t,
-    locale_t locale __attribute__((__unused__)))
+strftime_l(char *s, size_t maxsize, const char *format, const struct tm *t, 
+		locale_t loc)
 {
-	return strftime(s, maxsize, format, t);
+	char *	p;
+	int	warn;
+
+	FIX_LOCALE(loc);	
+	tzset();
+	warn = IN_NONE;
+	p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize, &warn,
+			loc);
+	if (p == s + maxsize) {
+		if (maxsize > 0)
+			s[maxsize - 1] = '\0';
+		return 0;
+	}
+	*p = '\0';
+	return p - s;
 }
+DEF_WEAK(strftime_l);
+
+
+static char *
+_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim, 
+		int *warnp, locale_t loc)
+{
+	for ( ; *format; ++format) {
+		if (*format == '%') {
+label:
+			switch (*++format) {
+			case '\0':
+				--format;
+				break;
+			case 'A':
+				pt = _add((t->tm_wday < 0 ||
+					t->tm_wday >= DAYSPERWEEK) ?
+					"?" : __get_current_time_locale(loc)->day[t->tm_wday],
+					pt, ptlim);
+				continue;
+			case 'a':
+				pt = _add((t->tm_wday < 0 ||
+					t->tm_wday >= DAYSPERWEEK) ?
+					"?" : __get_current_time_locale(loc)->abday[t->tm_wday],
+					pt, ptlim);
+				continue;
+			case 'B':
+				pt = _add((t->tm_mon < 0 ||
+					t->tm_mon >= MONSPERYEAR) ?
+					"?" : __get_current_time_locale(loc)->mon[t->tm_mon],
+					pt, ptlim);
+				continue;
+			case 'b':
+			case 'h':
+				pt = _add((t->tm_mon < 0 ||
+					t->tm_mon >= MONSPERYEAR) ?
+					"?" : __get_current_time_locale(loc)->abmon[t->tm_mon],
+					pt, ptlim);
+				continue;
+			case 'C':
+				/*
+				** %C used to do a...
+				**	_fmt("%a %b %e %X %Y", t);
+				** ...whereas now POSIX 1003.2 calls for
+				** something completely different.
+				** (ado, 1993-05-24)
+				*/
+				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 0,
+					pt, ptlim);
+				continue;
+			case 'c':
+				{
+				int warn2 = IN_SOME;
+
+				pt = _fmt(__get_current_time_locale(loc)->d_t_fmt, t, pt, ptlim, &warn2, loc);
+				if (warn2 == IN_ALL)
+					warn2 = IN_THIS;
+				if (warn2 > *warnp)
+					*warnp = warn2;
+				}
+				continue;
+			case 'D':
+				pt = _fmt("%m/%d/%y", t, pt, ptlim, warnp, loc);
+				continue;
+			case 'd':
+				pt = _conv(t->tm_mday, "%02d", pt, ptlim);
+				continue;
+			case 'E':
+			case 'O':
+				/*
+				** C99 locale modifiers.
+				** The sequences
+				**	%Ec %EC %Ex %EX %Ey %EY
+				**	%Od %oe %OH %OI %Om %OM
+				**	%OS %Ou %OU %OV %Ow %OW %Oy
+				** are supposed to provide alternate
+				** representations.
+				*/
+				goto label;
+			case 'e':
+				pt = _conv(t->tm_mday, "%2d", pt, ptlim);
+				continue;
+			case 'F':
+				pt = _fmt("%Y-%m-%d", t, pt, ptlim, warnp, loc);
+				continue;
+			case 'H':
+				pt = _conv(t->tm_hour, "%02d", pt, ptlim);
+				continue;
+			case 'I':
+				pt = _conv((t->tm_hour % 12) ?
+					(t->tm_hour % 12) : 12,
+					"%02d", pt, ptlim);
+				continue;
+			case 'j':
+				pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
+				continue;
+			case 'k':
+				/*
+				** This used to be...
+				**	_conv(t->tm_hour % 12 ?
+				**		t->tm_hour % 12 : 12, 2, ' ');
+				** ...and has been changed to the below to
+				** match SunOS 4.1.1 and Arnold Robbins'
+				** strftime version 3.0. That is, "%k" and
+				** "%l" have been swapped.
+				** (ado, 1993-05-24)
+				*/
+				pt = _conv(t->tm_hour, "%2d", pt, ptlim);
+				continue;
+#ifdef KITCHEN_SINK
+			case 'K':
+				/*
+				** After all this time, still unclaimed!
+				*/
+				pt = _add("kitchen sink", pt, ptlim);
+				continue;
+#endif /* defined KITCHEN_SINK */
+			case 'l':
+				/*
+				** This used to be...
+				**	_conv(t->tm_hour, 2, ' ');
+				** ...and has been changed to the below to
+				** match SunOS 4.1.1 and Arnold Robbin's
+				** strftime version 3.0. That is, "%k" and
+				** "%l" have been swapped.
+				** (ado, 1993-05-24)
+				*/
+				pt = _conv((t->tm_hour % 12) ?
+					(t->tm_hour % 12) : 12,
+					"%2d", pt, ptlim);
+				continue;
+			case 'M':
+				pt = _conv(t->tm_min, "%02d", pt, ptlim);
+				continue;
+			case 'm':
+				pt = _conv(t->tm_mon + 1, "%02d", pt, ptlim);
+				continue;
+			case 'n':
+				pt = _add("\n", pt, ptlim);
+				continue;
+			case 'p':
+				pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
+					__get_current_time_locale(loc)->am_pm[1] :
+					__get_current_time_locale(loc)->am_pm[0],
+					pt, ptlim);
+				continue;
+			case 'R':
+				pt = _fmt("%H:%M", t, pt, ptlim, warnp, loc);
+				continue;
+			case 'r':
+				pt = _fmt(__get_current_time_locale(loc)->t_fmt_ampm, t, pt, ptlim, warnp, loc);
+				continue;
+			case 'S':
+				pt = _conv(t->tm_sec, "%02d", pt, ptlim);
+				continue;
+			case 's':
+				{
+					struct tm	tm;
+					char		buf[INT_STRLEN_MAXIMUM(
+								time_t) + 1];
+					time_t		mkt;
+
+					tm = *t;
+					mkt = mktime(&tm);
+					(void) snprintf(buf, sizeof buf,
+					    "%ld", (long) mkt);
+					pt = _add(buf, pt, ptlim);
+				}
+				continue;
+			case 'T':
+				pt = _fmt("%H:%M:%S", t, pt, ptlim, warnp, loc);
+				continue;
+			case 't':
+				pt = _add("\t", pt, ptlim);
+				continue;
+			case 'U':
+				pt = _conv((t->tm_yday + DAYSPERWEEK -
+					t->tm_wday) / DAYSPERWEEK,
+					"%02d", pt, ptlim);
+				continue;
+			case 'u':
+				/*
+				** From Arnold Robbins' strftime version 3.0:
+				** "ISO 8601: Weekday as a decimal number
+				** [1 (Monday) - 7]"
+				** (ado, 1993-05-24)
+				*/
+				pt = _conv((t->tm_wday == 0) ?
+					DAYSPERWEEK : t->tm_wday,
+					"%d", pt, ptlim);
+				continue;
+			case 'V':	/* ISO 8601 week number */
+			case 'G':	/* ISO 8601 year (four digits) */
+			case 'g':	/* ISO 8601 year (two digits) */
+/*
+** From Arnold Robbins' strftime version 3.0: "the week number of the
+** year (the first Monday as the first day of week 1) as a decimal number
+** (01-53)."
+** (ado, 1993-05-24)
+**
+** From "http://www.ft.uni-erlangen.de/~mskuhn/iso-time.html" by Markus Kuhn:
+** "Week 01 of a year is per definition the first week which has the
+** Thursday in this year, which is equivalent to the week which contains
+** the fourth day of January. In other words, the first week of a new year
+** is the week which has the majority of its days in the new year. Week 01
+** might also contain days from the previous year and the week before week
+** 01 of a year is the last week (52 or 53) of the previous year even if
+** it contains days from the new year. A week starts with Monday (day 1)
+** and ends with Sunday (day 7). For example, the first week of the year
+** 1997 lasts from 1996-12-30 to 1997-01-05..."
+** (ado, 1996-01-02)
+*/
+				{
+					int	year;
+					int	base;
+					int	yday;
+					int	wday;
+					int	w;
+
+					year = t->tm_year;
+					base = TM_YEAR_BASE;
+					yday = t->tm_yday;
+					wday = t->tm_wday;
+					for ( ; ; ) {
+						int	len;
+						int	bot;
+						int	top;
+
+						len = isleap_sum(year, base) ?
+							DAYSPERLYEAR :
+							DAYSPERNYEAR;
+						/*
+						** What yday (-3 ... 3) does
+						** the ISO year begin on?
+						*/
+						bot = ((yday + 11 - wday) %
+							DAYSPERWEEK) - 3;
+						/*
+						** What yday does the NEXT
+						** ISO year begin on?
+						*/
+						top = bot -
+							(len % DAYSPERWEEK);
+						if (top < -3)
+							top += DAYSPERWEEK;
+						top += len;
+						if (yday >= top) {
+							++base;
+							w = 1;
+							break;
+						}
+						if (yday >= bot) {
+							w = 1 + ((yday - bot) /
+								DAYSPERWEEK);
+							break;
+						}
+						--base;
+						yday += isleap_sum(year, base) ?
+							DAYSPERLYEAR :
+							DAYSPERNYEAR;
+					}
+#ifdef XPG4_1994_04_09
+					if ((w == 52 &&
+						t->tm_mon == TM_JANUARY) ||
+						(w == 1 &&
+						t->tm_mon == TM_DECEMBER))
+							w = 53;
+#endif /* defined XPG4_1994_04_09 */
+					if (*format == 'V')
+						pt = _conv(w, "%02d",
+							pt, ptlim);
+					else if (*format == 'g') {
+						*warnp = IN_ALL;
+						pt = _yconv(year, base, 0, 1,
+							pt, ptlim);
+					} else	pt = _yconv(year, base, 1, 1,
+							pt, ptlim);
+				}
+				continue;
+			case 'v':
+				/*
+				** From Arnold Robbins' strftime version 3.0:
+				** "date as dd-bbb-YYYY"
+				** (ado, 1993-05-24)
+				*/
+				pt = _fmt("%e-%b-%Y", t, pt, ptlim, warnp, loc);
+				continue;
+			case 'W':
+				pt = _conv((t->tm_yday + DAYSPERWEEK -
+					(t->tm_wday ?
+					(t->tm_wday - 1) :
+					(DAYSPERWEEK - 1))) / DAYSPERWEEK,
+					"%02d", pt, ptlim);
+				continue;
+			case 'w':
+				pt = _conv(t->tm_wday, "%d", pt, ptlim);
+				continue;
+			case 'X':
+				pt = _fmt(__get_current_time_locale(loc)->t_fmt, t, pt, ptlim, warnp, loc);
+				continue;
+			case 'x':
+				{
+				int	warn2 = IN_SOME;
+
+				pt = _fmt(__get_current_time_locale(loc)->d_fmt, t, pt, ptlim, &warn2, loc);
+				if (warn2 == IN_ALL)
+					warn2 = IN_THIS;
+				if (warn2 > *warnp)
+					*warnp = warn2;
+				}
+				continue;
+			case 'y':
+				*warnp = IN_ALL;
+				pt = _yconv(t->tm_year, TM_YEAR_BASE, 0, 1,
+					pt, ptlim);
+				continue;
+			case 'Y':
+				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 1,
+					pt, ptlim);
+				continue;
+			case 'Z':
+				if (t->tm_zone != NULL)
+					pt = _add(t->tm_zone, pt, ptlim);
+				else if (t->tm_isdst >= 0)
+					pt = _add(tzname[t->tm_isdst != 0],
+						pt, ptlim);
+				/*
+				** C99 says that %Z must be replaced by the
+				** empty string if the time zone is not
+				** determinable.
+				*/
+				continue;
+			case 'z':
+				{
+				int		diff;
+				char const *	sign;
+
+				if (t->tm_isdst < 0)
+					continue;
+				diff = t->tm_gmtoff;
+				if (diff < 0) {
+					sign = "-";
+					diff = -diff;
+				} else	sign = "+";
+				pt = _add(sign, pt, ptlim);
+				diff /= SECSPERMIN;
+				diff = (diff / MINSPERHOUR) * 100 +
+					(diff % MINSPERHOUR);
+				pt = _conv(diff, "%04d", pt, ptlim);
+				}
+				continue;
+			case '+':
+				pt = _fmt(__get_current_time_locale(loc)->date_fmt, t, pt, ptlim,
+					warnp, loc);
+				continue;
+			case '%':
+			/*
+			** X311J/88-090 (4.12.3.5): if conversion char is
+			** undefined, behavior is undefined. Print out the
+			** character itself as printf(3) also does.
+			*/
+			default:
+				break;
+			}
+		}
+		if (pt == ptlim)
+			break;
+		*pt++ = *format;
+	}
+	return pt;
+}
+
+static char *
+_conv(int n, const char *format, char *pt, const char *ptlim)
+{
+	char	buf[INT_STRLEN_MAXIMUM(int) + 1];
+
+	(void) snprintf(buf, sizeof buf, format, n);
+	return _add(buf, pt, ptlim);
+}
+
+static char *
+_add(const char *str, char *pt, const char *ptlim)
+{
+	while (pt < ptlim && (*pt = *str++) != '\0')
+		++pt;
+	return pt;
+}
+
+/*
+** POSIX and the C Standard are unclear or inconsistent about
+** what %C and %y do if the year is negative or exceeds 9999.
+** Use the convention that %C concatenated with %y yields the
+** same output as %Y, and that %Y contains at least 4 bytes,
+** with more only if necessary.
+*/
+
+static char *
+_yconv(int a, int b, int convert_top, int convert_yy, char *pt, const char *ptlim)
+{
+	int	lead;
+	int	trail;
+
+#define DIVISOR	100
+	trail = a % DIVISOR + b % DIVISOR;
+	lead = a / DIVISOR + b / DIVISOR + trail / DIVISOR;
+	trail %= DIVISOR;
+	if (trail < 0 && lead > 0) {
+		trail += DIVISOR;
+		--lead;
+	} else if (lead < 0 && trail > 0) {
+		trail -= DIVISOR;
+		++lead;
+	}
+	if (convert_top) {
+		if (lead == 0 && trail < 0)
+			pt = _add("-0", pt, ptlim);
+		else	pt = _conv(lead, "%02d", pt, ptlim);
+	}
+	if (convert_yy)
+		pt = _conv(((trail < 0) ? -trail : trail), "%02d", pt, ptlim);
+	return pt;
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/strftime.c src/lib/libc/time/strftime.c
--- src54-x6/lib/libc/time/strftime.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/strftime.c	Tue Dec  3 16:12:45 2013
@@ -28,461 +28,16 @@
 ** SUCH DAMAGE.
 */
 
-#include <fcntl.h>
-#include <stdio.h>
+#include <time.h>
+#include <xlocale.h>
 
-#include "localedef.h"
-#include "private.h"
-#include "tzfile.h"
+#include "locale/xlocale_private.h"
 
-static char *	_add(const char *, char *, const char *);
-static char *	_conv(int, const char *, char *, const char *);
-static char *	_fmt(const char *, const struct tm *, char *, const char *,
-			int *);
-static char *	_yconv(int, int, int, int, char *, const char *);
-
-extern char *	tzname[];
-
-#define IN_NONE	0
-#define IN_SOME	1
-#define IN_THIS	2
-#define IN_ALL	3
-
 size_t
-strftime(char *s, size_t maxsize, const char *format, const struct tm *t)
+strftime(char * const __restrict s, size_t maxsize, 
+		const char * __restrict format, const struct tm * __restrict t)
 {
-	char *	p;
-	int	warn;
-
-	tzset();
-	warn = IN_NONE;
-	p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize, &warn);
-	if (p == s + maxsize) {
-		if (maxsize > 0)
-			s[maxsize - 1] = '\0';
-		return 0;
-	}
-	*p = '\0';
-	return p - s;
+	return strftime_l(s, maxsize, format, t, __get_locale());
 }
 DEF_STRONG(strftime);
 
-static char *
-_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim, int *warnp)
-{
-	for ( ; *format; ++format) {
-		if (*format == '%') {
-label:
-			switch (*++format) {
-			case '\0':
-				--format;
-				break;
-			case 'A':
-				pt = _add((t->tm_wday < 0 ||
-					t->tm_wday >= DAYSPERWEEK) ?
-					"?" : _CurrentTimeLocale->day[t->tm_wday],
-					pt, ptlim);
-				continue;
-			case 'a':
-				pt = _add((t->tm_wday < 0 ||
-					t->tm_wday >= DAYSPERWEEK) ?
-					"?" : _CurrentTimeLocale->abday[t->tm_wday],
-					pt, ptlim);
-				continue;
-			case 'B':
-				pt = _add((t->tm_mon < 0 ||
-					t->tm_mon >= MONSPERYEAR) ?
-					"?" : _CurrentTimeLocale->mon[t->tm_mon],
-					pt, ptlim);
-				continue;
-			case 'b':
-			case 'h':
-				pt = _add((t->tm_mon < 0 ||
-					t->tm_mon >= MONSPERYEAR) ?
-					"?" : _CurrentTimeLocale->abmon[t->tm_mon],
-					pt, ptlim);
-				continue;
-			case 'C':
-				/*
-				** %C used to do a...
-				**	_fmt("%a %b %e %X %Y", t);
-				** ...whereas now POSIX 1003.2 calls for
-				** something completely different.
-				** (ado, 1993-05-24)
-				*/
-				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 0,
-					pt, ptlim);
-				continue;
-			case 'c':
-				{
-				int warn2 = IN_SOME;
-
-				pt = _fmt(_CurrentTimeLocale->d_t_fmt, t, pt, ptlim, &warn2);
-				if (warn2 == IN_ALL)
-					warn2 = IN_THIS;
-				if (warn2 > *warnp)
-					*warnp = warn2;
-				}
-				continue;
-			case 'D':
-				pt = _fmt("%m/%d/%y", t, pt, ptlim, warnp);
-				continue;
-			case 'd':
-				pt = _conv(t->tm_mday, "%02d", pt, ptlim);
-				continue;
-			case 'E':
-			case 'O':
-				/*
-				** C99 locale modifiers.
-				** The sequences
-				**	%Ec %EC %Ex %EX %Ey %EY
-				**	%Od %oe %OH %OI %Om %OM
-				**	%OS %Ou %OU %OV %Ow %OW %Oy
-				** are supposed to provide alternate
-				** representations.
-				*/
-				goto label;
-			case 'e':
-				pt = _conv(t->tm_mday, "%2d", pt, ptlim);
-				continue;
-			case 'F':
-				pt = _fmt("%Y-%m-%d", t, pt, ptlim, warnp);
-				continue;
-			case 'H':
-				pt = _conv(t->tm_hour, "%02d", pt, ptlim);
-				continue;
-			case 'I':
-				pt = _conv((t->tm_hour % 12) ?
-					(t->tm_hour % 12) : 12,
-					"%02d", pt, ptlim);
-				continue;
-			case 'j':
-				pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
-				continue;
-			case 'k':
-				/*
-				** This used to be...
-				**	_conv(t->tm_hour % 12 ?
-				**		t->tm_hour % 12 : 12, 2, ' ');
-				** ...and has been changed to the below to
-				** match SunOS 4.1.1 and Arnold Robbins'
-				** strftime version 3.0. That is, "%k" and
-				** "%l" have been swapped.
-				** (ado, 1993-05-24)
-				*/
-				pt = _conv(t->tm_hour, "%2d", pt, ptlim);
-				continue;
-#ifdef KITCHEN_SINK
-			case 'K':
-				/*
-				** After all this time, still unclaimed!
-				*/
-				pt = _add("kitchen sink", pt, ptlim);
-				continue;
-#endif /* defined KITCHEN_SINK */
-			case 'l':
-				/*
-				** This used to be...
-				**	_conv(t->tm_hour, 2, ' ');
-				** ...and has been changed to the below to
-				** match SunOS 4.1.1 and Arnold Robbin's
-				** strftime version 3.0. That is, "%k" and
-				** "%l" have been swapped.
-				** (ado, 1993-05-24)
-				*/
-				pt = _conv((t->tm_hour % 12) ?
-					(t->tm_hour % 12) : 12,
-					"%2d", pt, ptlim);
-				continue;
-			case 'M':
-				pt = _conv(t->tm_min, "%02d", pt, ptlim);
-				continue;
-			case 'm':
-				pt = _conv(t->tm_mon + 1, "%02d", pt, ptlim);
-				continue;
-			case 'n':
-				pt = _add("\n", pt, ptlim);
-				continue;
-			case 'p':
-				pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
-					_CurrentTimeLocale->am_pm[1] :
-					_CurrentTimeLocale->am_pm[0],
-					pt, ptlim);
-				continue;
-			case 'R':
-				pt = _fmt("%H:%M", t, pt, ptlim, warnp);
-				continue;
-			case 'r':
-				pt = _fmt(_CurrentTimeLocale->t_fmt_ampm, t, pt, ptlim, warnp);
-				continue;
-			case 'S':
-				pt = _conv(t->tm_sec, "%02d", pt, ptlim);
-				continue;
-			case 's':
-				{
-					struct tm	tm;
-					char		buf[INT_STRLEN_MAXIMUM(
-								time_t) + 1];
-					time_t		mkt;
-
-					tm = *t;
-					mkt = mktime(&tm);
-					(void) snprintf(buf, sizeof buf,
-					    "%ld", (long) mkt);
-					pt = _add(buf, pt, ptlim);
-				}
-				continue;
-			case 'T':
-				pt = _fmt("%H:%M:%S", t, pt, ptlim, warnp);
-				continue;
-			case 't':
-				pt = _add("\t", pt, ptlim);
-				continue;
-			case 'U':
-				pt = _conv((t->tm_yday + DAYSPERWEEK -
-					t->tm_wday) / DAYSPERWEEK,
-					"%02d", pt, ptlim);
-				continue;
-			case 'u':
-				/*
-				** From Arnold Robbins' strftime version 3.0:
-				** "ISO 8601: Weekday as a decimal number
-				** [1 (Monday) - 7]"
-				** (ado, 1993-05-24)
-				*/
-				pt = _conv((t->tm_wday == 0) ?
-					DAYSPERWEEK : t->tm_wday,
-					"%d", pt, ptlim);
-				continue;
-			case 'V':	/* ISO 8601 week number */
-			case 'G':	/* ISO 8601 year (four digits) */
-			case 'g':	/* ISO 8601 year (two digits) */
-/*
-** From Arnold Robbins' strftime version 3.0: "the week number of the
-** year (the first Monday as the first day of week 1) as a decimal number
-** (01-53)."
-** (ado, 1993-05-24)
-**
-** From "http://www.ft.uni-erlangen.de/~mskuhn/iso-time.html" by Markus Kuhn:
-** "Week 01 of a year is per definition the first week which has the
-** Thursday in this year, which is equivalent to the week which contains
-** the fourth day of January. In other words, the first week of a new year
-** is the week which has the majority of its days in the new year. Week 01
-** might also contain days from the previous year and the week before week
-** 01 of a year is the last week (52 or 53) of the previous year even if
-** it contains days from the new year. A week starts with Monday (day 1)
-** and ends with Sunday (day 7). For example, the first week of the year
-** 1997 lasts from 1996-12-30 to 1997-01-05..."
-** (ado, 1996-01-02)
-*/
-				{
-					int	year;
-					int	base;
-					int	yday;
-					int	wday;
-					int	w;
-
-					year = t->tm_year;
-					base = TM_YEAR_BASE;
-					yday = t->tm_yday;
-					wday = t->tm_wday;
-					for ( ; ; ) {
-						int	len;
-						int	bot;
-						int	top;
-
-						len = isleap_sum(year, base) ?
-							DAYSPERLYEAR :
-							DAYSPERNYEAR;
-						/*
-						** What yday (-3 ... 3) does
-						** the ISO year begin on?
-						*/
-						bot = ((yday + 11 - wday) %
-							DAYSPERWEEK) - 3;
-						/*
-						** What yday does the NEXT
-						** ISO year begin on?
-						*/
-						top = bot -
-							(len % DAYSPERWEEK);
-						if (top < -3)
-							top += DAYSPERWEEK;
-						top += len;
-						if (yday >= top) {
-							++base;
-							w = 1;
-							break;
-						}
-						if (yday >= bot) {
-							w = 1 + ((yday - bot) /
-								DAYSPERWEEK);
-							break;
-						}
-						--base;
-						yday += isleap_sum(year, base) ?
-							DAYSPERLYEAR :
-							DAYSPERNYEAR;
-					}
-#ifdef XPG4_1994_04_09
-					if ((w == 52 &&
-						t->tm_mon == TM_JANUARY) ||
-						(w == 1 &&
-						t->tm_mon == TM_DECEMBER))
-							w = 53;
-#endif /* defined XPG4_1994_04_09 */
-					if (*format == 'V')
-						pt = _conv(w, "%02d",
-							pt, ptlim);
-					else if (*format == 'g') {
-						*warnp = IN_ALL;
-						pt = _yconv(year, base, 0, 1,
-							pt, ptlim);
-					} else	pt = _yconv(year, base, 1, 1,
-							pt, ptlim);
-				}
-				continue;
-			case 'v':
-				/*
-				** From Arnold Robbins' strftime version 3.0:
-				** "date as dd-bbb-YYYY"
-				** (ado, 1993-05-24)
-				*/
-				pt = _fmt("%e-%b-%Y", t, pt, ptlim, warnp);
-				continue;
-			case 'W':
-				pt = _conv((t->tm_yday + DAYSPERWEEK -
-					(t->tm_wday ?
-					(t->tm_wday - 1) :
-					(DAYSPERWEEK - 1))) / DAYSPERWEEK,
-					"%02d", pt, ptlim);
-				continue;
-			case 'w':
-				pt = _conv(t->tm_wday, "%d", pt, ptlim);
-				continue;
-			case 'X':
-				pt = _fmt(_CurrentTimeLocale->t_fmt, t, pt, ptlim, warnp);
-				continue;
-			case 'x':
-				{
-				int	warn2 = IN_SOME;
-
-				pt = _fmt(_CurrentTimeLocale->d_fmt, t, pt, ptlim, &warn2);
-				if (warn2 == IN_ALL)
-					warn2 = IN_THIS;
-				if (warn2 > *warnp)
-					*warnp = warn2;
-				}
-				continue;
-			case 'y':
-				*warnp = IN_ALL;
-				pt = _yconv(t->tm_year, TM_YEAR_BASE, 0, 1,
-					pt, ptlim);
-				continue;
-			case 'Y':
-				pt = _yconv(t->tm_year, TM_YEAR_BASE, 1, 1,
-					pt, ptlim);
-				continue;
-			case 'Z':
-				if (t->tm_zone != NULL)
-					pt = _add(t->tm_zone, pt, ptlim);
-				else if (t->tm_isdst >= 0)
-					pt = _add(tzname[t->tm_isdst != 0],
-						pt, ptlim);
-				/*
-				** C99 says that %Z must be replaced by the
-				** empty string if the time zone is not
-				** determinable.
-				*/
-				continue;
-			case 'z':
-				{
-				int		diff;
-				char const *	sign;
-
-				if (t->tm_isdst < 0)
-					continue;
-				diff = t->tm_gmtoff;
-				if (diff < 0) {
-					sign = "-";
-					diff = -diff;
-				} else	sign = "+";
-				pt = _add(sign, pt, ptlim);
-				diff /= SECSPERMIN;
-				diff = (diff / MINSPERHOUR) * 100 +
-					(diff % MINSPERHOUR);
-				pt = _conv(diff, "%04d", pt, ptlim);
-				}
-				continue;
-			case '+':
-				pt = _fmt(_CurrentTimeLocale->date_fmt, t, pt, ptlim,
-					warnp);
-				continue;
-			case '%':
-			/*
-			** X311J/88-090 (4.12.3.5): if conversion char is
-			** undefined, behavior is undefined. Print out the
-			** character itself as printf(3) also does.
-			*/
-			default:
-				break;
-			}
-		}
-		if (pt == ptlim)
-			break;
-		*pt++ = *format;
-	}
-	return pt;
-}
-
-static char *
-_conv(int n, const char *format, char *pt, const char *ptlim)
-{
-	char	buf[INT_STRLEN_MAXIMUM(int) + 1];
-
-	(void) snprintf(buf, sizeof buf, format, n);
-	return _add(buf, pt, ptlim);
-}
-
-static char *
-_add(const char *str, char *pt, const char *ptlim)
-{
-	while (pt < ptlim && (*pt = *str++) != '\0')
-		++pt;
-	return pt;
-}
-
-/*
-** POSIX and the C Standard are unclear or inconsistent about
-** what %C and %y do if the year is negative or exceeds 9999.
-** Use the convention that %C concatenated with %y yields the
-** same output as %Y, and that %Y contains at least 4 bytes,
-** with more only if necessary.
-*/
-
-static char *
-_yconv(int a, int b, int convert_top, int convert_yy, char *pt, const char *ptlim)
-{
-	int	lead;
-	int	trail;
-
-#define DIVISOR	100
-	trail = a % DIVISOR + b % DIVISOR;
-	lead = a / DIVISOR + b / DIVISOR + trail / DIVISOR;
-	trail %= DIVISOR;
-	if (trail < 0 && lead > 0) {
-		trail += DIVISOR;
-		--lead;
-	} else if (lead < 0 && trail > 0) {
-		trail -= DIVISOR;
-		++lead;
-	}
-	if (convert_top) {
-		if (lead == 0 && trail < 0)
-			pt = _add("-0", pt, ptlim);
-		else	pt = _conv(lead, "%02d", pt, ptlim);
-	}
-	if (convert_yy)
-		pt = _conv(((trail < 0) ? -trail : trail), "%02d", pt, ptlim);
-	return pt;
-}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/strptime.c src/lib/libc/time/strptime.c
--- src54-x6/lib/libc/time/strptime.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/strptime.c	Tue Dec  3 16:12:45 2013
@@ -35,10 +35,11 @@
 #include <time.h>
 
 #include "localedef.h"
+#include "locale/xlocale_private.h"
 #include "private.h"
 #include "tzfile.h"
 
-#define	_ctloc(x)		(_CurrentTimeLocale->x)
+#define	_ctloc(x, loc)		(__get_current_time_locale(loc)->x)
 
 /*
  * We do not implement alternate representations. However, we always
@@ -75,20 +76,28 @@
 static	int _conv_num64(const unsigned char **, int64_t *, int64_t, int64_t);
 static	int _conv_num(const unsigned char **, int *, int, int);
 static	int leaps_thru_end_of(const int y);
-static	char *_strptime(const char *, const char *, struct tm *, int);
+static	char *_strptime(const char *, const char *, struct tm *, int, locale_t);
 static	const u_char *_find_string(const u_char *, int *, const char * const *,
-	    const char * const *, int);
+	    const char * const *, int, locale_t);
 
 
 char *
 strptime(const char *buf, const char *fmt, struct tm *tm)
 {
-	return(_strptime(buf, fmt, tm, 1));
+	return(_strptime(buf, fmt, tm, 1, __get_locale()));
 }
-DEF_WEAK(strptime);
+DEF_STRONG(strptime);
 
+
+char *
+strptime_l(const char *buf, const char *fmt, struct tm *tm, locale_t loc)
+{
+	return(_strptime(buf, fmt, tm, 1, loc));
+}
+
 static char *
-_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize)
+_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize,
+		locale_t loc)
 {
 	unsigned char c;
 	const unsigned char *bp, *ep;
@@ -109,8 +118,8 @@
 		alt_format = 0;
 
 		/* Eat up white-space. */
-		if (isspace(c)) {
-			while (isspace(*bp))
+		if (isspace_l(c, loc)) {
+			while (isspace_l(*bp, loc))
 				bp++;
 
 			fmt++;
@@ -148,49 +157,49 @@
 		 */
 		case 'c':	/* Date and time, using the locale's format. */
 			_LEGAL_ALT(_ALT_E);
-			if (!(bp = _strptime(bp, _ctloc(d_t_fmt), tm, 0)))
+			if (!(bp = _strptime(bp, _ctloc(d_t_fmt, loc), tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'D':	/* The date as "%m/%d/%y". */
 			_LEGAL_ALT(0);
-			if (!(bp = _strptime(bp, "%m/%d/%y", tm, 0)))
+			if (!(bp = _strptime(bp, "%m/%d/%y", tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'F':	/* The date as "%Y-%m-%d". */
 			_LEGAL_ALT(0);
-			if (!(bp = _strptime(bp, "%Y-%m-%d", tm, 0)))
+			if (!(bp = _strptime(bp, "%Y-%m-%d", tm, 0, loc)))
 				return (NULL);
 			continue;
 
 		case 'R':	/* The time as "%H:%M". */
 			_LEGAL_ALT(0);
-			if (!(bp = _strptime(bp, "%H:%M", tm, 0)))
+			if (!(bp = _strptime(bp, "%H:%M", tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'r':	/* The time as "%I:%M:%S %p". */
 			_LEGAL_ALT(0);
-			if (!(bp = _strptime(bp, "%I:%M:%S %p", tm, 0)))
+			if (!(bp = _strptime(bp, "%I:%M:%S %p", tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'T':	/* The time as "%H:%M:%S". */
 			_LEGAL_ALT(0);
-			if (!(bp = _strptime(bp, "%H:%M:%S", tm, 0)))
+			if (!(bp = _strptime(bp, "%H:%M:%S", tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'X':	/* The time, using the locale's format. */
 			_LEGAL_ALT(_ALT_E);
-			if (!(bp = _strptime(bp, _ctloc(t_fmt), tm, 0)))
+			if (!(bp = _strptime(bp, _ctloc(t_fmt, loc), tm, 0, loc)))
 				return (NULL);
 			break;
 
 		case 'x':	/* The date, using the locale's format. */
 			_LEGAL_ALT(_ALT_E);
-			if (!(bp = _strptime(bp, _ctloc(d_fmt), tm, 0)))
+			if (!(bp = _strptime(bp, _ctloc(d_fmt, loc), tm, 0, loc)))
 				return (NULL);
 			break;
 
@@ -202,13 +211,13 @@
 			_LEGAL_ALT(0);
 			for (i = 0; i < 7; i++) {
 				/* Full name. */
-				len = strlen(_ctloc(day[i]));
-				if (strncasecmp(_ctloc(day[i]), bp, len) == 0)
+				len = strlen(_ctloc(day[i], loc));
+				if (strncasecmp_l(_ctloc(day[i], loc), bp, len, loc) == 0)
 					break;
 
 				/* Abbreviated name. */
-				len = strlen(_ctloc(abday[i]));
-				if (strncasecmp(_ctloc(abday[i]), bp, len) == 0)
+				len = strlen(_ctloc(abday[i], loc));
+				if (strncasecmp_l(_ctloc(abday[i], loc), bp, len, loc) == 0)
 					break;
 			}
 
@@ -227,13 +236,13 @@
 			_LEGAL_ALT(0);
 			for (i = 0; i < 12; i++) {
 				/* Full name. */
-				len = strlen(_ctloc(mon[i]));
-				if (strncasecmp(_ctloc(mon[i]), bp, len) == 0)
+				len = strlen(_ctloc(mon[i], loc));
+				if (strncasecmp_l(_ctloc(mon[i], loc), bp, len, loc) == 0)
 					break;
 
 				/* Abbreviated name. */
-				len = strlen(_ctloc(abmon[i]));
-				if (strncasecmp(_ctloc(abmon[i]), bp, len) == 0)
+				len = strlen(_ctloc(abmon[i], loc));
+				if (strncasecmp_l(_ctloc(abmon[i], loc), bp, len, loc) == 0)
 					break;
 			}
 
@@ -308,8 +317,8 @@
 		case 'p':	/* The locale's equivalent of AM/PM. */
 			_LEGAL_ALT(0);
 			/* AM? */
-			len = strlen(_ctloc(am_pm[0]));
-			if (strncasecmp(_ctloc(am_pm[0]), bp, len) == 0) {
+			len = strlen(_ctloc(am_pm[0], loc));
+			if (strncasecmp_l(_ctloc(am_pm[0], loc), bp, len, loc) == 0) {
 				if (tm->tm_hour > 12)	/* i.e., 13:00 AM ?! */
 					return (NULL);
 				else if (tm->tm_hour == 12)
@@ -319,8 +328,8 @@
 				break;
 			}
 			/* PM? */
-			len = strlen(_ctloc(am_pm[1]));
-			if (strncasecmp(_ctloc(am_pm[1]), bp, len) == 0) {
+			len = strlen(_ctloc(am_pm[1], loc));
+			if (strncasecmp_l(_ctloc(am_pm[1], loc), bp, len, loc) == 0) {
 				if (tm->tm_hour > 12)	/* i.e., 13:00 PM ?! */
 					return (NULL);
 				else if (tm->tm_hour < 12)
@@ -388,7 +397,7 @@
 				 */
 			do
 				bp++;
-			while (isdigit(*bp));
+			while (isdigit_l(*bp, loc));
 			continue;
 
 		case 'V':	/* The ISO 8601:1988 week number as decimal */
@@ -427,7 +436,7 @@
 			} else {
 				ep = _find_string(bp, &i,
 						 (const char * const *)tzname,
-						  NULL, 2);
+						  NULL, 2, loc);
 				if (ep == NULL)
 					return (NULL);
 
@@ -453,7 +462,7 @@
 			 * M[DS]T = Mountain: -6 | -7
 			 * P[DS]T = Pacific : -7 | -8
 			 */
-			while (isspace(*bp))
+			while (isspace_l(*bp, loc))
 				bp++;
 
 			switch (*bp++) {
@@ -478,14 +487,14 @@
 				break;
 			default:
 				--bp;
-				ep = _find_string(bp, &i, nast, NULL, 4);
+				ep = _find_string(bp, &i, nast, NULL, 4, loc);
 				if (ep != NULL) {
 					tm->tm_gmtoff = (-5 - i) * SECSPERHOUR;
 					tm->tm_zone = (char *)nast[i];
 					bp = ep;
 					continue;
 				}
-				ep = _find_string(bp, &i, nadt, NULL, 4);
+				ep = _find_string(bp, &i, nadt, NULL, 4, loc);
 				if (ep != NULL) {
 					tm->tm_isdst = 1;
 					tm->tm_gmtoff = (-4 - i) * SECSPERHOUR;
@@ -495,15 +504,15 @@
 				}
 				return NULL;
 			}
-			if (!isdigit(bp[0]) || !isdigit(bp[1]))
+			if (!isdigit_l(bp[0], loc) || !isdigit_l(bp[1], loc))
 				return NULL;
 			offs = ((bp[0]-'0') * 10 + (bp[1]-'0')) * SECSPERHOUR;
 			bp += 2;
 			if (*bp == ':')
 				bp++;
-			if (isdigit(*bp)) {
+			if (isdigit_l(*bp, loc)) {
 				offs += (*bp++ - '0') * 10 * SECSPERMIN;
-				if (!isdigit(*bp))
+				if (!isdigit_l(*bp, loc))
 					return NULL;
 				offs += (*bp++ - '0') * SECSPERMIN;
 			}
@@ -520,7 +529,7 @@
 		case 'n':	/* Any kind of white-space. */
 		case 't':
 			_LEGAL_ALT(0);
-			while (isspace(*bp))
+			while (isspace_l(*bp, loc))
 				bp++;
 			break;
 
@@ -634,7 +643,7 @@
 
 static const u_char *
 _find_string(const u_char *bp, int *tgt, const char * const *n1,
-		const char * const *n2, int c)
+		const char * const *n2, int c, locale_t loc)
 {
 	int i;
 	unsigned int len;
@@ -643,7 +652,7 @@
 	for (; n1 != NULL; n1 = n2, n2 = NULL) {
 		for (i = 0; i < c; i++, n1++) {
 			len = strlen(*n1);
-			if (strncasecmp(*n1, (const char *)bp, len) == 0) {
+			if (strncasecmp_l(*n1, (const char *)bp, len, loc) == 0) {
 				*tgt = i;
 				return bp + len;
 			}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/wcsftime.c src/lib/libc/time/wcsftime.c
--- src54-x6/lib/libc/time/wcsftime.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/wcsftime.c	Tue Dec  3 16:12:45 2013
@@ -40,13 +40,14 @@
 #include "localedef.h"
 #include "private.h"
 #include "tzfile.h"
+#include "locale/xlocale_private.h"
 
 #define UNKNOWN L"?"
 static wchar_t *	_add(const wchar_t *, wchar_t *, const wchar_t *);
 static wchar_t *	_sadd(const char *, wchar_t *, const wchar_t *);
 static wchar_t *	_conv(int, const wchar_t *, wchar_t *, const wchar_t *);
-static wchar_t *	_fmt(const wchar_t *, const struct tm *, wchar_t *, const wchar_t *,
-			int *);
+static wchar_t *	_fmt(const wchar_t *, const struct tm *, wchar_t *, 
+		const wchar_t *, int *, locale_t);
 static wchar_t *	_yconv(int, int, int, int, wchar_t *, const wchar_t *);
 
 extern char *	tzname[];
@@ -57,15 +58,17 @@
 #define IN_ALL	3
 
 size_t
-wcsftime(wchar_t *__restrict s, size_t maxsize, 
-    const wchar_t *__restrict format, const struct tm *__restrict t)
+wcsftime_l(wchar_t *__restrict s, size_t maxsize, 
+    const wchar_t *__restrict format, const struct tm *__restrict t,
+    locale_t loc)
 {
 	wchar_t *p;
 	int	warn;
 
+	FIX_LOCALE(loc);
 	tzset();
 	warn = IN_NONE;
-	p = _fmt(((format == NULL) ? L"%c" : format), t, s, s + maxsize, &warn);
+	p = _fmt(((format == NULL) ? L"%c" : format), t, s, s + maxsize, &warn, loc);
 	if (p == s + maxsize) {
 		if (maxsize > 0)
 			s[maxsize - 1] = '\0';
@@ -75,23 +78,30 @@
 	return p - s;
 }
 
+size_t
+wcsftime(wchar_t *__restrict s, size_t maxsize, 
+    const wchar_t *__restrict format, const struct tm *__restrict t) 
+{
+	return wcsftime_l(s, maxsize, format, t, __get_locale());
+}
+
 wchar_t *
-_towcs(wchar_t *bL, size_t bLsize, const char *s)
+_towcs(wchar_t *bL, size_t bLsize, const char *s, locale_t loc)
 {
-	size_t numc = mbstowcs(NULL, s, 0) + 1; 
+	size_t numc = mbstowcs_l(NULL, s, 0, loc) + 1; 
 	if (numc <= 0 || numc >= bLsize) { 
 		(void) fprintf(stderr, "Cannot translate %s to wchar_t *\n", s);
 		errno = EINVAL;
 		return NULL;
 	}
-	mbstowcs(bL, s, numc);
+	mbstowcs_l(bL, s, numc, loc);
 	return bL;
 }
 
 
 static wchar_t *
 _fmt(const wchar_t *format, const struct tm *t, wchar_t *pt, 
-    const wchar_t *ptlim, int *warnp)
+    const wchar_t *ptlim, int *warnp, locale_t loc)
 {
 	// In the moment of this writing the biggest LC_TIME file
         // is 479 bytes, the next buffer should be enough to store
@@ -113,26 +123,26 @@
 		case 'A':
 			pt = _add((t->tm_wday < 0 ||
 				t->tm_wday >= DAYSPERWEEK) ?
-				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->day[t->tm_wday]),
+				UNKNOWN : _towcs(bL, sizeof(bL), __get_current_time_locale(loc)->day[t->tm_wday], loc),
 				pt, ptlim);
 			continue;
 		case 'a':
 			pt = _add((t->tm_wday < 0 ||
 				t->tm_wday >= DAYSPERWEEK) ?
-				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->abday[t->tm_wday]),
+				UNKNOWN : _towcs(bL, sizeof(bL), __get_current_time_locale(loc)->abday[t->tm_wday], loc),
 				pt, ptlim);
 			continue;
 		case 'B':
 			pt = _add((t->tm_mon < 0 ||
 				t->tm_mon >= MONSPERYEAR) ?
-				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->mon[t->tm_mon]),
+				UNKNOWN : _towcs(bL, sizeof(bL), __get_current_time_locale(loc)->mon[t->tm_mon], loc),
 				pt, ptlim);
 			continue;
 		case 'b':
 		case 'h':
 			pt = _add((t->tm_mon < 0 ||
 				t->tm_mon >= MONSPERYEAR) ?
-				UNKNOWN : _towcs(bL, sizeof(bL), _CurrentTimeLocale->abmon[t->tm_mon]),
+				UNKNOWN : _towcs(bL, sizeof(bL), __get_current_time_locale(loc)->abmon[t->tm_mon], loc),
 				pt, ptlim);
 			continue;
 		case 'C':
@@ -150,7 +160,7 @@
 			{
 			int warn2 = IN_SOME;
 
-			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->d_t_fmt), t, pt, ptlim, &warn2);
+			pt = _fmt(_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->d_t_fmt, loc), t, pt, ptlim, &warn2, loc);
 			if (warn2 == IN_ALL)
 				warn2 = IN_THIS;
 			if (warn2 > *warnp)
@@ -158,7 +168,7 @@
 			}
 			continue;
 		case 'D':
-			pt = _fmt(L"%m/%d/%y", t, pt, ptlim, warnp);
+			pt = _fmt(L"%m/%d/%y", t, pt, ptlim, warnp, loc);
 			continue;
 		case 'd':
 			pt = _conv(t->tm_mday, L"%02d", pt, ptlim);
@@ -179,7 +189,7 @@
 			pt = _conv(t->tm_mday, L"%2d", pt, ptlim);
 			continue;
 		case 'F':
-			pt = _fmt(L"%Y-%m-%d", t, pt, ptlim, warnp);
+			pt = _fmt(L"%Y-%m-%d", t, pt, ptlim, warnp, loc);
 			continue;
 		case 'H':
 			pt = _conv(t->tm_hour, L"%02d", pt, ptlim);
@@ -230,15 +240,15 @@
 			continue;
 		case 'p':
 			pt = _add((t->tm_hour >= (HOURSPERDAY / 2)) ?
-				_towcs(bL, sizeof(bL), _CurrentTimeLocale->am_pm[1]) :
-				_towcs(bL, sizeof(bL), _CurrentTimeLocale->am_pm[0]),
+				_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->am_pm[1], loc) :
+				_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->am_pm[0], loc),
 				pt, ptlim);
 			continue;
 		case 'R':
-			pt = _fmt(L"%H:%M", t, pt, ptlim, warnp);
+			pt = _fmt(L"%H:%M", t, pt, ptlim, warnp, loc);
 			continue;
 		case 'r':
-			pt = _fmt(L"%I:%M:%S %p", t, pt, ptlim, warnp);
+			pt = _fmt(L"%I:%M:%S %p", t, pt, ptlim, warnp, loc);
 			continue;
 		case 'S':
 			pt = _conv(t->tm_sec, L"%02d", pt, ptlim);
@@ -259,7 +269,7 @@
 			}
 			continue;
 		case 'T':
-			pt = _fmt(L"%H:%M:%S", t, pt, ptlim, warnp);
+			pt = _fmt(L"%H:%M:%S", t, pt, ptlim, warnp, loc);
 			continue;
 		case 't':
 			pt = _add(L"\t", pt, ptlim);
@@ -364,7 +374,7 @@
 			** "date as dd-bbb-YYYY"
 			** (ado, 1993-05-24)
 			*/
-			pt = _fmt(L"%e-%b-%Y", t, pt, ptlim, warnp);
+			pt = _fmt(L"%e-%b-%Y", t, pt, ptlim, warnp, loc);
 			continue;
 		case 'W':
 			pt = _conv((t->tm_yday + DAYSPERWEEK -
@@ -377,13 +387,13 @@
 			pt = _conv(t->tm_wday, L"%d", pt, ptlim);
 			continue;
 		case 'X':
-			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->t_fmt), t, pt, ptlim, warnp);
+			pt = _fmt(_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->t_fmt, loc), t, pt, ptlim, warnp, loc);
 			continue;
 		case 'x':
 			{
 			int	warn2 = IN_SOME;
 
-			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->d_fmt), t, pt, ptlim, &warn2);
+			pt = _fmt(_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->d_fmt, loc), t, pt, ptlim, &warn2, loc);
 			if (warn2 == IN_ALL)
 				warn2 = IN_THIS;
 			if (warn2 > *warnp)
@@ -431,7 +441,7 @@
 			}
 			continue;
 		case '+':
-			pt = _fmt(_towcs(bL, sizeof(bL), _CurrentTimeLocale->date_fmt), t, pt, ptlim, warnp);
+			pt = _fmt(_towcs(bL, sizeof(bL), __get_current_time_locale(loc)->date_fmt, loc), t, pt, ptlim, warnp, loc);
 			continue;
 		case '%':
 		/*
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/_def_time.c src/lib/libc/locale/_def_time.c
--- src54-x6/lib/libc/locale/_def_time.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/locale/_def_time.c	Tue Dec  3 16:12:45 2013
@@ -8,6 +8,7 @@
 #include <string.h>
 #include "localedef.h"
 #include "locale/loadtextcat.h"
+#include "locale/xlocale_private.h"
 
 const _TimeLocale _DefaultTimeLocale =
 {
@@ -39,37 +40,116 @@
 const _TimeLocale *_CurrentTimeLocale = &_DefaultTimeLocale;
 
 /* This will be time locale when not using DefaultTimeLocale */
-_TimeLocale _time_locale;
+struct xlocale_time __xlocale_global_time;
 
-/* Buffer for time locale data when not using C / POSIX */
-static char *_time_buffer = NULL;
 
-/* 1 if the locale changes, 0 otherwise */
-int __tlocale_changed;
-
-
+static void
+destruct_time(void *v)
+{
+	struct xlocale_time *l = v;
+	if (l->buffer)
+		free(l->buffer);
+	free(l);
+}
+ 
 /* Loads time locale from file in text format */
 int
-__time_load_locale(const char *name)
+__tload(const char *name, locale_t loc, struct xlocale_time *xtime)
 {
 	int ret = 0;
 	char error_buf[2048];
+	_TimeLocale *l = NULL;
+	int changed = 0;
 
-	__tlocale_changed = 0;
+	FIX_LOCALE(loc);
+	l = &xtime->locale;
+
 	if (strcmp(name, "C") == 0 || strcmp(name, "POSIX") == 0) {
-		if (_CurrentTimeLocale != &_DefaultTimeLocale) {
-			__tlocale_changed = 1;
-			_CurrentTimeLocale = &_DefaultTimeLocale;
-		}
+		xtime->header.header.retain_count = 0;
+		xtime->header.header.destructor = NULL;
+		xtime->header.locale[0] = 'C';
+		xtime->header.locale[1] = '\0';
+		xtime->buffer = NULL;
+		xtime->locale = _DefaultTimeLocale;
+		loc->using_time_locale = 0;
 	} else {
-		ret = __loadtextcat(name, LC_TIME, &__tlocale_changed,
-				&_time_buffer, 
-				(const char**)&_time_locale, 
-				sizeof(_time_locale), 
+		xtime->header.header.destructor = destruct_time;
+		ret = __loadtextcat(name, LC_TIME, &changed,
+				&xtime->buffer, 
+				(const char **)l, 
+				sizeof(_TimeLocale), 
 				error_buf, sizeof(error_buf));
 		if (ret == 0) {
-			_CurrentTimeLocale = &_time_locale;
+		       	if (changed == 1) {
+				loc->using_time_locale = 1;
+			}
+		} else {
+			return -1;
 		}
 	}
 	return ret;
 }
+
+
+/* Loads time locale from file in text format */
+int
+__time_load_locale(const char *name)
+{
+	int ret = 0;
+
+	ret = __tload(name, &__xlocale_global_locale, &__xlocale_global_time);
+	_CurrentTimeLocale = &__xlocale_global_time.locale;
+	return ret;
+}
+
+void *
+__time_load(const char *name, locale_t loc)
+{
+	int ret;
+	struct xlocale_time *new;
+        
+	new = calloc(sizeof(struct xlocale_time), 1);
+	if (new == NULL) {
+		return NULL;
+	}
+	ret = __tload(name, loc, new);
+	if (ret != 0) {
+		xlocale_release(new);
+		return NULL;
+	}
+	return new;
+}
+
+_TimeLocale *
+__get_current_time_locale(locale_t loc)
+{
+	return (loc->using_time_locale
+			? &((struct xlocale_time *)loc->components[XLC_TIME])->locale
+			: (_TimeLocale *)&_DefaultTimeLocale);
+}
+
+#ifdef LOCALE_DEBUG
+void
+timedebug(_TimeLocale l) {
+	int i;
+	for(i = 0; i < 12; i++) {
+		printf("abmon[%i]: %s\n", i, l.abmon[i]);
+	}
+	for(i = 0; i < 12; i++) {
+		printf("mon[%i]: %s\n", i, l.mon[i]);
+	}
+	for(i = 0; i < 7; i++) {
+		printf("abday[%i]: %s\n", i, l.abday[i]);
+	}
+	for(i = 0; i < 7; i++) {
+		printf("day[%i]: %s\n", i, l.day[i]);
+	}
+	printf("t_fmt: %s\n", l.t_fmt);
+	printf("d_fmt: %s\n", l.d_fmt);
+	printf("d_t_fmt: %s\n", l.d_t_fmt);
+	printf("am_pm[0]: %s\n", l.am_pm[0]);
+	printf("am_pm[1]: %s\n", l.am_pm[1]);
+	printf("date_fmt: %s\n", l.date_fmt);
+	printf("t_fmt_ampm: %s\n", l.t_fmt_ampm);
+}
+#endif /* LOCALE_DEBUG */
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/xlocale.c src/lib/libc/locale/xlocale.c
--- src54-x6/lib/libc/locale/xlocale.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/locale/xlocale.c	Tue Dec  3 16:12:45 2013
@@ -77,9 +77,9 @@
 		&__xlocale_global_ctype, 
 		&__xlocale_global_monetary,
 		&__xlocale_global_numeric,
-		0, 0
+		&__xlocale_global_time, 
+		0
 		/* FIXME
-		&__xlocale_global_time,
 		&__xlocale_global_messages */
 	},
 	1,
@@ -101,12 +101,6 @@
 	0
 };
 
-
-void *
-__time_load(const char *locale, locale_t unused)
-{
-	return NULL;
-}
 
 void *
 __messages_load(const char *locale, locale_t unused)
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/setlocale.c src/lib/libc/locale/setlocale.c
--- src54-x6/lib/libc/locale/setlocale.c	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/locale/setlocale.c	Tue Dec  3 16:12:45 2013
@@ -1,5 +1,6 @@
 /*	$OpenBSD: setlocale.c,v 1.27 2017/09/05 03:16:13 schwarze Exp $	*/
-/* * Copyright (c) 2017 Ingo Schwarze <schwarze@openbsd.org>
+/*
+ * Copyright (c) 2017 Ingo Schwarze <schwarze@openbsd.org>
  *
  * Permission to use, copy, modify, and distribute this software for any
  * purpose with or without fee is hereby granted, provided that the above
@@ -112,13 +113,17 @@
 			}
 			(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
 			    locname, sizeof(
-				__xlocale_global_locale.components[category-1]->locale));
+			    __xlocale_global_locale.components[category-1]->locale));
 			break;
 		case LC_TIME:
 			if (__time_load_locale(locname) != 0) {
 				free(cp);
 				return -1;
 			}
+			(void)strlcpy(__xlocale_global_locale.components[category-1]->locale, 
+			    locname, sizeof(
+				__xlocale_global_locale.components[category-1]->locale));
+
 			break;
 	}
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/xlocale_private.h src/lib/libc/locale/xlocale_private.h
--- src54-x6/lib/libc/locale/xlocale_private.h	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/locale/xlocale_private.h	Tue Dec  3 16:12:45 2013
@@ -55,7 +55,6 @@
 	XLC_LAST
 };
 
-
 /**
  * Header used for objects that are reference counted.  Objects may optionally
  * have a destructor associated, which is responsible for destroying the
@@ -211,7 +210,6 @@
  */
 #define FIX_LOCALE(l) (l = get_real_locale(l))
 
-
 struct xlocale_numeric {
 	struct xlocale_component header;
 	char *buffer;
@@ -227,5 +225,13 @@
 };
 
 _MonetaryLocale *__get_current_monetary_locale(locale_t loc);
+
+struct xlocale_time {
+	struct xlocale_component header;
+	char *buffer;
+	_TimeLocale locale;
+};
+
+_TimeLocale *__get_current_time_locale(locale_t loc);
 
 #endif
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c src/regress/lib/libc/locale/check_xlocale/check_xlocale.c
--- src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Sat Feb  9 14:26:54 2013
+++ src/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Tue Dec  3 16:12:45 2013
@@ -507,6 +507,30 @@
 	p(fabs(fl + 3.1) < FLT_EPSILON);
 }
 
+void test_time() 
+{
+	char col[256];
+	wchar_t wcol[256];
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	locale_t tloc = uselocale(NULL);
+	locale_t esc = duplocale(tloc);
+	struct tm tl;
+	time_t ti;
+
+	setlocale(LC_ALL, "POSIX");
+
+	p(strcmp(nl_langinfo_l(DAY_1, esc),"domingo") == 0);
+	strptime_l("lun", "%a", &tl, esc);
+	p(tl.tm_wday == 1);
+
+	ti = (time_t)1396950000; //Tue Apr  8 09:40:00 2014
+	gmtime_r(&ti, &tl) ;
+	strftime_l(col, sizeof(col), "%A", &tl, esc);
+	p(strcmp(col, "martes") == 0);
+	wcsftime_l(wcol, sizeof(wcol), L"%A", &tl, esc);
+	p(wcscmp(wcol, L"martes") == 0);
+}
+
 int main()
 {
 	test_xlocale();
@@ -515,6 +539,7 @@
 	test_string();
 	test_monetary();
 	test_numeric();
+	test_time();
 	
 	return bad != 0;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/nl_langinfo.3 src/lib/libc/locale/nl_langinfo.3
--- src54-x6/lib/libc/locale/nl_langinfo.3	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/locale/nl_langinfo.3	Tue Dec  3 16:12:45 2013
@@ -25,6 +25,7 @@
 .In langinfo.h
 .Ft char *
 .Fn nl_langinfo "nl_item item"
+.In xlocale.h
 .Ft char *
 .Fn nl_langinfo_l "nl_item item" "locale_t locale"
 .Sh DESCRIPTION
@@ -68,6 +69,7 @@
 replaces radix char.
 .Sh SEE ALSO
 .Xr setlocale 3 ,
+.Xr xlocale 3
 .Xr uselocale 3
 .Sh STANDARDS
 These functions conform to
@@ -80,7 +82,7 @@
 and
 .Fn nl_langinfo_l
 since
-.Ox 6.2 .
+.Ox 6.2 and since adJ 5.4.
 .Sh BUGS
 The return values for
 .Dv CODESET
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/strptime.3 src/lib/libc/time/strptime.3
--- src54-x6/lib/libc/time/strptime.3	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/strptime.3	Tue Dec  3 16:12:45 2013
@@ -31,15 +31,21 @@
 .Os
 .Sh NAME
 .Nm strptime
-.Nd converts a character string to a time value
+.Nm strptime_l
+.Nd convert a character string to a time value
 .Sh SYNOPSIS
 .In time.h
 .Ft char *
 .Fn strptime "const char *buf" "const char *format" "struct tm *tm"
+.In xlocale.h
+.Ft char *
+.Fn strptime_l "const char *buf" "const char *format" "struct tm *tm" "locale_t locale"
 .Sh DESCRIPTION
 The
-.Nm
-function parses the string
+.Nm strptime
+and 
+.Nm strptime_l
+functions parse the string
 .Fa buf
 according to the specified
 .Fa format
@@ -65,6 +71,15 @@
 There must be whitespace or other
 non-alphanumeric characters between any two conversion specifications.
 .Pp
+The function
+.Fn strptime
+uses the current locale and its cateogry 
+.Dv LC_TIME
+while 
+.Fn strptime_l
+uses the locale received as last parameter, see
+.Xr xlocale 3
+.Pp
 The following conversion specifications are supported:
 .Bl -tag -width "xxxx"
 .It Cm \&%a
@@ -289,6 +304,7 @@
 .Sh SEE ALSO
 .Xr mktime 3 ,
 .Xr strftime 3
+.Xr xlocale 3
 .Sh STANDARDS
 The
 .Fn strptime
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/strftime.3 src/lib/libc/time/strftime.3
--- src54-x6/lib/libc/time/strftime.3	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/strftime.3	Tue Dec  3 16:12:45 2013
@@ -49,6 +49,7 @@
 .Fa "const char *format"
 .Fa "const struct tm *timeptr"
 .Fc
+.In locale.h
 .Ft size_t
 .Fo strftime_l
 .Fa "char *buf"
@@ -81,7 +82,12 @@
 characters will be placed into the array.
 .Pp
 Each conversion specification is replaced by the characters as
-follows which are then copied into the buffer.
+follows which are then copied into the buffer.  The locale used by
+.Fn strftime
+is the current locale, while
+.Fn strftime_l
+uses the locale given as parameter, see
+.Xr xlocale 3
 .Bl -tag -width "xxxx"
 .It Cm \&%A
 is replaced by the locale's full weekday name.
@@ -204,13 +210,6 @@
 .Xr date 1
 format.
 .El
-.Pp
-The
-.Ox
-implementation always uses the C locale and ignores
-the global locale, the thread-specific locale, and the
-.Fa locale
-argument.
 .Sh RETURN VALUES
 If the total number of resulting characters, including the terminating
 NUL character, is not more than
@@ -235,6 +234,7 @@
 .Xr time 3 ,
 .Xr tzset 3 ,
 .Xr tzfile 5
+.Xr xlocale 3
 .Sh STANDARDS
 The
 .Fn strftime
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/time/wcsftime.3 src/lib/libc/time/wcsftime.3
--- src54-x6/lib/libc/time/wcsftime.3	Sat Feb  9 14:26:54 2013
+++ src/lib/libc/time/wcsftime.3	Tue Dec  3 16:12:45 2013
@@ -17,16 +17,26 @@
 .Dt WCSFTIME 3
 .Os
 .Sh NAME
-.Nm wcsftime
+.Nm wcsftime ,
+.Nm wcsftime_l
 .Nd format date and time to wide characters string
 .Sh SYNOPSIS
 .In wchar.h
 .Ft size_t
 .Fn wcsftime "wchar_t *buf" "size_t maxsize" "const wchar_t *format" "const struct tm *timeptr"
+.In xlocale.h
+.Ft size_t
+.Fn wcsftime_l "wchar_t *buf" "size_t maxsize" "const wchar_t *format" "const struct tm *timeptr" "locale_t locale"
 .Sh DESCRIPTION
 The
 .Fn wcsftime
-is a wide char equivalent of
-.Xr strftime 3 .
+and
+.Fn wcsftime_l
+functions are char equivalent of
+.Xr strftime 3
+and
+.Xr strftime_l 3
 .Sh SEE ALSO
 .Xr strftime 3
+.Xr strftime_l 3
+.Xr xlocale 3
diff -ruN src/lib/libc/Symbols.list.orig  src/lib/libc/Symbols.list
--- src/lib/libc/Symbols.list.orig	Mon Aug 22 05:14:08 2016
+++ src/lib/libc/Symbols.list	Mon Aug 22 05:15:55 2016
@@ -1718,6 +1718,7 @@
 strftime
 strftime_l
 strptime
+strptime_l
 time2posix
 timegm
 timelocal
@@ -1726,6 +1727,7 @@
 tzset
 tzsetwall
 wcsftime
+wcsftime_l
 
 /* uuid */
 uuid_compare
diff -ruN src61-orig/lib/libc/hidden/time.h src/lib/libc/hidden/time.h
--- src61-orig/lib/libc/hidden/time.h	Sat May  7 14:05:22 2016
+++ src/lib/libc/hidden/time.h	Tue May 16 08:11:18 2017
@@ -24,6 +24,13 @@
 extern PROTO_NORMAL(tzname);
 #endif
 
+
+__BEGIN_HIDDEN_DECLS
+typedef struct  _xlocale *locale_t;
+size_t	 strftime_l(char * __restrict, size_t, const char * __restrict,
+	    const struct tm * __restrict, locale_t); 
+__END_HIDDEN_DECLS
+
 PROTO_NORMAL(asctime);
 PROTO_NORMAL(asctime_r);
 PROTO_STD_DEPRECATED(clock);
@@ -41,7 +48,7 @@
 PROTO_NORMAL(mktime);
 PROTO_CANCEL(nanosleep);
 PROTO_NORMAL(strftime);
-PROTO_DEPRECATED(strftime_l);
+PROTO_NORMAL(strftime_l);
 PROTO_NORMAL(strptime);
 PROTO_NORMAL(time);
 PROTO_DEPRECATED(timegm);

diff -ruN src-m/lib/libc/locale/nl_langinfo_l.c.orig src/lib/libc/locale/nl_langinfo_l.c
--- src-m/lib/libc/locale/nl_langinfo_l.c.orig	Sun Dec 10 06:31:51 2017
+++ src/lib/libc/locale/nl_langinfo_l.c	Sun Dec 10 06:28:37 2017
@@ -41,25 +41,26 @@
 
 	FIX_LOCALE(locale); 
 	struct lconv *lc = &locale->lconv;
+	_TimeLocale *lt = &((struct xlocale_time *)locale->components[XLC_TIME])->locale;
 	_RuneLocale *lr = XLOCALE_CTYPE(locale)->runes;
 
 
 	switch (item) {
 	case D_T_FMT:
-		s = _CurrentTimeLocale->d_t_fmt;
+		s = lt->d_t_fmt;
 		break;
 	case D_FMT:
-		s = _CurrentTimeLocale->d_fmt;
+		s = lt->d_fmt;
 		break;
 	case T_FMT:
-		s = _CurrentTimeLocale->t_fmt;
+		s = lt->t_fmt;
 		break;
 	case T_FMT_AMPM:
-		s = _CurrentTimeLocale->t_fmt_ampm;
+		s = lt->t_fmt_ampm;
 		break;
 	case AM_STR:
 	case PM_STR:
-		s = _CurrentTimeLocale->am_pm[item - AM_STR];
+		s = lt->am_pm[item - AM_STR];
 		break;
 	case DAY_1:
 	case DAY_2:
@@ -68,7 +69,7 @@
 	case DAY_5:
 	case DAY_6:
 	case DAY_7:
-		s = _CurrentTimeLocale->day[item - DAY_1];
+		s = lt->day[item - DAY_1];
 		break;
 	case ABDAY_1:
 	case ABDAY_2:
@@ -77,7 +78,7 @@
 	case ABDAY_5:
 	case ABDAY_6:
 	case ABDAY_7:
-		s = _CurrentTimeLocale->abday[item - ABDAY_1];
+		s = lt->abday[item - ABDAY_1];
 		break;
 	case MON_1:
 	case MON_2:
@@ -91,7 +92,7 @@
 	case MON_10:
 	case MON_11:
 	case MON_12:
-		s = _CurrentTimeLocale->mon[item - MON_1];
+		s = lt->mon[item - MON_1];
 		break;
 	case ABMON_1:
 	case ABMON_2:
@@ -105,7 +106,7 @@
 	case ABMON_10:
 	case ABMON_11:
 	case ABMON_12:
-		s = _CurrentTimeLocale->abmon[item - ABMON_1];
+		s = lt->abmon[item - ABMON_1];
 		break;
 	case RADIXCHAR:
 		s = lc->decimal_point;
