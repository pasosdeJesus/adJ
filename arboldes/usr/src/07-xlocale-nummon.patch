diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-x6/lib/libc/gdtoa/gdtoaimp.h src/lib/libc/gdtoa/gdtoaimp.h
--- src56-x6/lib/libc/gdtoa/gdtoaimp.h 	Fri Sep 26 07:55:22 2014
+++ src/lib/libc/gdtoa/gdtoaimp.h	Fri Sep 26 07:49:05 2014
@@ -491,7 +491,7 @@
 #define dtoa __dtoa
 #define gdtoa __gdtoa
 #define freedtoa __freedtoa
-#define strtodg __strtodg
+#define strtodg_l __strtodg_l
 #define g_ddfmt __g_ddfmt
 #define g_dfmt __g_dfmt
 #define g_ffmt __g_ffmt
@@ -508,7 +508,7 @@
 #define strtordd __strtordd
 #define strtorf __strtorf
 #define strtorQ __strtorQ
-#define strtorx __strtorx
+#define strtorx_l __strtorx_l
 #define strtorxL __strtorxL
 #define strtodI __strtodI
 #define strtopd __strtopd
@@ -587,7 +587,7 @@
  extern void decrement ANSI((Bigint*));
  extern Bigint *diff ANSI((Bigint*, Bigint*));
  extern char *g__fmt ANSI((char*, char*, char*, int, ULong, size_t));
- extern int gethex ANSI((CONST char**, FPI*, Long*, Bigint**, int));
+ extern int gethex ANSI((CONST char**, FPI*, Long*, Bigint**, int, locale_t));
  extern void __hexdig_init_D2A(Void);
  extern int hexnan ANSI((CONST char**, FPI*, ULong*));
  extern int hi0bits_D2A ANSI((ULong));
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-x6/lib/libc/gdtoa/gdtoa.h src/lib/libc/gdtoa/gdtoa.h
--- src56-x6/lib/libc/gdtoa/gdtoa.h 	Fri Sep 26 07:56:59 2014
+++ src/lib/libc/gdtoa/gdtoa.h	Fri Sep 26 07:59:33 2014
@@ -34,6 +34,7 @@
 
 #include "arith.h"
 #include <stddef.h> /* for size_t */
+#include <xlocale.h> /* for size_t */
 
 #ifndef Long
 #define Long int
@@ -109,9 +110,9 @@
 extern char* __gdtoa ANSI((FPI *fpi, int be, ULong *bits, int *kindp,
 			int mode, int ndigits, int *decpt, char **rve));
 extern void __freedtoa ANSI((char*));
-extern float  strtof ANSI((CONST char *, char **));
+extern float  strtof_l ANSI((CONST char *, char **, locale_t));
 extern double strtod ANSI((CONST char *, char **));
-extern int __strtodg ANSI((CONST char*, char**, FPI*, Long*, ULong*));
+extern int __strtodg_l ANSI((CONST char*, char**, FPI*, Long*, ULong*, locale_t));
 char	*__hdtoa(double, const char *, int, int *, int *, char **);
 char	*__hldtoa(long double, const char *, int, int *, int *, char **);
 char	*__ldtoa(long double *, int, int, int *, int *, char **);
@@ -141,7 +142,7 @@
 extern int	__strtordd ANSI((CONST char*, char**, int, double*));
 extern int	__strtorf  ANSI((CONST char*, char**, int, float*));
 extern int	__strtorQ  ANSI((CONST char*, char**, int, void*));
-extern int	__strtorx  ANSI((CONST char*, char**, int, void*));
+extern int	__strtorx_l  ANSI((CONST char*, char**, int, void*, locale_t));
 extern int	__strtorxL ANSI((CONST char*, char**, int, void*));
 #if 1
 extern int	__strtodI  ANSI((CONST char*, char**, double*));
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/amd64/gdtoa/strtold.c src/lib/libc/arch/amd64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/amd64/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/amd64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,15 +32,24 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
+#include "locale/xlocale_private.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorx(s, sp, FLT_ROUNDS, &result);
+	strtorx_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
+}
+DEF_WEAK(strtold_l);
+
+long double
+strtold(const char * __restrict s, char ** __restrict sp)
+{
+	return strtold_l(s, sp, __get_locale());
 }
 DEF_STRONG(strtold);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/i386/gdtoa/strtold.c src/lib/libc/arch/i386/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/i386/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/i386/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorx(s, sp, FLT_ROUNDS, &result);
+	strtorx_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/mips64/gdtoa/strtold.c src/lib/libc/arch/mips64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/mips64/gdtoa/strtold.c	Sun Sep  7 15:36:07 2008
+++ src/lib/libc/arch/mips64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorQ(s, sp, FLT_ROUNDS, &result);
+	strtorQ_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/arch/sparc64/gdtoa/strtold.c src/lib/libc/arch/sparc64/gdtoa/strtold.c
--- src54-x6/lib/libc/arch/sparc64/gdtoa/strtold.c	Sun Sep  7 15:36:08 2008
+++ src/lib/libc/arch/sparc64/gdtoa/strtold.c	Tue Dec  3 16:12:24 2013
@@ -32,14 +32,15 @@
  */
 
 #include <float.h>
+#include <xlocale.h>
 
 #include "gdtoaimp.h"
 
 long double
-strtold(const char * __restrict s, char ** __restrict sp)
+strtold_l(const char * __restrict s, char ** __restrict sp, locale_t locale)
 {
 	long double result;
 
-	strtorQ(s, sp, FLT_ROUNDS, &result);
+	strtorQ_l(s, sp, FLT_ROUNDS, &result, locale);
 	return result;
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtod.c src/lib/libc/gdtoa/strtod.c
--- src54-x6/lib/libc/gdtoa/strtod.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtod.c	Wed Dec  4 03:40:45 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 #ifndef NO_FENV_H
 #include <fenv.h>
@@ -37,6 +39,7 @@
 #ifdef USE_LOCALE
 #include "locale.h"
 #endif
+#include "../locale/xlocale_private.h"
 
 #ifdef IEEE_Arith
 #ifndef NO_IEEE_Scale
@@ -80,11 +83,11 @@
 #endif /*}*/
 
  double
-strtod
+strtod_l
 #ifdef KR_headers
-	(s00, se) CONST char *s00; char **se;
+	(s00, se, loc) CONST char *s00; char **se; locale_t loc;
 #else
-	(CONST char *s00, char **se)
+	(CONST char *s00, char **se, locale_t loc)
 #endif
 {
 #ifdef Avoid_Underflow
@@ -105,20 +108,8 @@
 	int inexact, oldinexact;
 #endif
 #ifdef USE_LOCALE /*{{*/
-#ifdef NO_LOCALE_CACHE
-	char *decimalpoint = localeconv()->decimal_point;
+	char *decimalpoint = localeconv_l(loc)->decimal_point;
 	int dplen = strlen(decimalpoint);
-#else
-	char *decimalpoint;
-	static char *decimalpoint_cache;
-	static int dplen;
-	if (!(s0 = decimalpoint_cache)) {
-		s0 = localeconv()->decimal_point;
-		decimalpoint_cache = strdup(s0);
-		dplen = strlen(s0);
-		}
-	decimalpoint = (char*)s0;
-#endif /*NO_LOCALE_CACHE*/
 #else  /*USE_LOCALE}{*/
 #define dplen 1
 #endif /*USE_LOCALE}}*/
@@ -176,7 +167,7 @@
 #else
 #define fpi1 fpi
 #endif
-			switch((i = gethex(&s, &fpi1, &exp, &bb, sign)) & STRTOG_Retmask) {
+			switch((i = gethex(&s, &fpi1, &exp, &bb, sign, loc)) & STRTOG_Retmask) {
 			  case STRTOG_NoMemory:
 				goto ovfl;
 			  case STRTOG_NoNumber:
@@ -1098,5 +1089,12 @@
 	if (se)
 		*se = (char *)s;
 	return sign ? -dval(&rv) : dval(&rv);
-	}
+}
+DEF_WEAK(strtod_l);
+
+double
+strtod(const char *s00, char **se)
+{
+	return strtod_l(s00, se, __get_locale());
+}
 DEF_STRONG(strtod);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtodg.c src/lib/libc/gdtoa/strtodg.c
--- src54-x6/lib/libc/gdtoa/strtodg.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtodg.c	Wed Dec  4 03:41:55 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #ifdef USE_LOCALE
@@ -334,12 +336,12 @@
 	}
 
  int
-strtodg
+strtodg_l
 #ifdef KR_headers
-	(s00, se, fpi, exp, bits)
-	CONST char *s00; char **se; FPI *fpi; Long *exp; ULong *bits;
+	(s00, se, fpi, exp, bits, loc)
+	CONST char *s00; char **se; FPI *fpi; Long *exp; ULong *bits; locale_t loc;
 #else
-	(CONST char *s00, char **se, FPI *fpi, Long *exp, ULong *bits)
+	(CONST char *s00, char **se, FPI *fpi, Long *exp, ULong *bits, locale_t loc)
 #endif
 {
 	int abe, abits, asub;
@@ -354,20 +356,8 @@
 	ULong *b, *be, y, z;
 	Bigint *ab, *bb, *bb1, *bd, *bd0, *bs, *delta, *rvb, *rvb0;
 #ifdef USE_LOCALE /*{{*/
-#ifdef NO_LOCALE_CACHE
-	char *decimalpoint = localeconv()->decimal_point;
+	char *decimalpoint = localeconv_l(loc)->decimal_point;
 	int dplen = strlen(decimalpoint);
-#else
-	char *decimalpoint;
-	static char *decimalpoint_cache;
-	static int dplen;
-	if (!(s0 = decimalpoint_cache)) {
-		s0 = localeconv()->decimal_point;
-		decimalpoint_cache = strdup(s0);
-		dplen = strlen(s0);
-		}
-	decimalpoint = (char*)s0;
-#endif /*NO_LOCALE_CACHE*/
 #else  /*USE_LOCALE}{*/
 #define dplen 1
 #endif /*USE_LOCALE}}*/
@@ -406,7 +396,7 @@
 		switch(s[1]) {
 		  case 'x':
 		  case 'X':
-			irv = gethex(&s, fpi, exp, &rvb, sign);
+			irv = gethex(&s, fpi, exp, &rvb, sign, loc);
 			if (irv == STRTOG_NoMemory)
 				return (STRTOG_NoMemory);
 			if (irv == STRTOG_NoNumber) {
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-x6/lib/libc/gdtoa/gethex.c src/lib/libc/gdtoa/gethex.c
--- src56-x6/lib/libc/gdtoa/gethex.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/gethex.c	Tue Dec  3 16:12:24 2013
@@ -29,18 +29,20 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+
 #include "gdtoaimp.h"
 
 #ifdef USE_LOCALE
+#include <xlocale.h>
 #include "locale.h"
 #endif
 
  int
 #ifdef KR_headers
-gethex(sp, fpi, exp, bp, sign)
-	CONST char **sp; FPI *fpi; Long *exp; Bigint **bp; int sign;
+gethex(sp, fpi, exp, bp, sign, loc)
+	CONST char **sp; FPI *fpi; Long *exp; Bigint **bp; int sign; locale_t loc;
 #else
-gethex( CONST char **sp, FPI *fpi, Long *exp, Bigint **bp, int sign)
+gethex( CONST char **sp, FPI *fpi, Long *exp, Bigint **bp, int sign, locale_t loc)
 #endif
 {
 	Bigint *b;
@@ -50,17 +52,7 @@
 	Long e, e1;
 #ifdef USE_LOCALE
 	int i;
-#ifdef NO_LOCALE_CACHE
-	const unsigned char *decimalpoint = (unsigned char*)localeconv()->decimal_point;
-#else
-	const unsigned char *decimalpoint;
-	static unsigned char *decimalpoint_cache;
-	if (!(s0 = decimalpoint_cache)) {
-		s0 = (unsigned char*)localeconv()->decimal_point;
-		decimalpoint_cache = strdup(s0);
-	}
-	decimalpoint = s0;
-#endif
+	const unsigned char *decimalpoint = (unsigned char*)localeconv_l(loc)->decimal_point;
 #endif
 
 	if (!hexdig['0'])
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtof.c src/lib/libc/gdtoa/strtof.c
--- src54-x6/lib/libc/gdtoa/strtof.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtof.c	Tue Dec  3 16:12:24 2013
@@ -29,13 +29,14 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include "../locale/xlocale_private.h"
 #include "gdtoaimp.h"
 
  float
 #ifdef KR_headers
-strtof(s, sp) CONST char *s; char **sp;
+strtof_l(s, sp, locale) CONST char *s; char **sp; locale_t locale;
 #else
-strtof(CONST char *s, char **sp)
+strtof_l(CONST char *s, char **sp, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 24, 1-127-24+1,  254-127-24+1, 1, SI };
@@ -49,7 +50,7 @@
 #define fpi &fpi0
 #endif
 
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	switch(k & STRTOG_Retmask) {
 	  case STRTOG_NoNumber:
 	  case STRTOG_Zero:
@@ -78,5 +79,12 @@
 	if (k & STRTOG_Neg)
 		u.L[0] |= 0x80000000L;
 	return u.f;
-	}
+}
+DEF_WEAK(strtof_l);
+
+float
+strtof(const char *s, char **sp)
+{
+	return strtof_l(s, sp, __get_locale());
+}
 DEF_STRONG(strtof);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtorQ.c src/lib/libc/gdtoa/strtorQ.c
--- src54-x6/lib/libc/gdtoa/strtorQ.c	Sat Oct 24 12:01:37 2009
+++ src/lib/libc/gdtoa/strtorQ.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #undef _0
@@ -97,9 +99,10 @@
 
  int
 #ifdef KR_headers
-strtorQ(s, sp, rounding, L) CONST char *s; char **sp; int rounding; void *L;
+strtorQ_l(s, sp, rounding, L, locale) CONST char *s; char **sp; int rounding;
+void *L; locale_t locale;
 #else
-strtorQ(CONST char *s, char **sp, int rounding, void *L)
+strtorQ_l(CONST char *s, char **sp, int rounding, void *L, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 113, 1-16383-113+1, 32766-16383-113+1, 1, SI };
@@ -114,7 +117,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits);
 	ULtoQ((ULong*)L, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtord.c src/lib/libc/gdtoa/strtord.c
--- src54-x6/lib/libc/gdtoa/strtord.c	Sat Oct 24 12:01:37 2009
+++ src/lib/libc/gdtoa/strtord.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
  void
@@ -73,9 +75,10 @@
 
  int
 #ifdef KR_headers
-strtord(s, sp, rounding, d) CONST char *s; char **sp; int rounding; double *d;
+strtord_l(s, sp, rounding, d, locale) CONST char *s; char **sp; int rounding;
+double *d; locale_t locale;
 #else
-strtord(CONST char *s, char **sp, int rounding, double *d)
+strtord_l(CONST char *s, char **sp, int rounding, double *d, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 53, 1-1023-53+1, 2046-1023-53+1, 1, SI };
@@ -90,7 +93,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	ULtod((ULong*)d, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/gdtoa/strtorx.c src/lib/libc/gdtoa/strtorx.c
--- src54-x6/lib/libc/gdtoa/strtorx.c	Wed Jul 20 13:24:47 2011
+++ src/lib/libc/gdtoa/strtorx.c	Tue Dec  3 16:12:24 2013
@@ -29,6 +29,8 @@
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
 
+#include <xlocale.h>
+
 #include "gdtoaimp.h"
 
 #undef _0
@@ -100,9 +102,10 @@
 
  int
 #ifdef KR_headers
-strtorx(s, sp, rounding, L) CONST char *s; char **sp; int rounding; void *L;
+strtorx_l(s, sp, rounding, L, locale) CONST char *s; char **sp; int rounding;
+void *L; locale_t locale;
 #else
-strtorx(CONST char *s, char **sp, int rounding, void *L)
+strtorx_l(CONST char *s, char **sp, int rounding, void *L, locale_t locale)
 #endif
 {
 	static FPI fpi0 = { 64, 1-16383-64+1, 32766 - 16383 - 64 + 1, 1, SI };
@@ -117,7 +120,7 @@
 		fpi1.rounding = rounding;
 		fpi = &fpi1;
 		}
-	k = strtodg(s, sp, fpi, &exp, bits);
+	k = strtodg_l(s, sp, fpi, &exp, bits, locale);
 	ULtox((UShort*)L, bits, exp, k);
 	return k;
 	}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/wcrtomb.3 src/lib/libc/locale/wcrtomb.3
--- src54-x6/lib/libc/locale/wcrtomb.3	Tue Dec  3 16:08:11 2013
+++ src/lib/libc/locale/wcrtomb.3	Tue Dec  3 16:12:25 2013
@@ -31,6 +31,8 @@
 .Os
 .Sh NAME
 .Nm wcrtomb ,
+.Nm wcrtomb_l ,
+and
 .Nm c32rtomb
 .Nd convert a wide character to a multibyte character
 .Sh SYNOPSIS
@@ -40,6 +42,9 @@
 .Fa "const char * restrict s"
 .Fa "wchar_t wc"
 .Fa "mbstate_t * restrict mbs"
+.In xlocale.h
+.Ft size_t
+.Fn wcrtomb_l "const char * restrict s" "wchar_t wc" "mbstate_t * restrict ps" "locale_t loc"
 .Fc
 .In uchar.h
 .Ft size_t
@@ -49,7 +54,8 @@
 .Fa "mbstate_t * restrict mbs"
 .Fc
 .Sh DESCRIPTION
-.Fn wcrtomb
+.Fn wcrtomb ,
+.Fn wcrtomb_l
 and
 .Fn c32rtomb
 convert the wide character
@@ -81,7 +87,9 @@
 .Fa s
 is determined by the
 .Dv LC_CTYPE
-category of the current locale.
+category of the current locale while
+.Fn wcrtomb_l
+uses the locale given as parameter.
 .Ox
 only supports UTF-8 and ASCII output,
 and these functions are only useful for UTF-8.
@@ -139,6 +147,9 @@
 is not a valid wide character
 or if it cannot be represented in the multibyte encoding selected with
 .Dv LC_CTYPE ,
+The
+.Fn wcrtomb_l
+function is a Darwin extension.
 both functions return
 .Po Vt size_t Pc Ns \-1
 and set
@@ -163,7 +174,8 @@
 .Sh SEE ALSO
 .Xr mbrtowc 3 ,
 .Xr setlocale 3 ,
-.Xr wctomb 3
+.Xr wctomb 3 ,
+.Xr xlocale 3
 .Sh STANDARDS
 .Fn wcrtomb
 conforms to
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/iswctype.c src/lib/libc/locale/iswctype.c
--- src54-x6/lib/libc/locale/iswctype.c	Tue Dec  3 16:08:11 2013
+++ src/lib/libc/locale/iswctype.c	Tue Dec  3 16:12:25 2013
@@ -40,10 +40,13 @@
 #include <ctype.h>
 #include <errno.h>
 #include <string.h>
+
+#include "mblocal.h"
 #include "rune.h"
 #include "runetype.h"
 #include "rune_local.h"
 #include "_wctrans_local.h"
+#include "xlocale_private.h"
 
 static inline _RuneType __runetype_w(wint_t);
 static inline int __isctype_w(wint_t, _RuneType);
@@ -53,7 +56,7 @@
 static inline _RuneType
 __runetype_w(wint_t c)
 {
-	_RuneLocale *rl = _CurrentRuneLocale();
+	_RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
 	return (_RUNE_ISCACHED(c) ?
 		rl->rl_runetype[c] : ___runetype_mb(c, rl));
@@ -68,13 +71,13 @@
 static inline wint_t
 __toupper_w(wint_t c)
 {
-	return (_towctrans(c, _wctrans_upper(_CurrentRuneLocale())));
+	return (_towctrans(c, _wctrans_upper(XLOCALE_CTYPE(__get_locale())->runes)));
 }
 
 static inline wint_t
 __tolower_w(wint_t c)
 {
-	return (_towctrans(c, _wctrans_lower(_CurrentRuneLocale())));
+	return (_towctrans(c, _wctrans_lower(XLOCALE_CTYPE(__get_locale())->runes)));
 }
 
 int
@@ -177,7 +180,7 @@
 wctrans(const char *charclass)
 {
 	int i;
-	_RuneLocale *rl = _CurrentRuneLocale();
+	_RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
 	if (rl->rl_wctrans[_WCTRANS_INDEX_LOWER].te_name==NULL)
 		_wctrans_init(rl);
diff -ruN src72-orig/lib/libc/locale/wctype.c src/lib/libc/locale/wctype.c
--- src72-orig/lib/libc/locale/wctype.c	Tue Oct  4 18:12:54 2022
+++ src/lib/libc/locale/wctype.c	Thu Oct  6 10:58:02 2022
@@ -52,9 +52,9 @@
 wctype(const char *property)
 {
        int i;
-       _RuneLocale *rl = _CurrentRuneLocale();
+       _RuneLocale *rl = XLOCALE_CTYPE(__get_locale())->runes;
 
-       for (i=0; i<_WCTYPE_NINDEXES; i++)
+       for (i = 0; i < _WCTYPE_NINDEXES; i++)
                if (!strcmp(rl->rl_wctype[i].te_name, property))
                        return ((wctype_t)&rl->rl_wctype[i]);
        return ((wctype_t)NULL);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/locale/mbrlen.c src/lib/libc/locale/mbrlen.c
--- src54-x6/lib/libc/locale/mbrlen.c	Tue Dec  3 16:05:32 2013
+++ src/lib/libc/locale/mbrlen.c	Tue Dec  3 22:25:11 2013
@@ -38,9 +38,10 @@
 {
 	static mbstate_t mbs;
 
-	memset(&mbs, 0, sizeof(mbs)); 
-	if (ps == NULL)
+	if (ps == NULL) {
+		memset((void *)&mbs, 0, sizeof(mbs)); 
 		ps = &mbs;
+	}
 	return (mbrtowc_l(NULL, s, n, ps, loc));
 }
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src56-x6/lib/libc/stdio/vdprintf.c src/lib/libc/stdio/vdprintf.c
--- src56-x6/lib/libc/stdio/vdprintf.c.orig	Fri Sep 26 10:31:04 2014
+++ src/lib/libc/stdio/vdprintf.c	Fri Sep 26 10:29:35 2014
@@ -67,7 +67,7 @@
 	f._cookie = &fd;
 	f._write = __dwrite;
 
-	if ((ret = __vfprintf(&f, fmt, ap)) < 0)
+	if ((ret = __vfprintf(&f, loc, fmt, ap)) < 0)
 		return ret;
 
 	return fflush(&f) ? EOF : ret;
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/asprintf.c src/lib/libc/stdio/asprintf.c
--- src54-x6/lib/libc/stdio/asprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/asprintf.c	Tue Dec  3 16:12:41 2013
@@ -22,7 +22,9 @@
 #include <errno.h>
 #include <stdarg.h>
 #include <unistd.h>
+#include <xlocale.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 #define	INITIAL_SIZE	128
 
@@ -43,7 +45,7 @@
 		goto err;
 	f._bf._size = f._w = INITIAL_SIZE - 1;	/* leave room for the NUL */
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, __get_locale(), fmt, ap);
 	va_end(ap);
 	if (ret == -1)
 		goto err;
@@ -68,3 +70,17 @@
 	return (-1);
 }
 DEF_WEAK(asprintf);
+
+
+int
+asprintf_l(char **str, locale_t loc, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vasprintf_l(str, loc, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
+DEF_WEAK(asprintf_l);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/fscanf.c src/lib/libc/stdio/fscanf.c
--- src54-x6/lib/libc/stdio/fscanf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/fscanf.c	Tue Dec  3 16:12:41 2013
@@ -33,6 +33,7 @@
 
 #include <stdio.h>
 #include <stdarg.h>
+#include <xlocale.h>
 
 /* SCANFLIKE2 */
 int
@@ -43,6 +44,18 @@
 
 	va_start(ap, fmt);
 	ret = vfscanf(fp, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
+
+int
+fscanf_l(FILE *fp, locale_t locale, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vfscanf_l(fp, locale, fmt, ap);
 	va_end(ap);
 	return (ret);
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/local.h src/lib/libc/stdio/local.h
--- src54-x6/lib/libc/stdio/local.h	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/local.h	Tue Dec  3 16:12:41 2013
@@ -38,6 +38,7 @@
  */
 
 #include <wchar.h> 
+#include <xlocale.h> 
 #include "wcio.h"
 #include "fileext.h"
 
@@ -58,8 +59,8 @@
 int	__sflags(const char *, int *);
 wint_t __fgetwc_unlock(FILE *);
 wint_t	__ungetwc(wint_t, FILE *);
-int	__vfprintf(FILE *, const char *, __va_list);
-int	__svfscanf(FILE * __restrict, const char * __restrict, __va_list);
+int	__vfprintf(FILE *, locale_t, const char *, __va_list);
+int	__svfscanf(FILE * __restrict, locale_t, const char * __restrict, __va_list);
 int	__vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
 int	__vfwscanf(FILE * __restrict, const wchar_t * __restrict, __va_list);
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/scanf.c src/lib/libc/stdio/scanf.c
--- src54-x6/lib/libc/stdio/scanf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/scanf.c	Tue Dec  3 16:12:41 2013
@@ -33,6 +33,7 @@
 
 #include <stdio.h>
 #include <stdarg.h>
+#include <xlocale.h>
 
 int
 scanf(const char *fmt, ...)
@@ -46,3 +47,15 @@
 	return (ret);
 }
 DEF_STRONG(scanf);
+
+int
+scanf_l(locale_t locale, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vfscanf_l(stdin, locale, fmt, ap);
+	va_end(ap);
+	return (ret);
+}
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/snprintf.c src/lib/libc/stdio/snprintf.c
--- src54-x6/lib/libc/stdio/snprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/snprintf.c	Tue Dec  3 16:12:41 2013
@@ -35,34 +35,33 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
+
 #include "local.h"
+#include "locale/xlocale_private.h"
 
+
 int
 snprintf(char *str, size_t n, const char *fmt, ...)
 {
+	int ret;
+ 	va_list ap;
+
+	va_start(ap, fmt);
+	ret = vsnprintf(str, n, fmt, ap);
+	va_end(ap);
+
+	return ret;
+}
+DEF_STRONG(snprintf);
+
+int
+snprintf_l(char *str, size_t n, locale_t loc, const char *fmt, ...)
+{
 	va_list ap;
 	int ret;
-	char dummy;
-	FILE f;
-	struct __sfileext fext;
 
-	/* While snprintf(3) specifies size_t stdio uses an int internally */
-	if (n > INT_MAX)
-		n = INT_MAX;
-	/* Stdio internals do not deal correctly with zero length buffer */
-	if (n == 0) {
-		str = &dummy;
-		n = 1;
-	}
-	_FILEEXT_SETUP(&f, &fext);
-	f._file = -1;
-	f._flags = __SWR | __SSTR;
-	f._bf._base = f._p = (unsigned char *)str;
-	f._bf._size = f._w = n - 1;
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = vsnprintf_l(str, n, loc, fmt, ap);
 	va_end(ap);
-	*f._p = '\0';
 	return (ret);
 }
-DEF_STRONG(snprintf);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/sprintf.c src/lib/libc/stdio/sprintf.c
--- src54-x6/lib/libc/stdio/sprintf.c	Sat Jun 25 00:32:56 2011
+++ src/lib/libc/stdio/sprintf.c	Tue Dec  3 16:12:41 2013
@@ -35,7 +35,9 @@
 #include <string.h>
 #include <stdarg.h>
 #include <limits.h>
+
 #include "local.h"
+#include "locale/xlocale_private.h"
 
 #if defined(APIWARN)
 __warn_references(sprintf,
@@ -56,7 +58,27 @@
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = INT_MAX;
 	va_start(ap, fmt);
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, __get_locale(), fmt, ap);
+	va_end(ap);
+	*f._p = '\0';
+	return (ret);
+}
+
+int
+sprintf_l(char *str, locale_t loc, const char *fmt, ...)
+{
+	int ret;
+	va_list ap;
+	FILE f;
+	struct __sfileext fext;
+
+	_FILEEXT_SETUP(&f, &fext);
+	f._file = -1;
+	f._flags = __SWR | __SSTR;
+	f._bf._base = f._p = (unsigned char *)str;
+	f._bf._size = f._w = INT_MAX;
+	va_start(ap, fmt);
+	ret = __vfprintf(&f, loc, fmt, ap);
 	va_end(ap);
 	*f._p = '\0';
 	return (ret);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/sscanf.c src/lib/libc/stdio/sscanf.c
--- src54-x6/lib/libc/stdio/sscanf.c	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/sscanf.c	Tue Dec  3 16:12:41 2013
@@ -34,32 +34,34 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
+
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
-static int
-eofread(void *cookie, char *buf, int len)
+int
+sscanf(const char *str, const char *fmt, ...)
 {
+	int ret;
+	va_list ap;
 
-	return (0);
+	va_start(ap, fmt);
+	ret = vsscanf(str, fmt, ap);
+	va_end(ap);
+
+	return (ret);
 }
+DEF_STRONG(sscanf);
 
+
 int
-sscanf(const char *str, const char *fmt, ...)
+sscanf_l(const char *str, locale_t loc, const char *fmt, ...)
 {
 	int ret;
 	va_list ap;
-	FILE f;
-	struct __sfileext fext;
 
-	_FILEEXT_SETUP(&f, &fext);
-	f._flags = __SRD;
-	f._bf._base = f._p = (unsigned char *)str;
-	f._bf._size = f._r = strlen(str);
-	f._read = eofread;
-	f._lb._base = NULL;
 	va_start(ap, fmt);
-	ret = __svfscanf(&f, fmt, ap);
+	ret = vsscanf_l(str, loc, fmt, ap);
 	va_end(ap);
+
 	return (ret);
 }
-DEF_STRONG(sscanf);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vasprintf.c src/lib/libc/stdio/vasprintf.c
--- src54-x6/lib/libc/stdio/vasprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vasprintf.c	Tue Dec  3 16:12:41 2013
@@ -22,11 +22,12 @@
 #include <errno.h>
 #include <unistd.h>
 #include "local.h"
+#include "../locale/xlocale_private.h" 
 
 #define	INITIAL_SIZE	128
 
 int
-vasprintf(char **str, const char *fmt, __va_list ap)
+vasprintf_l(char **str, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	FILE f;
@@ -40,7 +41,7 @@
 	if (f._bf._base == NULL)
 		goto err;
 	f._bf._size = f._w = INITIAL_SIZE - 1;	/* leave room for the NUL */
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	if (ret == -1)
 		goto err;
 	*f._p = '\0';
@@ -63,4 +64,11 @@
 	errno = ENOMEM;
 	return (-1);
 }
+
+int
+vasprintf(char **str, const char *fmt, __va_list ap)
+{
+	return vasprintf_l(str, __get_locale(), fmt, ap);
+}
+
 DEF_WEAK(vasprintf);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vfprintf.c src/lib/libc/stdio/vfprintf.c
--- src54-x6/lib/libc/stdio/vfprintf.c	Wed Dec 11 21:53:32 2013
+++ src/lib/libc/stdio/vfprintf.c	Fri Dec 13 15:24:15 2013
@@ -57,10 +57,13 @@
 #include <unistd.h>
 #include <syslog.h>
 #include <wchar.h>
+#include <xlocale.h>
 
 #include "fvwrite.h"
 #include "local.h"
 #include "localedef.h"
+#include "../locale/mblocal.h"
+#include "../locale/xlocale_private.h"
 
 union arg {
 	int			intarg;
@@ -104,7 +107,7 @@
 };
 
 static int __find_arguments(const char *fmt0, va_list ap, union arg **argtable,
-    size_t *argtablesiz);
+    size_t *argtablesiz, locale_t locale);
 static int __grow_type_table(unsigned char **typetable, int *tablesize);
 
 /*
@@ -112,7 +115,7 @@
  * then reset it so that it can be reused.
  */
 static int
-__sprint(FILE *fp, struct __suio *uio)
+__sprint(FILE *fp, struct __suio *uio, locale_t locale)
 {
 	int err;
 
@@ -132,7 +135,7 @@
  * worries about ungetc buffers and so forth.
  */
 static int
-__sbprintf(FILE *fp, const char *fmt, va_list ap)
+__sbprintf(FILE *fp, locale_t locale, const char *fmt, va_list ap)
 {
 	int ret;
 	FILE fake;
@@ -152,7 +155,7 @@
 	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 
 	/* do the work, then copy any error status */
-	ret = __vfprintf(&fake, fmt, ap);
+	ret = __vfprintf(&fake, locale, fmt, ap);
 	if (ret >= 0 && __sflush(&fake))
 		ret = EOF;
 	if (fake._flags & __SERR)
@@ -276,26 +279,43 @@
 	int ret;
 
 	FLOCKFILE(fp);
-	ret = __vfprintf(fp, fmt0, ap);
+	ret = __vfprintf(fp, __get_locale(), fmt0, ap);
 	FUNLOCKFILE(fp);
 	return (ret);
 }
 DEF_STRONG(vfprintf);
 
+int
+vfprintf_l(FILE * __restrict fp, locale_t loc, const char * __restrict fmt0, va_list ap)
+{
+	int ret;
+	FIX_LOCALE(loc);
 
+	FLOCKFILE(fp);
+	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
+	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
+			fp->_file >= 0)
+		ret = __sbprintf(fp, loc, fmt0, ap);
+	else
+		ret = __vfprintf(fp, loc, fmt0, ap);
+
+	FUNLOCKFILE(fp);
+	return (ret);
+}
+
 /*
  * Initialize the thousands' grouping state in preparation to print a
  * number with ndigits digits. This routine returns the total number
  * of bytes that will be needed.
  */
 static int
-grouping_init(struct grouping_state *gs, int ndigits)
+grouping_init(struct grouping_state *gs, int ndigits, locale_t loc)
 {
-	struct lconv *locale;
+	struct lconv *lconv;
 
-	locale = localeconv();
-	gs->grouping = locale->grouping;
-	gs->thousands_sep = locale->thousands_sep;
+	lconv = localeconv_l(loc);
+	gs->grouping = lconv->grouping;
+	gs->thousands_sep = lconv->thousands_sep;
 	gs->thousep_len = strlen(gs->thousands_sep);
 
 	gs->nseps = gs->nrepeats = 0;
@@ -318,14 +338,14 @@
 
 char *
 __print_intdec(int flags, uintmax_t _umax, char *cp, 
-		struct grouping_state gs)
+		struct grouping_state gs, locale_t locale)
 {
 	const char *grp = NULL;	/* Size of next group of digits */
 	int ndig, i;
 
 	/* many numbers are 1 digit */
 	if (flags & GROUPING) {
-		grouping_init(&gs, 0);
+		grouping_init(&gs, 0, locale);
 		grp = gs.grouping;
 	} 
 	ndig = 0;
@@ -353,7 +373,7 @@
 }
 
 int
-__vfprintf(FILE *fp, const char *fmt0, __va_list ap)
+__vfprintf(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
 {
 	char *fmt;		/* format string */
 	int ch;			/* character from fmt */
@@ -381,7 +401,7 @@
 	 * D:	expchar holds this character; '\0' if no exponent, e.g. %f
 	 * F:	at least two digits for decimal, at least one digit for hex
 	 */
-	const char *decimal_point = nl_langinfo(RADIXCHAR);
+	const char *decimal_point = localeconv_l(locale)->decimal_point;
 	if (strlen(decimal_point) > 1) {
 		decimal_point = "."; // POSIX
 	}
@@ -443,7 +463,7 @@
 	uio.uio_resid += (len); \
 	iovp++; \
 	if (++uio.uio_iovcnt >= NIOV) { \
-		if (__sprint(fp, &uio)) \
+		if (__sprint(fp, &uio, locale)) \
 			goto error; \
 		iovp = iov; \
 	} \
@@ -466,7 +486,7 @@
 	PAD((len) - (n2 > 0 ? n2 : 0), (with));	\
 } while(0)
 #define	FLUSH() do { \
-	if (uio.uio_resid && __sprint(fp, &uio)) \
+	if (uio.uio_resid && __sprint(fp, &uio, locale)) \
 		goto error; \
 	uio.uio_iovcnt = 0; \
 	iovp = iov; \
@@ -544,7 +564,7 @@
 		if (argtable == NULL) { \
 			argtable = statargtable; \
 			if (__find_arguments(fmt0, orgap, &argtable, \
-			    &argtablesiz) == -1) { \
+			    &argtablesiz, locale) == -1) { \
 				ret = -1; \
 				goto error; \
 			} \
@@ -573,11 +593,6 @@
 		return (EOF);
 	}
 
-	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
-	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
-	    fp->_file >= 0)
-		return (__sbprintf(fp, fmt0, ap));
-
 	fmt = (char *)fmt0;
 	argtable = NULL;
 	nextarg = 1;
@@ -669,7 +684,7 @@
 				if (argtable == NULL) {
 					argtable = statargtable;
 					if (__find_arguments(fmt0, orgap,
-					    &argtable, &argtablesiz) == -1) {
+					    &argtable, &argtablesiz, locale) == -1) {
 						ret = -1;
 						goto error;
 					}
@@ -698,7 +713,7 @@
 				if (argtable == NULL) {
 					argtable = statargtable;
 					if (__find_arguments(fmt0, orgap,
-					    &argtable, &argtablesiz) == -1) {
+					    &argtable, &argtablesiz, locale) == -1) {
 						ret = -1;
 						goto error;
 					}
@@ -747,8 +762,8 @@
 				size_t mbseqlen;
 
 				memset(&mbs, 0, sizeof(mbs));
-				mbseqlen = wcrtomb(buf,
-				    (wchar_t)GETARG(wint_t), &mbs);
+				mbseqlen = wcrtomb_l(buf,
+				    (wchar_t)GETARG(wint_t), &mbs, locale);
 				if (mbseqlen == (size_t)-1) {
 					ret = -1;
 					goto error;
@@ -907,7 +922,7 @@
 				if (prec || flags & ALT)
 					size += prec + 1;
 				if ((flags & GROUPING) && expt > 0) 
-					size += grouping_init(&gs, expt);
+					size += grouping_init(&gs, expt, locale);
 				lead = expt;
 			}
 			break;
@@ -1051,7 +1066,7 @@
 
 				case DEC:
 					cp = __print_intdec(flags, _umax, 
-							cp, gs);
+							cp, gs, locale);
 					break;
 
 				case HEX:
@@ -1251,7 +1266,7 @@
  */
 static int
 __find_arguments(const char *fmt0, va_list ap, union arg **argtable,
-    size_t *argtablesiz)
+    size_t *argtablesiz, locale_t locale)
 {
 	char *fmt;		/* format string */
 	int ch;			/* character from fmt */
@@ -1317,6 +1332,8 @@
 	tablemax = 0;
 	nextarg = 1;
 	memset(typetable, T_UNUSED, STATIC_ARG_TBL_SIZE);
+
+	FIX_LOCALE(locale);
 
 	/*
 	 * Scan the format for conversions (`%' character).
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vfscanf.c src/lib/libc/stdio/vfscanf.c
--- src54-x6/lib/libc/stdio/vfscanf.c	Wed Dec 11 21:53:32 2013
+++ src/lib/libc/stdio/vfscanf.c	Fri Dec 13 15:26:11 2013
@@ -41,6 +41,8 @@
 #include <string.h>
 #include <wctype.h>
 #include "local.h"
+#include "../locale/mblocal.h"
+#include "../locale/xlocale_private.h"
 
 #ifdef FLOATING_POINT
 #include "floatio.h"
@@ -97,7 +99,7 @@
  * Internal, unlocked version of vfscanf
  */
 int
-__svfscanf(FILE *fp, const char *fmt0, __va_list ap)
+__svfscanf(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
 {
 	u_char *fmt = (u_char *)fmt0;
 	int c;		/* character from format, or conversion */
@@ -131,9 +133,9 @@
 		c = *fmt++;
 		if (c == 0)
 			return (nassigned);
-		if (isspace(c)) {
+		if (isspace_l(c, locale)) {
 			while ((fp->_r > 0 || __srefill(fp) == 0) &&
-			    isspace(*fp->_p))
+			    isspace_l(*fp->_p, locale))
 				nread++, fp->_r--, fp->_p++;
 			continue;
 		}
@@ -317,7 +319,7 @@
 		 * that suppress this.
 		 */
 		if ((flags & NOSKIP) == 0) {
-			while (isspace(*fp->_p)) {
+			while (isspace_l(*fp->_p, locale)) {
 				nread++;
 				if (--fp->_r > 0)
 					fp->_p++;
@@ -356,7 +358,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -438,7 +441,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -446,8 +450,8 @@
 					if (nconv == 0)
 						*wcp = L'\0';
 					if (nconv != (size_t)-2) {
-						if (wctob(*wcp) != EOF &&
-						    !ccltab[wctob(*wcp)]) {
+						int b = wctob_l(*wcp, locale);
+						if (b != EOF && !ccltab[b]) {
 							while (n != 0) {
 								n--;
 								ungetc(buf[n],
@@ -533,7 +537,7 @@
 				else
 					wcp = &twc;
 				n = 0;
-				while (!isspace(*fp->_p) && width != 0) {
+				while (!isspace_l(*fp->_p, locale) && width != 0) {
 					if (n == MB_CUR_MAX) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -542,7 +546,8 @@
 					fp->_p++;
 					fp->_r--;
 					bzero(&mbs, sizeof(mbs));
-					nconv = mbrtowc(wcp, buf, n, &mbs);
+					nconv = XLOCALE_CTYPE(locale)->__mbrtowc(
+					    wcp, buf, n, &mbs);
 					if (nconv == (size_t)-1) {
 						fp->_flags |= __SERR;
 						goto input_failure;
@@ -580,7 +585,7 @@
 #endif /* SCANF_WIDE_CHAR */
 			if (flags & SUPPRESS) {
 				n = 0;
-				while (!isspace(*fp->_p)) {
+				while (!isspace_l(*fp->_p, locale)) {
 					n++, fp->_r--, fp->_p++;
 					if (--width == 0)
 						break;
@@ -590,7 +595,7 @@
 				nread += n;
 			} else {
 				p0 = p = va_arg(ap, char *);
-				while (!isspace(*fp->_p)) {
+				while (!isspace_l(*fp->_p, locale)) {
 					fp->_r--;
 					*p++ = *fp->_p++;
 					if (--width == 0)
@@ -732,9 +737,9 @@
 
 				*p = '\0';
 				if (flags & UNSIGNED)
-					res = strtoumax(buf, NULL, base);
+					res = strtoumax_l(buf, NULL, base, locale);
 				else
-					res = strtoimax(buf, NULL, base);
+					res = strtoimax_l(buf, NULL, base, locale);
 				if (flags & POINTER)
 					*va_arg(ap, void **) =
 					    (void *)(uintptr_t)res;
@@ -771,7 +776,7 @@
 				width = sizeof(buf) - 2;
 			width++;
 #endif
-			decimal_point=localeconv()->decimal_point;
+			decimal_point=localeconv_l(locale)->decimal_point;
 			if (strlen(decimal_point) > 1) {
 				decimal_point="."; // POSIX
 			}
@@ -841,14 +846,14 @@
 			if ((flags & SUPPRESS) == 0) {
 				*p = '\0';
 				if (flags & LONGDBL) {
-					long double res = strtold(buf,
-					    (char **)NULL);
+					long double res = strtold_l(buf,
+					    (char **)NULL, locale);
 					*va_arg(ap, long double *) = res;
 				} else if (flags & LONG) {
-					double res = strtod(buf, (char **)NULL);
+					double res = strtod_l(buf, (char **)NULL, locale);
 					*va_arg(ap, double *) = res;
 				} else {
-					float res = strtof(buf, (char **)NULL);
+					float res = strtof_l(buf, (char **)NULL, locale);
 					*va_arg(ap, float *) = res;
 				}
 				nassigned++;
@@ -962,12 +967,22 @@
 }
 
 int
+vfscanf_l(FILE *fp, locale_t locale, const char *fmt0, __va_list ap)
+{
+	int r;
+
+	FLOCKFILE(fp);
+	r = __svfscanf(fp, locale, fmt0, ap);
+	FUNLOCKFILE(fp);
+	return (r);
+}
+int
 vfscanf(FILE *fp, const char *fmt0, __va_list ap)
 {
 	int r;
 
 	FLOCKFILE(fp);
-	r = __svfscanf(fp, fmt0, ap);
+	r = __svfscanf(fp, __get_locale(), fmt0, ap);
 	FUNLOCKFILE(fp);
 	return (r);
 }
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsnprintf.c src/lib/libc/stdio/vsnprintf.c
--- src54-x6/lib/libc/stdio/vsnprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vsnprintf.c	Tue Dec  3 16:12:45 2013
@@ -35,9 +35,10 @@
 #include <stdio.h>
 #include <string.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 int
-vsnprintf(char *str, size_t n, const char *fmt, __va_list ap)
+vsnprintf_l(char *str, size_t n, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	char dummy;
@@ -58,7 +59,14 @@
 	f._flags = __SWR | __SSTR;
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = n - 1;
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	*f._p = '\0';
 	return (ret);
 }
+int
+vsnprintf(char * __restrict str, size_t n, const char * __restrict fmt,
+    __va_list ap)
+{
+	return vsnprintf_l(str, n, __get_locale(), fmt, ap);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsprintf.c src/lib/libc/stdio/vsprintf.c
--- src54-x6/lib/libc/stdio/vsprintf.c	Tue Nov 10 11:28:49 2009
+++ src/lib/libc/stdio/vsprintf.c	Tue Dec  3 16:12:45 2013
@@ -35,6 +35,7 @@
 #include <string.h>
 #include <limits.h>
 #include "local.h"
+#include "../locale/xlocale_private.h"
 
 #if defined(APIWARN)
 __warn_references(vsprintf,
@@ -42,7 +43,7 @@
 #endif
 
 int
-vsprintf(char *str, const char *fmt, __va_list ap)
+vsprintf_l(char *str, locale_t locale, const char *fmt, __va_list ap)
 {
 	int ret;
 	FILE f;
@@ -53,7 +54,13 @@
 	f._flags = __SWR | __SSTR;
 	f._bf._base = f._p = (unsigned char *)str;
 	f._bf._size = f._w = INT_MAX;
-	ret = __vfprintf(&f, fmt, ap);
+	ret = __vfprintf(&f, locale, fmt, ap);
 	*f._p = '\0';
 	return (ret);
 }
+int
+vsprintf(char * __restrict str, const char * __restrict fmt, __va_list ap)
+{
+	return vsprintf_l(str, __get_locale(), fmt, ap);
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdio/vsscanf.c src/lib/libc/stdio/vsscanf.c
--- src54-x6/lib/libc/stdio/vsscanf.c	Mon Nov 14 23:11:36 2011
+++ src/lib/libc/stdio/vsscanf.c	Tue Dec  3 16:12:45 2013
@@ -33,7 +33,9 @@
 
 #include <stdio.h>
 #include <string.h>
+
 #include "local.h"
+#include "locale/xlocale_private.h"
 
 static int
 eofread(void *cookie, char *buf, int len)
@@ -43,7 +45,7 @@
 }
 
 int
-vsscanf(const char *str, const char *fmt, __va_list ap)
+vsscanf_l(const char *str, locale_t loc, const char *fmt, __va_list ap)
 {
 	FILE f;
 	struct __sfileext fext;
@@ -54,6 +56,12 @@
 	f._bf._size = f._r = strlen(str);
 	f._read = eofread;
 	f._lb._base = NULL;
-	return (__svfscanf(&f, fmt, ap));
+	return (__svfscanf(&f, loc, fmt, ap));
+}
+
+int
+vsscanf(const char *str, const char *fmt, __va_list ap)
+{
+	return vsscanf_l(str, __get_locale(), fmt, ap);
 }
 DEF_STRONG(vsscanf);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoimax.c src/lib/libc/stdlib/strtoimax.c
--- src54-x6/lib/libc/stdlib/strtoimax.c	Fri Jan 13 12:58:09 2006
+++ src/lib/libc/stdlib/strtoimax.c	Tue Dec  3 16:12:45 2013
@@ -31,6 +31,7 @@
 
 #include <ctype.h>
 #include <errno.h>
+#include "../locale/xlocale_private.h"
 #include <inttypes.h>
 
 /*
@@ -40,12 +41,14 @@
  * alphabets and digits are each contiguous.
  */
 intmax_t
-strtoimax(const char *nptr, char **endptr, int base)
+strtoimax_l(const char * __restrict nptr, char ** __restrict endptr, int base,
+    locale_t locale)
 {
 	const char *s;
 	intmax_t acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Skip white space and pick up leading +/- sign if any.
@@ -55,7 +58,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -138,3 +141,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+intmax_t
+strtoimax(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoimax_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtol.c src/lib/libc/stdlib/strtol.c
--- src54-x6/lib/libc/stdlib/strtol.c	Sat Apr 27 21:08:40 2013
+++ src/lib/libc/stdlib/strtol.c	Tue Dec  3 16:12:45 2013
@@ -32,6 +32,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to a long integer.
@@ -40,12 +41,13 @@
  * alphabets and digits are each contiguous.
  */
 long
-strtol(const char *nptr, char **endptr, int base)
+strtol_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Ensure that base is between 2 and 36 inclusive, or the special
@@ -66,7 +68,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -147,5 +149,11 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+
+long
+strtol(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtol_l(nptr, endptr, base, __get_locale());
 }
 DEF_STRONG(strtol);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoll.c src/lib/libc/stdlib/strtoll.c
--- src54-x6/lib/libc/stdlib/strtoll.c	Fri Mar 29 21:13:47 2013
+++ src/lib/libc/stdlib/strtoll.c	Tue Dec  3 16:12:45 2013
@@ -34,6 +34,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to a long long.
@@ -42,12 +43,13 @@
  * alphabets and digits are each contiguous.
  */
 long long
-strtoll(const char *nptr, char **endptr, int base)
+strtoll_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	long long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * Skip white space and pick up leading +/- sign if any.
@@ -57,7 +59,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -139,6 +141,11 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+long long
+strtoll(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoll_l(nptr, endptr, base, __get_locale());
 }
 
 __strong_alias(strtoq, strtoll);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoul.c src/lib/libc/stdlib/strtoul.c
--- src54-x6/lib/libc/stdlib/strtoul.c	Sat Apr 27 21:08:40 2013
+++ src/lib/libc/stdlib/strtoul.c	Tue Dec  3 16:12:45 2013
@@ -32,6 +32,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to an unsigned long integer.
@@ -40,12 +41,13 @@
  * alphabets and digits are each contiguous.
  */
 unsigned long
-strtoul(const char *nptr, char **endptr, int base)
+strtoul_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	unsigned long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtol for comments as to the logic used.
@@ -53,7 +55,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -100,3 +102,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+unsigned long
+strtoul(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoul_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoull.c src/lib/libc/stdlib/strtoull.c
--- src54-x6/lib/libc/stdlib/strtoull.c	Fri Mar 29 21:13:47 2013
+++ src/lib/libc/stdlib/strtoull.c	Tue Dec  3 16:12:45 2013
@@ -34,6 +34,7 @@
 #include <errno.h>
 #include <limits.h>
 #include <stdlib.h>
+#include "../locale/xlocale_private.h"
 
 /*
  * Convert a string to an unsigned long long.
@@ -42,12 +43,13 @@
  * alphabets and digits are each contiguous.
  */
 unsigned long long
-strtoull(const char *nptr, char **endptr, int base)
+strtoull_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	unsigned long long acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtoq for comments as to the logic used.
@@ -55,7 +57,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -101,6 +103,11 @@
 	if (endptr != 0)
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
+}
+unsigned long long
+strtoull(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoull_l(nptr, endptr, base, __get_locale());
 }
 
 __strong_alias(strtouq, strtoull);
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-x6/lib/libc/stdlib/strtoumax.c src/lib/libc/stdlib/strtoumax.c
--- src54-x6/lib/libc/stdlib/strtoumax.c	Fri Jan 13 12:58:09 2006
+++ src/lib/libc/stdlib/strtoumax.c	Tue Dec  3 16:12:45 2013
@@ -31,6 +31,7 @@
 
 #include <ctype.h>
 #include <errno.h>
+#include "../locale/xlocale_private.h"
 #include <inttypes.h>
 
 /*
@@ -40,12 +41,13 @@
  * alphabets and digits are each contiguous.
  */
 uintmax_t
-strtoumax(const char *nptr, char **endptr, int base)
+strtoumax_l(const char *nptr, char **endptr, int base, locale_t locale)
 {
 	const char *s;
 	uintmax_t acc, cutoff;
 	int c;
 	int neg, any, cutlim;
+	FIX_LOCALE(locale);
 
 	/*
 	 * See strtoq for comments as to the logic used.
@@ -53,7 +55,7 @@
 	s = nptr;
 	do {
 		c = (unsigned char) *s++;
-	} while (isspace(c));
+	} while (isspace_l(c, locale));
 	if (c == '-') {
 		neg = 1;
 		c = *s++;
@@ -100,3 +102,9 @@
 		*endptr = (char *) (any ? s - 1 : nptr);
 	return (acc);
 }
+uintmax_t
+strtoumax(const char * __restrict nptr, char ** __restrict endptr, int base)
+{
+	return strtoumax_l(nptr, endptr, base, __get_locale());
+}
+
diff -ruN src54-x6/lib/libc/stdlib/strfmon.3 src/lib/libc/stdlib/strfmon.3
--- src54-x6/lib/libc/stdlib/strfmon.3	Tue Dec 10 06:14:08 2013
+++ src/lib/libc/stdlib/strfmon.3	Wed Dec 11 04:35:17 2013
@@ -38,6 +38,9 @@
 .In monetary.h
 .Ft ssize_t
 .Fn strfmon "char * restrict s" "size_t maxsize" "const char * restrict format" "..."
+.In xlocale.h
+.Ft ssize_t
+.Fn strfmon_l "char * restrict s" "size_t maxsize" "locale_t loc" "const char * restrict format" "..."
 .\" ----------------------------------------------------------------------
 .Sh DESCRIPTION
 The
@@ -50,6 +53,12 @@
 .Fa maxsize
 bytes are placed into the array.
 .Pp
+The
+.Fn strfmon_l
+function does the same as
+.Fn strfmon
+but takes an explicit locale rather than using the current locale.
+.Pp
 The format string is composed of zero or more directives:
 ordinary characters (not
 .Cm % ) ,
@@ -115,6 +124,7 @@
 .Sq Li %
 character is written.
 .El
+.El
 .\" ----------------------------------------------------------------------
 .Sh RETURN VALUES
 If the total number of resulting bytes including the terminating
@@ -132,6 +142,11 @@
 and
 .Va errno
 is set to indicate the error.
+.Pp
+The
+.Fn strfmon_l
+function returns the same values as
+.Fn strfmon .
 .\" ----------------------------------------------------------------------
 .Sh ERRORS
 The
@@ -155,6 +170,11 @@
 function
 conforms to
 .St -p1003.1-2001 .
+The
+.Fn strfmon_l
+function conforms to
+.St -p1003.1-2008 .
+.\" ----------------------------------------------------------------------
 .Sh AUTHORS
 .An -nosplit
 The
diff -ruN src54-x6/lib/libc/stdlib/strfmon.c src/lib/libc/stdlib/strfmon.c
--- src54-x6/lib/libc/stdlib/strfmon.c	Tue Dec 10 06:14:10 2013
+++ src/lib/libc/stdlib/strfmon.c	Wed Dec 11 04:46:41 2013
@@ -42,7 +42,10 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <xlocale.h>
 
+#include "../locale/xlocale_private.h"
+
 /* internal flags */
 #define	NEED_GROUPING		0x01	/* print digits grouped (default) */
 #define	SIGN_POSN_USED		0x02	/* '+' or '(' usage flag */
@@ -92,12 +95,12 @@
 	groups++;						\
 } while (0)
 
-static void __setup_vars(int, char *, char *, char *, char **);
-static int __calc_left_pad(int, char *);
-static char *__format_grouped_double(double, int *, int, int, int);
+static void __setup_vars_l(int, char *, char *, char *, char **, locale_t);
+static int __calc_left_pad_l(int, char *, locale_t);
+static char *__format_grouped_double_l(double, int *, int, int, int, locale_t);
 
 static ssize_t
-vstrfmon(char * __restrict s, size_t maxsize, 
+vstrfmon_l(char * __restrict s, size_t maxsize, locale_t locale,
 		const char * __restrict format, va_list ap)
 {
 	char 		*dst;		/* output destination pointer */
@@ -123,8 +126,8 @@
 	char		*tmpptr;	/* temporary vars */
 	int		sverrno;
 
-
-	lc = localeconv();
+	FIX_LOCALE(locale);
+	lc = localeconv_l(locale);
 	dst = s;
 	fmt = format;
 	asciivalue = NULL;
@@ -252,24 +255,25 @@
 
 		/* fill left_prec with amount of padding chars */
 		if (left_prec >= 0) {
-			pad_size = __calc_left_pad((flags ^ IS_NEGATIVE),
-							currency_symbol) -
-				   __calc_left_pad(flags, currency_symbol);
+			pad_size = __calc_left_pad_l((flags ^ IS_NEGATIVE),
+					currency_symbol, locale) -
+				__calc_left_pad_l(flags, currency_symbol,
+						locale);
 			if (pad_size < 0)
 				pad_size = 0;
 		}
 
 		if (asciivalue != NULL)
 			free(asciivalue);
-		asciivalue = __format_grouped_double(value, &flags,
-				left_prec, right_prec, pad_char);
+		asciivalue = __format_grouped_double_l(value, &flags,
+				left_prec, right_prec, pad_char, locale);
 		if (asciivalue == NULL)
 			goto end_error;		/* errno already set     */
 						/* to ENOMEM by malloc() */
 
 		/* set some variables for later use */
-		__setup_vars(flags, &cs_precedes, &sep_by_space,
-				&sign_posn, &signstr);
+		__setup_vars_l(flags, &cs_precedes, &sep_by_space,
+				&sign_posn, &signstr, locale);
 
 		/*
 		 * Description of some LC_MONETARY's values:
@@ -402,23 +406,37 @@
 	errno = sverrno;
 	return (-1);
 }
+
 ssize_t
+strfmon_l(char * __restrict s, size_t maxsize, locale_t locale, 
+		const char * __restrict format, ...)
+{
+	size_t ret;
+	va_list ap;
+	va_start(ap, format);
+	ret = vstrfmon_l(s, maxsize, locale, format, ap);
+	va_end(ap);
+	return ret;
+}
+DEF_STRONG(strfmon_l);
+
+ssize_t
 strfmon(char * __restrict s, size_t maxsize, const char * __restrict format,
     ...)
 {
 	size_t ret;
 	va_list ap;
 	va_start(ap, format);
-	ret = vstrfmon(s, maxsize, format, ap);
+	ret = vstrfmon_l(s, maxsize, __get_locale(), format, ap);
 	va_end(ap);
 	return ret;
 }
 
 static void
-__setup_vars(int flags, char *cs_precedes, char *sep_by_space,
-		char *sign_posn, char **signstr) {
+__setup_vars_l(int flags, char *cs_precedes, char *sep_by_space,
+		char *sign_posn, char **signstr, locale_t locale) {
 
-	struct lconv *lc = localeconv();
+	struct lconv *lc = localeconv_l(locale);
 
 	if ((flags & IS_NEGATIVE) && (flags & USE_INTL_CURRENCY)) {
 		*cs_precedes = lc->int_n_cs_precedes;
@@ -454,12 +472,13 @@
 }
 
 static int
-__calc_left_pad(int flags, char *cur_symb) {
+__calc_left_pad_l(int flags, char *cur_symb, locale_t locale) {
 
 	char cs_precedes, sep_by_space, sign_posn, *signstr;
 	int left_chars = 0;
 
-	__setup_vars(flags, &cs_precedes, &sep_by_space, &sign_posn, &signstr);
+	__setup_vars_l(flags, &cs_precedes, &sep_by_space, &sign_posn, 
+			&signstr, locale);
 
 	if (cs_precedes != 0) {
 		left_chars += strlen(cur_symb);
@@ -504,8 +523,9 @@
 
 /* convert double to ASCII */
 static char *
-__format_grouped_double(double value, int *flags,
-			int left_prec, int right_prec, int pad_char) {
+__format_grouped_double_l(double value, int *flags,
+			int left_prec, int right_prec, int pad_char, 
+			locale_t locale) {
 
 	char		*rslt;
 	char		*avalue;
@@ -517,7 +537,7 @@
 
 	int		padded;
 
-	struct lconv	*lc = localeconv();
+	struct lconv	*lc = localeconv_l(locale);
 	char		*grouping;
 	char		decimal_point;
 	char		thousands_sep;
@@ -553,7 +573,7 @@
 	/* convert to string */
 	snprintf(fmt, sizeof(fmt), "%%%d.%df", left_prec + right_prec + 1,
 	    right_prec);
-	avalue_size = asprintf(&avalue, fmt, value);
+	avalue_size = asprintf_l(&avalue, locale, fmt, value);
 	if (avalue_size < 0)
 		return (NULL);
 
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-orig/lib/libc/stdlib/strtod.3 src/lib/libc/time/strtod.3
--- src55-orig/lib/libc/stdlib/strtod.3	Thu Apr  3 13:00:44 2014
+++ src/lib/libc/stdlib/strtod.3	Thu Apr  3 13:04:01 2014
@@ -36,8 +36,11 @@
 .Os
 .Sh NAME
 .Nm strtod ,
+.Nm strtod_l ,
 .Nm strtof ,
-.Nm strtold
+.Nm strtof_l ,
+.Nm strtold ,
+.Nm strtold_l
 .Nd convert ASCII string to double, float or long double
 .Sh SYNOPSIS
 .In stdlib.h
@@ -49,24 +52,40 @@
 .Pp
 .Ft long double
 .Fn strtold "const char *nptr" "char **endptr"
+.Pp
+.In xlocale.h
+.Ft double
+.Fn strtod_l "const char *nptr" "char **endptr" "locale_t loc"
+.Pp
+.Ft float
+.Fn strtof_l "const char *nptr" "char **endptr" "locale_t loc"
+.Pp
+.Ft long double
+.Fn strtold_l "const char *nptr" "char **endptr" "locale_t loc"
 .Sh DESCRIPTION
 The
 .Fn strtod
-function converts the initial portion of the string pointed to by
+and
+.Fn strtod_l
+functions converts the initial portion of the string pointed to by
 .Fa nptr
 to
 .Vt double
 representation.
 The
 .Fn strtof
-function converts the initial portion of the string pointed to by
+and
+.Fn strtof_l
+functions converts the initial portion of the string pointed to by
 .Fa nptr
 to
 .Vt float
 representation.
 The
 .Fn strtold
-function converts the initial portion of the string pointed to by
+and
+.Fn strtold_l
+functions converts the initial portion of the string pointed to by
 .Fa nptr
 to
 .Vt long double
@@ -115,6 +134,22 @@
 string (as defined by the
 .Xr isspace 3
 function) are skipped.
+.Pp
+The behaviour of
+.Fn strtod ,
+.Fn strtof
+and
+.Fn strtold
+is affected by the
+.Dv LC_NUMERIC
+category of the current locale. While the behavior of
+.Fn strtod_l ,
+.Fn strtof_l
+and
+.Fn strtold_l
+depends on the
+.Dv LC_NUMERIC
+category of the provided locale.
 .Sh RETURN VALUES
 The
 .Fn strtod ,
diff -ruN src62-orig/lib/libc/locale/nl_langinfo_l.c src/lib/lib/clocale/nl_langinfo_l.c
--- src62-orig/lib/libc/locale/nl_langinfo_l.c Sep  4 22:16:13 2017
+++ src/lib/lib/clocale/nl_langinfo_l.c	Tue Dec  5 04:22:50 2017
@@ -14,30 +14,140 @@
  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
+/*
+ * Written by J.T. Conklin <jtc@netbsd.org>.
+ * Public domain.
+ */
 
 #include <langinfo.h>
 #include <locale.h>
+#include <nl_types.h>
+#include <string.h>
+#include <xlocale.h>
 
+#include "mblocal.h"
+#include "localedef.h"
 #include "rune.h"
+#include "runetype.h"
+#include "xlocale_private.h"
 
 char *
 nl_langinfo_l(nl_item item, locale_t locale)
 {
-	_RuneLocale	*rl;
-	const char	*s;
+	const char *s;
+	char _bufcrncystr[16];
 
-	if (item != CODESET)
-		return nl_langinfo(item);
+	FIX_LOCALE(locale); 
+	struct lconv *lc = &locale->lconv;
+	_RuneLocale *lr = XLOCALE_CTYPE(locale)->runes;
 
-	rl = NULL;
-	/*if (locale == _LOCALE_UTF8)
-		rl = _Utf8RuneLocale;*/
-	if (rl == NULL)
-		rl = &_DefaultRuneLocale;
 
-	s = rl->rl_codeset;
-	if (s == NULL)
+	switch (item) {
+	case D_T_FMT:
+		s = _CurrentTimeLocale->d_t_fmt;
+		break;
+	case D_FMT:
+		s = _CurrentTimeLocale->d_fmt;
+		break;
+	case T_FMT:
+		s = _CurrentTimeLocale->t_fmt;
+		break;
+	case T_FMT_AMPM:
+		s = _CurrentTimeLocale->t_fmt_ampm;
+		break;
+	case AM_STR:
+	case PM_STR:
+		s = _CurrentTimeLocale->am_pm[item - AM_STR];
+		break;
+	case DAY_1:
+	case DAY_2:
+	case DAY_3:
+	case DAY_4:
+	case DAY_5:
+	case DAY_6:
+	case DAY_7:
+		s = _CurrentTimeLocale->day[item - DAY_1];
+		break;
+	case ABDAY_1:
+	case ABDAY_2:
+	case ABDAY_3:
+	case ABDAY_4:
+	case ABDAY_5:
+	case ABDAY_6:
+	case ABDAY_7:
+		s = _CurrentTimeLocale->abday[item - ABDAY_1];
+		break;
+	case MON_1:
+	case MON_2:
+	case MON_3:
+	case MON_4:
+	case MON_5:
+	case MON_6:
+	case MON_7:
+	case MON_8:
+	case MON_9:
+	case MON_10:
+	case MON_11:
+	case MON_12:
+		s = _CurrentTimeLocale->mon[item - MON_1];
+		break;
+	case ABMON_1:
+	case ABMON_2:
+	case ABMON_3:
+	case ABMON_4:
+	case ABMON_5:
+	case ABMON_6:
+	case ABMON_7:
+	case ABMON_8:
+	case ABMON_9:
+	case ABMON_10:
+	case ABMON_11:
+	case ABMON_12:
+		s = _CurrentTimeLocale->abmon[item - ABMON_1];
+		break;
+	case RADIXCHAR:
+		s = lc->decimal_point;
+		break;
+	case THOUSEP:
+		s = lc->thousands_sep;
+		break;
+	case YESSTR:
+		s = _CurrentMessagesLocale->yesstr;
+		break;
+	case YESEXPR:
+		s = _CurrentMessagesLocale->yesexpr;
+		break;
+	case NOSTR:
+		s = _CurrentMessagesLocale->nostr;
+		break;
+	case NOEXPR:
+		s = _CurrentMessagesLocale->noexpr;
+		break;
+	case CRNCYSTR:				
+		locale->_bufcrncystr[0] = '\0';
+
+		if (lc->currency_symbol[0] != '\0' 
+				&& lc->p_cs_precedes == lc->n_cs_precedes) {
+			if (lc->p_cs_precedes == 1) {
+				strlcat(locale->_bufcrncystr, "-", sizeof(locale->_bufcrncystr));
+			} else {
+				strlcat(locale->_bufcrncystr, "+", sizeof(locale->_bufcrncystr));
+			}
+		}
+		strlcat(locale->_bufcrncystr, lc->currency_symbol, 
+				sizeof(locale->_bufcrncystr));
+		s = locale->_bufcrncystr;
+		break;
+	case CODESET:
+		s = lr->rl_codeset;
+		if (!s)
+			s = "";
+		break;
+	default:
 		s = "";
+		break;
+	}
 
 	return (char *)s;
 }
+DEF_WEAK(nl_langinfo_l);
diff -ruN src54-x6/lib/libc/locale/nl_langinfo.c src/lib/libc/locale/nl_langinfo.c
--- src54-x6/lib/libc/locale/nl_langinfo.c	Wed Dec 11 08:11:54 2013
+++ src/lib/libc/locale/nl_langinfo.c	Fri Dec 13 15:42:55 2013
@@ -6,127 +6,13 @@
 
 #include <langinfo.h>
 #include <locale.h>
-#include <nl_types.h>
-#include <langinfo.h>
-#include <string.h>
+#include <xlocale.h>
 
-#include "localedef.h"
-#include "rune.h"
-#include "runetype.h"
+#include "xlocale_private.h"
 
-static char _bufcrncystr[16];
-
 char *
 nl_langinfo(nl_item item)
 {
-	const char *s;
-
-	switch (item) {
-	case D_T_FMT:
-		s = _CurrentTimeLocale->d_t_fmt;
-		break;
-	case D_FMT:
-		s = _CurrentTimeLocale->d_fmt;
-		break;
-	case T_FMT:
-		s = _CurrentTimeLocale->t_fmt;
-		break;
-	case T_FMT_AMPM:
-		s = _CurrentTimeLocale->t_fmt_ampm;
-		break;
-	case AM_STR:
-	case PM_STR:
-		s = _CurrentTimeLocale->am_pm[item - AM_STR];
-		break;
-	case DAY_1:
-	case DAY_2:
-	case DAY_3:
-	case DAY_4:
-	case DAY_5:
-	case DAY_6:
-	case DAY_7:
-		s = _CurrentTimeLocale->day[item - DAY_1];
-		break;
-	case ABDAY_1:
-	case ABDAY_2:
-	case ABDAY_3:
-	case ABDAY_4:
-	case ABDAY_5:
-	case ABDAY_6:
-	case ABDAY_7:
-		s = _CurrentTimeLocale->abday[item - ABDAY_1];
-		break;
-	case MON_1:
-	case MON_2:
-	case MON_3:
-	case MON_4:
-	case MON_5:
-	case MON_6:
-	case MON_7:
-	case MON_8:
-	case MON_9:
-	case MON_10:
-	case MON_11:
-	case MON_12:
-		s = _CurrentTimeLocale->mon[item - MON_1];
-		break;
-	case ABMON_1:
-	case ABMON_2:
-	case ABMON_3:
-	case ABMON_4:
-	case ABMON_5:
-	case ABMON_6:
-	case ABMON_7:
-	case ABMON_8:
-	case ABMON_9:
-	case ABMON_10:
-	case ABMON_11:
-	case ABMON_12:
-		s = _CurrentTimeLocale->abmon[item - ABMON_1];
-		break;
-	case RADIXCHAR:
-		s = _CurrentNumericLocale->decimal_point;
-		break;
-	case THOUSEP:
-		s = _CurrentNumericLocale->thousands_sep;
-		break;
-	case YESSTR:
-		s = _CurrentMessagesLocale->yesstr;
-		break;
-	case YESEXPR:
-		s = _CurrentMessagesLocale->yesexpr;
-		break;
-	case NOSTR:
-		s = _CurrentMessagesLocale->nostr;
-		break;
-	case NOEXPR:
-		s = _CurrentMessagesLocale->noexpr;
-		break;
-	case CRNCYSTR:				
-		_bufcrncystr[0] = '\0';
-		
-		if (_CurrentMonetaryLocale->currency_symbol[0] != '\0' 
-			&& _CurrentMonetaryLocale->p_cs_precedes == _CurrentMonetaryLocale->n_cs_precedes) {
-			if (_CurrentMonetaryLocale->p_cs_precedes == 1) {
-				strlcat(_bufcrncystr, "-", sizeof(_bufcrncystr));
-			} else {
-				strlcat(_bufcrncystr, "+", sizeof(_bufcrncystr));
-			}
-		}
-		strlcat(_bufcrncystr, _CurrentMonetaryLocale->currency_symbol, 
-				sizeof(_bufcrncystr));
-		s = _bufcrncystr;
-		break;
-	case CODESET:
-		s = _CurrentRuneLocale()->rl_codeset;
-		if (!s)
-			s = "";
-		break;
-	default:
-		s = "";
-		break;
-	}
-
-	return (char *) s;
+	return nl_langinfo_l(item, __get_locale());
 }
-DEF_WEAK(nl_langinfo);
+DEF_STRONG(nl_langinfo);
diff -ruN src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c src/regress/lib/libc/locale/check_xlocale/check_xlocale.c
--- src54-x6/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Wed Dec 11 22:07:06 2013
+++ src/regress/lib/libc/locale/check_xlocale/check_xlocale.c	Fri Dec 13 15:25:23 2013
@@ -12,6 +12,7 @@
 #include <langinfo.h>
 #include <locale.h>
 #include <math.h>
+#include <monetary.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -432,12 +433,97 @@
 	p(wcsncasecmp_l(L"n", L"N", 1, es_CO_UTF_8) == 0);
 }
 
+void test_monetary() 
+{
+	struct lconv *p;
+	char col[256];
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	locale_t tloc = uselocale(NULL);
+	locale_t es_CO_UTF_8 = duplocale(tloc);
+	setlocale(LC_ALL, "POSIX");
+	p = localeconv_l(es_CO_UTF_8);
+	p(strcmp(p->int_curr_symbol, "COP ") == 0);
+	p(strcmp(p->currency_symbol, "$") == 0);
+	printf("CRNCYSTR=%s\n", nl_langinfo_l(CRNCYSTR, es_CO_UTF_8));
+	p(strcmp(nl_langinfo_l(CRNCYSTR, es_CO_UTF_8), "-$") == 0);
+	p(strcmp(p->mon_decimal_point, ",") == 0);
+	p(strcmp(p->mon_thousands_sep, ".") == 0);
+	p(p->mon_grouping[0] == 3);
+	p(strcmp(p->positive_sign, "") == 0);
+	p(strcmp(p->negative_sign, "-") == 0);
+	p(p->int_frac_digits == 2);
+	p(p->frac_digits == 2);
+	p(p->p_cs_precedes == 1);
+	p(p->p_sep_by_space == 1);
+	p(p->n_cs_precedes == 1);
+	p(p->n_sep_by_space == 1);
+	p(p->p_sign_posn == 1);
+	p(p->n_sign_posn == 1);
+	p(p->int_p_cs_precedes == 1);
+	p(p->int_n_cs_precedes == 1);
+	p(p->int_n_sep_by_space == 1);
+	p(p->int_p_sep_by_space == 1);
+	p(p->int_p_sign_posn == 1);
+	p(p->int_n_sign_posn == 1);
+	p(p->n_sign_posn == 1);
+	strfmon_l(col, sizeof(col), es_CO_UTF_8, "%n", -3456.781); 
+	p(strcmp(col, "-$ 3.456,78") == 0);
+}
+
+
+void test_numeric() 
+{
+	struct lconv *p;
+	char col[256];
+	char *nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	locale_t tloc = uselocale(NULL);
+	locale_t es_CO_UTF_8 = duplocale(tloc);
+	float fl;
+	double dl;
+	long double ldl;
+	long l;
+	int i;
+	long long ll;
+
+	setlocale(LC_ALL, "POSIX");
+	p = localeconv_l(es_CO_UTF_8);
+
+	p(strcmp(p->decimal_point, ",") == 0);
+	p(strcmp(p->thousands_sep, ".") == 0);
+	p(p->grouping[0] == 3);
+
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%f", 1000000.01);
+	p(strcmp(col, "1000000,010000") == 0);
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%'d", 1000000);
+	printf("col=%s\n", col);
+	p(strcmp(col, "1.000.000") == 0);
+	snprintf_l(col, sizeof(col), es_CO_UTF_8, "%'f", 1000000.01);
+	printf("col=%s\n", col);
+	p(strcmp(col, "1.000.000,010000") == 0);
+	p(strcmp(nl_langinfo(RADIXCHAR), ".") == 0);
+	p(strcmp(nl_langinfo_l(RADIXCHAR, es_CO_UTF_8), ",") == 0);
+	p(strcmp(nl_langinfo(THOUSEP), "") == 0);
+	p(strcmp(nl_langinfo_l(THOUSEP, es_CO_UTF_8), ".") == 0);
+
+	fl = strtof_l(" -3,1", NULL, es_CO_UTF_8);
+	p(fabs(fl + 3.1) < FLT_EPSILON);
+	dl = strtod_l(" -3,1", NULL, es_CO_UTF_8);
+	p(fabs(dl + 3.1) < DBL_EPSILON);
+	ldl = strtold_l(" -3,1", NULL, es_CO_UTF_8);
+	p(fabsl(ldl + 3.1) < DBL_EPSILON);
+	sscanf_l(" -3,1", es_CO_UTF_8, "%f", &fl);
+	printf("fl=%f\n", fl);
+	p(fabs(fl + 3.1) < FLT_EPSILON);
+}
+
 int main()
 {
 	test_xlocale();
 	test_wchar();
 	test_ctype();
 	test_string();
+	test_monetary();
+	test_numeric();
 	
 	return bad != 0;
 }
diff -ruN -x obj -x CVS -x *orig -x *rej -x *~ src53xlocale1/lib/libc/locale/wcstold.c src53xlocale2/lib/libc/locale/wcstold.c
--- src53xlocale1/lib/libc/locale/wcstold.c	Mon Apr  8 21:20:25 2013
+++ src53xlocale2/lib/libc/locale/wcstold.c	Fri Apr 12 12:07:57 2013
@@ -5,9 +5,13 @@
 #include <string.h>
 #include <wchar.h>
 #include <wctype.h>
+#include <xlocale.h>
 
+#include "locale/xlocale_private.h"
+
 #define FUNCNAME	wcstold
+#define FUNCNAMEL	wcstold_l
 typedef long double	float_type;
-#define STRTOD_FUNC	strtold
+#define STRTOD_FUNC	strtold_l
 
 #include "_wcstod.h"
diff -ruN -x obj -x CVS -x *orig -x *rej -x *~ src53xlocale1/lib/libc/locale/_wcstod.h src53xlocale2/lib/libc/locale/_wcstod.h
--- src53xlocale1/lib/libc/locale/_wcstod.h	Mon Apr  8 21:20:25 2013
+++ src53xlocale2/lib/libc/locale/_wcstod.h	Fri Apr 12 12:07:57 2013
@@ -34,17 +34,30 @@
  *
  * parameters:
  *	FUNCNAME : function name
+ *	FUNCNAMEL : function name with postfix _l
  *      float_type : return type
- *      STRTOD_FUNC : conversion function
+ *      STRTOD_FUNC : conversion function with postfix _l
  */
 
+#include <xlocale.h>
+
+int iswspace_l(wint_t, locale_t);
+
+
 float_type
-FUNCNAME(const wchar_t *nptr, wchar_t **endptr)
+FUNCNAMEL(const wchar_t *nptr, wchar_t **endptr, locale_t loc)
 {
 	const wchar_t *src;
 	size_t size;
 	const wchar_t *start;
 	const wchar_t *aftersign;
+	char *cdp = localeconv_l(loc)->decimal_point;
+	wchar_t decimalpoint; 
+        if (strlen(cdp) != 1) {
+		decimalpoint = L'.';
+	} else {
+		decimalpoint = btowc_l(cdp[0], loc);
+	}
 
 	/*
 	 * check length of string and call strtod
@@ -52,7 +65,7 @@
 	src = nptr;
 
 	/* skip space first */
-	while (iswspace(*src)) {
+	while (iswspace_l(*src, loc)) {
 		src++;
 	}
 
@@ -61,13 +74,13 @@
 	if (*src && wcschr(L"+-", *src))
 		src++;
 	aftersign = src;
-	if (wcsncasecmp(src, L"inf", 3) == 0) {
+	if (wcsncasecmp_l(src, L"inf", 3, loc) == 0) {
 		src += 3;
-		if (wcsncasecmp(src, L"inity", 5) == 0)
+		if (wcsncasecmp_l(src, L"inity", 5, loc) == 0)
 			src += 5;
 		goto match;
 	}
-	if (wcsncasecmp(src, L"nan", 3) == 0) {
+	if (wcsncasecmp_l(src, L"nan", 3, loc) == 0) {
 		src += 3;
 		if (*src == L'(') {
 			size = 1;
@@ -80,7 +93,7 @@
 	}
 	size = wcsspn(src, L"0123456789");
 	src += size;
-	if (*src == L'.') {/* XXX use localeconv */
+	if (*src == decimalpoint) {/* XXX use localeconv */
 		src++;
 		size = wcsspn(src, L"0123456789");
 		src += size;
@@ -109,7 +122,7 @@
 
 		s = start;
 		memset(&st, 0, sizeof(st));
-		bufsize = wcsnrtombs(NULL, &s, size, 0, &st);
+		bufsize = wcsnrtombs_l(NULL, &s, size, 0, &st, loc);
 
 		buf = malloc(bufsize + 1);
 		if (!buf) {
@@ -119,7 +132,7 @@
 
 		s = start;
 		memset(&st, 0, sizeof(st));
-		size_converted = wcsnrtombs(buf, &s, size, bufsize, &st);
+		size_converted = wcsnrtombs_l(buf, &s, size, bufsize, &st, loc);
 		if (size_converted != bufsize) {
 			/* XXX should not happen */
 			free(buf);
@@ -128,12 +141,12 @@
 		}
 
 		buf[bufsize] = 0;
-		result = STRTOD_FUNC(buf, &end);
+		result = STRTOD_FUNC(buf, &end, loc);
 
 		if (endptr) {
 			const char *s = buf;
 			memset(&st, 0, sizeof(st));
-			size = mbsnrtowcs(NULL, &s, end - buf, 0, &st);
+			size = mbsnrtowcs_l(NULL, &s, end - buf, 0, &st, loc);
 			*endptr = (wchar_t*)start + size;
 		}
 
@@ -147,5 +160,11 @@
 		*endptr = (wchar_t*)nptr;
 
 	return 0;
+}
+
+float_type
+FUNCNAME(const wchar_t *nptr, wchar_t **endptr)
+{
+	return FUNCNAMEL(nptr, endptr, __get_locale());
 }
 DEF_STRONG(FUNCNAME);
diff -ruN -x obj -x CVS -x *orig -x *rej -x *~ src53xlocale1/lib/libc/locale/wcstod.c src53xlocale2/lib/libc/locale/wcstod.c
--- src53xlocale1/lib/libc/locale/wcstod.c	Mon Apr  8 21:20:25 2013
+++ src53xlocale2/lib/libc/locale/wcstod.c	Fri Apr 12 12:07:57 2013
@@ -5,9 +5,13 @@
 #include <string.h>
 #include <wchar.h>
 #include <wctype.h>
+#include <xlocale.h>
 
+#include "locale/xlocale_private.h"
+
 #define FUNCNAME	wcstod
+#define FUNCNAMEL	wcstod_l
 typedef double		float_type;
-#define STRTOD_FUNC	strtod
+#define STRTOD_FUNC	strtod_l
 
 #include "_wcstod.h"
diff -ruN -x obj -x CVS -x *orig -x *rej -x *~ src53xlocale1/lib/libc/locale/wcstof.c src53xlocale2/lib/libc/locale/wcstof.c
--- src53xlocale1/lib/libc/locale/wcstof.c	Mon Apr  8 21:20:25 2013
+++ src53xlocale2/lib/libc/locale/wcstof.c	Fri Apr 12 12:07:57 2013
@@ -5,9 +5,13 @@
 #include <string.h>
 #include <wchar.h>
 #include <wctype.h>
+#include <xlocale.h>
 
+#include "locale/xlocale_private.h"
+
 #define FUNCNAME	wcstof
+#define FUNCNAMEL	wcstof_l
 typedef float		float_type;
-#define STRTOD_FUNC	strtof
+#define STRTOD_FUNC	strtof_l
 
 #include "_wcstod.h"
diff -ruN src-m/lib/libc/Symbols.list src/lib/libc/Symbols.list
--- src-m/lib/libc/Symbols.list	Sun Aug 21 22:30:17 2016
+++ src/lib/libc/Symbols.list	Sun Aug 21 22:14:39 2016
@@ -860,8 +860,11 @@
 __hldtoa
 __ldtoa
 strtod
+strtod_l
 strtof
+strtof_l
 strtold
+strtold_l
 
 /* gmon */
 _gmonparam
@@ -1425,8 +1428,10 @@
 setlinebuf
 setvbuf
 snprintf
+snprintf_l
 sprintf
 sscanf
+sscanf_l
 swprintf
 swscanf
 tempnam
@@ -1731,6 +1736,7 @@
 offtime
 posix2time
 strfmon
+strfmon_l
 strftime
 strftime_l
 strptime
diff -ruN src/lib/libc/hidden/monetary.h.orig src/lib/libc/hidden/monentary.h
--- src/lib/libc/hidden/monetary.h.orig	Sun Aug 21 23:03:32 2016
+++ src/lib/libc/hidden/monetary.h	Sun Aug 21 23:03:40 2016
@@ -10,7 +10,9 @@
 #define _LIBC_MONETARY_H_
 
 #include_next <monetary.h>
+#include_next <xlocale.h>
 
 PROTO_STD_DEPRECATED(strfmon);
+PROTO_NORMAL(strfmon_l);
 
 #endif /* !_LIBC_MONETARY_H_ */
diff -ruN src/lib/libc/hidden/stdlib.h.orig  src/lib/libc/hidden/stdlib.h
--- src/lib/libc/hidden/stdlib.h.orig	Sun Aug 21 23:26:56 2016
+++ src/lib/libc/hidden/stdlib.h	Sun Aug 21 23:27:02 2016
@@ -53,6 +53,7 @@
 #endif
 
 PROTO_NORMAL(__mb_cur_max);
+PROTO_NORMAL(___mb_cur_max_l);
 PROTO_NORMAL(__realpath);
 PROTO_STD_DEPRECATED(_Exit);
 PROTO_DEPRECATED(a64l);
@@ -156,9 +157,12 @@
 PROTO_DEPRECATED(srandom_deterministic);
 PROTO_DEPRECATED(srandomdev);
 PROTO_NORMAL(strtod);
+PROTO_NORMAL(strtod_l);
 PROTO_NORMAL(strtof);
+PROTO_NORMAL(strtof_l);
 PROTO_NORMAL(strtol);
 PROTO_NORMAL(strtold);
+PROTO_NORMAL(strtold_l);
 PROTO_NORMAL(strtoll);
 PROTO_NORMAL(strtonum);
 /*PROTO_NORMAL(strtoq);		alias of strtoll */
diff -ruN src61-orig/lib/libc/hidden/stdio.h src/lib/libc/hidden/stdio.h
--- src61-orig/lib/libc/hidden/stdio.h	Tue Sep  6 14:56:36 2016
+++ src/lib/libc/hidden/stdio.h	Tue May 16 07:28:33 2017
@@ -29,6 +29,8 @@
 #include_next <stdio.h>
 
 __BEGIN_HIDDEN_DECLS
+typedef struct  _xlocale *locale_t;
+int      asprintf_l(char **, locale_t, const char *, ...);
 char	*_mktemp(char *);
 __END_HIDDEN_DECLS
 
@@ -42,6 +44,7 @@
 
 PROTO_NORMAL(__srget);
 PROTO_NORMAL(asprintf);
+PROTO_NORMAL(asprintf_l);
 PROTO_NORMAL(clearerr);
 PROTO_NORMAL(ctermid);
 PROTO_NORMAL(dprintf);
diff -ruN src62-orig/lib/libc/hidden/langinfo.h src/lib/libc/hidden/langinfo.h
--- src62-orig/lib/libc/hidden/langinfo.h	Mon Sep  4 22:16:13 2017
+++ src/lib/libc/hidden/langinfo.h	Sat Nov 25 22:36:57 2017
@@ -21,6 +21,6 @@
 #include_next <langinfo.h>
 
 PROTO_NORMAL(nl_langinfo);
-PROTO_DEPRECATED(nl_langinfo_l);
+PROTO_NORMAL(nl_langinfo_l);
 
 #endif	/* _LIBC_LANGINFO_H_ */
