diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src55-src/regress/lib/libc/locale/Makefile src/regress/lib/libc/locale/Makefile
--- src55-orig/regress/lib/libc/locale/Makefile	Fri Oct 18 09:22:50 2013
+++ src/regress/lib/libc/locale/Makefile	Thu Apr  3 09:23:23 2014
@@ -1,5 +1,5 @@
 # $OpenBSD: Makefile,v 1.7 2020/01/13 15:35:57 bluhm Exp $
 
-SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb check_time
+SUBDIR =	check_isw mbrtowc setlocale uselocale wcrtomb check_time check_collate
 
 .include <bsd.subdir.mk>
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/regress/lib/libc/locale/check_collate/Makefile src/regress/lib/libc/locale/check_collate/Makefile
--- src54-s/regress/lib/libc/locale/check_collate/Makefile	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_collate/Makefile	Sat Oct 12 13:23:41 2013
@@ -0,0 +1,11 @@
+
+NOMAN=
+PROG=check_collate
+
+CFLAGS=-g
+
+
+run-regress-check_collate: ${PROG}
+	./${PROG} >/dev/null
+
+.include <bsd.regress.mk>
diff -ruN -x obj -x CVS -x *~ -x *patch -x *orig src54-s/regress/lib/libc/locale/check_collate/check_collate.c src/regress/lib/libc/locale/check_collate/check_collate.c
--- src54-orig/regress/lib/libc/locale/check_collate/check_collate.c	Wed Dec 31 19:00:00 1969
+++ src/regress/lib/libc/locale/check_collate/check_collate.c	Mon Dec 23 12:02:59 2013
@@ -0,0 +1,222 @@
+/**
+ * Public domain according to Colombian Legislation. 
+ * http://www.pasosdejesus.org/dominio_publico_colombia.html
+ * 2013. vtamara@pasosdeJesus.org
+ *
+ * $adJ$
+ */
+
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <wchar.h>
+#include <wctype.h>
+
+int bad = 0;
+
+#define p(t) printf("%s:\t ",#t); \
+	if (t) { \
+		printf("\x1b[38;5;2mOK\x1b[0m\n"); \
+	} else { \
+		bad++; \
+		printf("\x1b[38;5;1mERROR\x1b[0m\n"); \
+	}
+
+
+void test_posix() 
+{
+	char *nl = setlocale(LC_ALL, "C");
+	printf("locale %s\n", nl);
+	p(strcoll("\xe9", "f") > 0); 
+	p(strcoll("b", "\xe9") < 0);
+	p(strcoll("", "\xe9") < 0);
+	p(strcoll("a", "") > 0);
+	p(strcoll("", "") == 0);
+
+	nl = setlocale(LC_COLLATE, "POSIX");
+	printf("locale %s\n", nl);
+	p(strcoll("\xe9", "f") > 0); 
+	p(strcoll("b", "\xe9") < 0);
+	p(strcoll("", "\xe9") < 0);
+	p(strcoll("a", "") > 0);
+	p(strcoll("", "") == 0);
+
+}
+
+
+void test_esCOUTF8() 
+{
+	char *nl = setlocale(LC_ALL, "es.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") < 0); 
+	p(strcoll("b", "é") < 0);
+	nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") < 0); 
+	p(strcoll("b", "é") < 0);
+
+	wchar_t wcsb[1000];
+	mbstowcs(wcsb, "b", 1000);
+	wchar_t wcse[1000];
+	mbstowcs(wcse, "é", 1000);
+	p(wcscoll(wcsb, wcse) < 0);
+	mbstowcs(wcsb, "b", 1000);
+	mbstowcs(wcse, "é", 1000);
+	p(wcscoll(wcsb, wcse) < 0);
+	p(wcscoll(L"b", L"é") < 0);
+	p(strcoll("á", "e") < 0);
+	p(strcoll("ama", "ana") < 0);
+	p(strcoll("á", "e") < 0);
+	p(wcscoll(L"b", L"é") < 0);
+	p(wcscoll(L"á", L"e") < 0);
+	p(wcscoll(L"á", L"e") < 0);
+	/* Order in spanish*/
+	p(wcscoll(L" ", L"á") < 0);
+	p(wcscoll(L"á", L"b") < 0);
+	p(wcscoll(L"d", L"é") < 0);
+	p(wcscoll(L"é", L"f") < 0);
+	p(wcscoll(L"h", L"í") < 0);
+	p(wcscoll(L"í", L"j") < 0);
+	p(wcscoll(L"n", L"ñ") < 0);
+	p(wcscoll(L"ñ", L"o") < 0);
+	p(wcscoll(L"ñ", L"ó") < 0);
+	p(wcscoll(L"ó", L"p") < 0);
+	p(wcscoll(L"t", L"ú") < 0);
+	p(wcscoll(L"t", L"ü") < 0);
+	p(wcscoll(L"ú", L"v") < 0);
+	p(wcscoll(L"ü", L"v") < 0);
+	p(wcscoll(L"Á", L"B") < 0);
+	p(wcscoll(L"D", L"É") < 0);
+	p(wcscoll(L"É", L"F") < 0);
+	p(wcscoll(L"H", L"Í") < 0);
+	p(wcscoll(L"Í", L"J") < 0);
+	p(wcscoll(L"N", L"Ñ") < 0);
+	p(wcscoll(L"Ñ", L"O") < 0);
+	p(wcscoll(L"Ñ", L"Ó") < 0);
+	p(wcscoll(L"Ó", L"P") < 0);
+	p(wcscoll(L"T", L"Ú") < 0);
+	p(wcscoll(L"T", L"Ü") < 0);
+	p(wcscoll(L"Ú", L"V") < 0);
+	p(wcscoll(L"Ü", L"V") < 0);
+	p(wcscoll(L"", L"Á") < 0);
+	p(wcscoll(L"á", L"") > 0);
+	p(wcscoll(L"áá", L"á") > 0);
+	p(wcscoll(L"ÁB", L"ÁC") < 0);
+	p(wcscoll(L"ÁB", L"AC") < 0);
+	p(wcscoll(L"ÁB", L"AB") > 0);
+	p(wcscasecmp(L"Á", L"b") < 0);
+	p(wcscasecmp(L"D", L"é") < 0);
+	p(wcscasecmp(L"É", L"f") < 0);
+	p(wcscasecmp(L"H", L"í") < 0);
+	p(wcscasecmp(L"Í", L"j") < 0);
+	p(wcscasecmp(L"N", L"ñ") < 0);
+	p(wcscasecmp(L"Ñ", L"o") < 0);
+	p(wcscasecmp(L"Ñ", L"ó") < 0);
+	p(wcscasecmp(L"Ó", L"p") < 0);
+	p(wcscasecmp(L"T", L"ú") < 0);
+	p(wcscasecmp(L"T", L"ü") < 0);
+	p(wcscasecmp(L"Ú", L"v") < 0);
+	p(wcscasecmp(L"Ü", L"v") < 0);
+	p(wcsncasecmp(L"Á", L"b", 0) == 0);
+	p(wcsncasecmp(L"D", L"é", 1) < 0);
+	p(wcsncasecmp(L"É", L"f", 2) < 0);
+	p(wcsncasecmp(L"H", L"í", 1) < 0);
+	p(wcsncasecmp(L"Í", L"j", 1) < 0);
+	p(wcsncasecmp(L"N", L"ñ", 1) < 0);
+	p(wcsncasecmp(L"Ñ", L"o", 1) < 0);
+	p(wcsncasecmp(L"Ñ", L"ó", 1) < 0);
+	p(wcsncasecmp(L"Ó", L"p", 1) < 0);
+	p(wcsncasecmp(L"T", L"ú", 1) < 0);
+	p(wcsncasecmp(L"T", L"ü", 1) < 0);
+	p(wcsncasecmp(L"Ú", L"v", 1) < 0);
+	p(wcsncasecmp(L"Ü", L"v", 1) < 0);
+
+
+
+	wchar_t wa[10], wb[10], we[10], wf[10], wn[10], wegne[10],
+		wo[10];
+
+	p(wcsxfrm(wo, L"oro", 1000) > 0);
+	printf("oro wo='%ls'\n", wo);
+	p(wcsxfrm(wa, L"", 1000) >= 0);
+	printf("wa='%ls'\n", wa);
+	p(wcsxfrm(wa, L"á", 1000) > 0);
+	printf("wa='%ls'\n", wa);
+	p(wcsxfrm(wb, L"b", 1000) > 0);
+	printf("wb='%ls'\n", wb);
+	p(wcscmp(wa, wb) < 0);
+	p(wcsxfrm(we, L"é", 1000) > 0);
+	printf("we='%ls'\n", we);
+	p(wcscmp(wb, we) < 0);
+	p(wcsxfrm(wf, L"f", 1000) > 0);
+	printf("wf='%ls'\n", wf);
+	p(wcscmp(wb, wf) < 0);
+	p(wcscmp(we, wf) < 0);
+	p(wcsxfrm(wn, L"n", 1000) > 0);
+	printf("wn='%ls'\n", wn);
+	p(wcsxfrm(wegne, L"ñ", 1000) > 0);
+	printf("wegne='%ls'\n", wegne);
+	p(wcsxfrm(wo, L"o", 1000) > 0);
+	printf("o wo='%ls'\n", wo);
+	p(wcsxfrm(wo, L"oso", 1000) > 0);
+	printf("oso wo='%ls'\n", wo);
+	p(wcscmp(wn, wegne) < 0);
+	p(wcscmp(wegne, wo) < 0);
+	
+	char a[1000], b[1000], e[1000], f[1000];
+	size_t sr = 0;
+	p((sr = strxfrm(NULL, "equis", 0)) > 5);
+	p(strxfrm(NULL, "", 1000) == 0);
+	p(strxfrm(a, "", 1000) == 0 && a[0] == '\0');
+	p(strxfrm(a, "á", 1000) > 0);
+	p(strxfrm(b, "b", 1000) > 0);
+	p(strcmp(a, b) < 0);
+	p(strxfrm(e, "é", 1000) > 0);
+	printf("é e=%s\n", e);
+	p(strcmp(b, e) < 0);
+	p(strxfrm(f, "f", 1000) > 0);
+	p(strcmp(b, f) < 0);
+	p(strcmp(e, f) < 0);
+	p(strxfrm(e, "éa", 1000) > 0);
+	printf("e=%s\n", e);
+	p(strxfrm(f, "éb", 1000) > 0);
+	printf("f=%s\n", f);
+	p(strcmp(e, f) < 0);
+	p(strxfrm(f, "oso", 1000) > 0);
+	printf("oso f=%s\n", f);
+	p(strcmp(e, f) < 0);
+
+}
+
+void test_switch() 
+{
+	char *nl = setlocale(LC_ALL, "es.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") < 0); 
+	p(strcoll("b", "é") < 0);
+
+	// should default to UTF-8 that is POSIX but in UTF-8
+	nl = setlocale(LC_COLLATE, "algo_loco.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") > 0); 
+	p(strcoll("b", "é") < 0);
+	p(strcoll("", "é") < 0);
+	p(strcoll("a", "") > 0);
+	p(strcoll("", "") == 0);
+
+	nl = setlocale(LC_ALL, "es_CO.UTF-8");
+	printf("locale %s\n", nl);
+	p(strcoll("é", "f") < 0); 
+	p(strcoll("b", "é") < 0);
+}
+
+
+int main()
+{
+	test_posix();
+	test_esCOUTF8();
+	test_switch();
+	
+	return bad != 0;
+}
